

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Wed Nov 18 19:00:39 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	intentry,global,class=CODE,delta=2
    69                           	psect	functab,global,reloc=256,class=CODE,delta=2
    70                           	dabs	1,0x1A0,32
    71                           	dabs	1,0x120,80
    72                           	dabs	1,0xD0,32
    73                           	dabs	1,0x20,16,_bds
    74                           	dabs	1,0x7E,2
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  0111                     	;# 
   122  0112                     	;# 
   123  0113                     	;# 
   124  0114                     	;# 
   125  0115                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  0118                     	;# 
   129  0119                     	;# 
   130  011D                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0197                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0216                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0217                     	;# 
   168  0391                     	;# 
   169  0392                     	;# 
   170  0393                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  039A                     	;# 
   175  039B                     	;# 
   176  0611                     	;# 
   177  0612                     	;# 
   178  0613                     	;# 
   179  0613                     	;# 
   180  0614                     	;# 
   181  0615                     	;# 
   182  0616                     	;# 
   183  0616                     	;# 
   184  0691                     	;# 
   185  0692                     	;# 
   186  0693                     	;# 
   187  0694                     	;# 
   188  0695                     	;# 
   189  0E8E                     	;# 
   190  0E8F                     	;# 
   191  0E90                     	;# 
   192  0E91                     	;# 
   193  0E92                     	;# 
   194  0E93                     	;# 
   195  0E94                     	;# 
   196  0E94                     	;# 
   197  0E95                     	;# 
   198  0E96                     	;# 
   199  0E97                     	;# 
   200  0E98                     	;# 
   201  0E99                     	;# 
   202  0E9A                     	;# 
   203  0E9B                     	;# 
   204  0E9C                     	;# 
   205  0E9D                     	;# 
   206  0E9E                     	;# 
   207  0E9F                     	;# 
   208  0FE4                     	;# 
   209  0FE5                     	;# 
   210  0FE6                     	;# 
   211  0FE7                     	;# 
   212  0FE8                     	;# 
   213  0FE9                     	;# 
   214  0FEA                     	;# 
   215  0FEB                     	;# 
   216  0FED                     	;# 
   217  0FEE                     	;# 
   218  0FEF                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0095                     	;# 
   251  0096                     	;# 
   252  0097                     	;# 
   253  0098                     	;# 
   254  0099                     	;# 
   255  009A                     	;# 
   256  009B                     	;# 
   257  009B                     	;# 
   258  009C                     	;# 
   259  009D                     	;# 
   260  009E                     	;# 
   261  009F                     	;# 
   262  010C                     	;# 
   263  010D                     	;# 
   264  010E                     	;# 
   265  0111                     	;# 
   266  0112                     	;# 
   267  0113                     	;# 
   268  0114                     	;# 
   269  0115                     	;# 
   270  0116                     	;# 
   271  0117                     	;# 
   272  0118                     	;# 
   273  0119                     	;# 
   274  011D                     	;# 
   275  018C                     	;# 
   276  018D                     	;# 
   277  018E                     	;# 
   278  0191                     	;# 
   279  0191                     	;# 
   280  0192                     	;# 
   281  0193                     	;# 
   282  0193                     	;# 
   283  0194                     	;# 
   284  0195                     	;# 
   285  0196                     	;# 
   286  0197                     	;# 
   287  0199                     	;# 
   288  019A                     	;# 
   289  019B                     	;# 
   290  019B                     	;# 
   291  019C                     	;# 
   292  019D                     	;# 
   293  019E                     	;# 
   294  019F                     	;# 
   295  020C                     	;# 
   296  020D                     	;# 
   297  0211                     	;# 
   298  0211                     	;# 
   299  0212                     	;# 
   300  0212                     	;# 
   301  0213                     	;# 
   302  0213                     	;# 
   303  0214                     	;# 
   304  0214                     	;# 
   305  0215                     	;# 
   306  0215                     	;# 
   307  0215                     	;# 
   308  0216                     	;# 
   309  0216                     	;# 
   310  0217                     	;# 
   311  0217                     	;# 
   312  0391                     	;# 
   313  0392                     	;# 
   314  0393                     	;# 
   315  0394                     	;# 
   316  0395                     	;# 
   317  0396                     	;# 
   318  039A                     	;# 
   319  039B                     	;# 
   320  0611                     	;# 
   321  0612                     	;# 
   322  0613                     	;# 
   323  0613                     	;# 
   324  0614                     	;# 
   325  0615                     	;# 
   326  0616                     	;# 
   327  0616                     	;# 
   328  0691                     	;# 
   329  0692                     	;# 
   330  0693                     	;# 
   331  0694                     	;# 
   332  0695                     	;# 
   333  0E8E                     	;# 
   334  0E8F                     	;# 
   335  0E90                     	;# 
   336  0E91                     	;# 
   337  0E92                     	;# 
   338  0E93                     	;# 
   339  0E94                     	;# 
   340  0E94                     	;# 
   341  0E95                     	;# 
   342  0E96                     	;# 
   343  0E97                     	;# 
   344  0E98                     	;# 
   345  0E99                     	;# 
   346  0E9A                     	;# 
   347  0E9B                     	;# 
   348  0E9C                     	;# 
   349  0E9D                     	;# 
   350  0E9E                     	;# 
   351  0E9F                     	;# 
   352  0FE4                     	;# 
   353  0FE5                     	;# 
   354  0FE6                     	;# 
   355  0FE7                     	;# 
   356  0FE8                     	;# 
   357  0FE9                     	;# 
   358  0FEA                     	;# 
   359  0FEB                     	;# 
   360  0FED                     	;# 
   361  0FEE                     	;# 
   362  0FEF                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0016                     	;# 
   383  0017                     	;# 
   384  0018                     	;# 
   385  0019                     	;# 
   386  001A                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  008C                     	;# 
   390  008D                     	;# 
   391  008E                     	;# 
   392  0091                     	;# 
   393  0092                     	;# 
   394  0095                     	;# 
   395  0096                     	;# 
   396  0097                     	;# 
   397  0098                     	;# 
   398  0099                     	;# 
   399  009A                     	;# 
   400  009B                     	;# 
   401  009B                     	;# 
   402  009C                     	;# 
   403  009D                     	;# 
   404  009E                     	;# 
   405  009F                     	;# 
   406  010C                     	;# 
   407  010D                     	;# 
   408  010E                     	;# 
   409  0111                     	;# 
   410  0112                     	;# 
   411  0113                     	;# 
   412  0114                     	;# 
   413  0115                     	;# 
   414  0116                     	;# 
   415  0117                     	;# 
   416  0118                     	;# 
   417  0119                     	;# 
   418  011D                     	;# 
   419  018C                     	;# 
   420  018D                     	;# 
   421  018E                     	;# 
   422  0191                     	;# 
   423  0191                     	;# 
   424  0192                     	;# 
   425  0193                     	;# 
   426  0193                     	;# 
   427  0194                     	;# 
   428  0195                     	;# 
   429  0196                     	;# 
   430  0197                     	;# 
   431  0199                     	;# 
   432  019A                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019C                     	;# 
   436  019D                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  020C                     	;# 
   440  020D                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0216                     	;# 
   453  0216                     	;# 
   454  0217                     	;# 
   455  0217                     	;# 
   456  0391                     	;# 
   457  0392                     	;# 
   458  0393                     	;# 
   459  0394                     	;# 
   460  0395                     	;# 
   461  0396                     	;# 
   462  039A                     	;# 
   463  039B                     	;# 
   464  0611                     	;# 
   465  0612                     	;# 
   466  0613                     	;# 
   467  0613                     	;# 
   468  0614                     	;# 
   469  0615                     	;# 
   470  0616                     	;# 
   471  0616                     	;# 
   472  0691                     	;# 
   473  0692                     	;# 
   474  0693                     	;# 
   475  0694                     	;# 
   476  0695                     	;# 
   477  0E8E                     	;# 
   478  0E8F                     	;# 
   479  0E90                     	;# 
   480  0E91                     	;# 
   481  0E92                     	;# 
   482  0E93                     	;# 
   483  0E94                     	;# 
   484  0E94                     	;# 
   485  0E95                     	;# 
   486  0E96                     	;# 
   487  0E97                     	;# 
   488  0E98                     	;# 
   489  0E99                     	;# 
   490  0E9A                     	;# 
   491  0E9B                     	;# 
   492  0E9C                     	;# 
   493  0E9D                     	;# 
   494  0E9E                     	;# 
   495  0E9F                     	;# 
   496  0FE4                     	;# 
   497  0FE5                     	;# 
   498  0FE6                     	;# 
   499  0FE7                     	;# 
   500  0FE8                     	;# 
   501  0FE9                     	;# 
   502  0FEA                     	;# 
   503  0FEB                     	;# 
   504  0FED                     	;# 
   505  0FEE                     	;# 
   506  0FEF                     	;# 
   507  0000                     	;# 
   508  0001                     	;# 
   509  0002                     	;# 
   510  0003                     	;# 
   511  0004                     	;# 
   512  0005                     	;# 
   513  0006                     	;# 
   514  0007                     	;# 
   515  0008                     	;# 
   516  0009                     	;# 
   517  000A                     	;# 
   518  000B                     	;# 
   519  000C                     	;# 
   520  000D                     	;# 
   521  000E                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0095                     	;# 
   539  0096                     	;# 
   540  0097                     	;# 
   541  0098                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  009F                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  0111                     	;# 
   554  0112                     	;# 
   555  0113                     	;# 
   556  0114                     	;# 
   557  0115                     	;# 
   558  0116                     	;# 
   559  0117                     	;# 
   560  0118                     	;# 
   561  0119                     	;# 
   562  011D                     	;# 
   563  018C                     	;# 
   564  018D                     	;# 
   565  018E                     	;# 
   566  0191                     	;# 
   567  0191                     	;# 
   568  0192                     	;# 
   569  0193                     	;# 
   570  0193                     	;# 
   571  0194                     	;# 
   572  0195                     	;# 
   573  0196                     	;# 
   574  0197                     	;# 
   575  0199                     	;# 
   576  019A                     	;# 
   577  019B                     	;# 
   578  019B                     	;# 
   579  019C                     	;# 
   580  019D                     	;# 
   581  019E                     	;# 
   582  019F                     	;# 
   583  020C                     	;# 
   584  020D                     	;# 
   585  0211                     	;# 
   586  0211                     	;# 
   587  0212                     	;# 
   588  0212                     	;# 
   589  0213                     	;# 
   590  0213                     	;# 
   591  0214                     	;# 
   592  0214                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0215                     	;# 
   596  0216                     	;# 
   597  0216                     	;# 
   598  0217                     	;# 
   599  0217                     	;# 
   600  0391                     	;# 
   601  0392                     	;# 
   602  0393                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  039A                     	;# 
   607  039B                     	;# 
   608  0611                     	;# 
   609  0612                     	;# 
   610  0613                     	;# 
   611  0613                     	;# 
   612  0614                     	;# 
   613  0615                     	;# 
   614  0616                     	;# 
   615  0616                     	;# 
   616  0691                     	;# 
   617  0692                     	;# 
   618  0693                     	;# 
   619  0694                     	;# 
   620  0695                     	;# 
   621  0E8E                     	;# 
   622  0E8F                     	;# 
   623  0E90                     	;# 
   624  0E91                     	;# 
   625  0E92                     	;# 
   626  0E93                     	;# 
   627  0E94                     	;# 
   628  0E94                     	;# 
   629  0E95                     	;# 
   630  0E96                     	;# 
   631  0E97                     	;# 
   632  0E98                     	;# 
   633  0E99                     	;# 
   634  0E9A                     	;# 
   635  0E9B                     	;# 
   636  0E9C                     	;# 
   637  0E9D                     	;# 
   638  0E9E                     	;# 
   639  0E9F                     	;# 
   640  0FE4                     	;# 
   641  0FE5                     	;# 
   642  0FE6                     	;# 
   643  0FE7                     	;# 
   644  0FE8                     	;# 
   645  0FE9                     	;# 
   646  0FEA                     	;# 
   647  0FEB                     	;# 
   648  0FED                     	;# 
   649  0FEE                     	;# 
   650  0FEF                     	;# 
   651  0000                     	;# 
   652  0001                     	;# 
   653  0002                     	;# 
   654  0003                     	;# 
   655  0004                     	;# 
   656  0005                     	;# 
   657  0006                     	;# 
   658  0007                     	;# 
   659  0008                     	;# 
   660  0009                     	;# 
   661  000A                     	;# 
   662  000B                     	;# 
   663  000C                     	;# 
   664  000D                     	;# 
   665  000E                     	;# 
   666  0011                     	;# 
   667  0012                     	;# 
   668  0015                     	;# 
   669  0016                     	;# 
   670  0016                     	;# 
   671  0017                     	;# 
   672  0018                     	;# 
   673  0019                     	;# 
   674  001A                     	;# 
   675  001B                     	;# 
   676  001C                     	;# 
   677  008C                     	;# 
   678  008D                     	;# 
   679  008E                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0097                     	;# 
   685  0098                     	;# 
   686  0099                     	;# 
   687  009A                     	;# 
   688  009B                     	;# 
   689  009B                     	;# 
   690  009C                     	;# 
   691  009D                     	;# 
   692  009E                     	;# 
   693  009F                     	;# 
   694  010C                     	;# 
   695  010D                     	;# 
   696  010E                     	;# 
   697  0111                     	;# 
   698  0112                     	;# 
   699  0113                     	;# 
   700  0114                     	;# 
   701  0115                     	;# 
   702  0116                     	;# 
   703  0117                     	;# 
   704  0118                     	;# 
   705  0119                     	;# 
   706  011D                     	;# 
   707  018C                     	;# 
   708  018D                     	;# 
   709  018E                     	;# 
   710  0191                     	;# 
   711  0191                     	;# 
   712  0192                     	;# 
   713  0193                     	;# 
   714  0193                     	;# 
   715  0194                     	;# 
   716  0195                     	;# 
   717  0196                     	;# 
   718  0197                     	;# 
   719  0199                     	;# 
   720  019A                     	;# 
   721  019B                     	;# 
   722  019B                     	;# 
   723  019C                     	;# 
   724  019D                     	;# 
   725  019E                     	;# 
   726  019F                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  0211                     	;# 
   730  0211                     	;# 
   731  0212                     	;# 
   732  0212                     	;# 
   733  0213                     	;# 
   734  0213                     	;# 
   735  0214                     	;# 
   736  0214                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0215                     	;# 
   740  0216                     	;# 
   741  0216                     	;# 
   742  0217                     	;# 
   743  0217                     	;# 
   744  0391                     	;# 
   745  0392                     	;# 
   746  0393                     	;# 
   747  0394                     	;# 
   748  0395                     	;# 
   749  0396                     	;# 
   750  039A                     	;# 
   751  039B                     	;# 
   752  0611                     	;# 
   753  0612                     	;# 
   754  0613                     	;# 
   755  0613                     	;# 
   756  0614                     	;# 
   757  0615                     	;# 
   758  0616                     	;# 
   759  0616                     	;# 
   760  0691                     	;# 
   761  0692                     	;# 
   762  0693                     	;# 
   763  0694                     	;# 
   764  0695                     	;# 
   765  0E8E                     	;# 
   766  0E8F                     	;# 
   767  0E90                     	;# 
   768  0E91                     	;# 
   769  0E92                     	;# 
   770  0E93                     	;# 
   771  0E94                     	;# 
   772  0E94                     	;# 
   773  0E95                     	;# 
   774  0E96                     	;# 
   775  0E97                     	;# 
   776  0E98                     	;# 
   777  0E99                     	;# 
   778  0E9A                     	;# 
   779  0E9B                     	;# 
   780  0E9C                     	;# 
   781  0E9D                     	;# 
   782  0E9E                     	;# 
   783  0E9F                     	;# 
   784  0FE4                     	;# 
   785  0FE5                     	;# 
   786  0FE6                     	;# 
   787  0FE7                     	;# 
   788  0FE8                     	;# 
   789  0FE9                     	;# 
   790  0FEA                     	;# 
   791  0FEB                     	;# 
   792  0FED                     	;# 
   793  0FEE                     	;# 
   794  0FEF                     	;# 
   795  0000                     	;# 
   796  0001                     	;# 
   797  0002                     	;# 
   798  0003                     	;# 
   799  0004                     	;# 
   800  0005                     	;# 
   801  0006                     	;# 
   802  0007                     	;# 
   803  0008                     	;# 
   804  0009                     	;# 
   805  000A                     	;# 
   806  000B                     	;# 
   807  000C                     	;# 
   808  000D                     	;# 
   809  000E                     	;# 
   810  0011                     	;# 
   811  0012                     	;# 
   812  0015                     	;# 
   813  0016                     	;# 
   814  0016                     	;# 
   815  0017                     	;# 
   816  0018                     	;# 
   817  0019                     	;# 
   818  001A                     	;# 
   819  001B                     	;# 
   820  001C                     	;# 
   821  008C                     	;# 
   822  008D                     	;# 
   823  008E                     	;# 
   824  0091                     	;# 
   825  0092                     	;# 
   826  0095                     	;# 
   827  0096                     	;# 
   828  0097                     	;# 
   829  0098                     	;# 
   830  0099                     	;# 
   831  009A                     	;# 
   832  009B                     	;# 
   833  009B                     	;# 
   834  009C                     	;# 
   835  009D                     	;# 
   836  009E                     	;# 
   837  009F                     	;# 
   838  010C                     	;# 
   839  010D                     	;# 
   840  010E                     	;# 
   841  0111                     	;# 
   842  0112                     	;# 
   843  0113                     	;# 
   844  0114                     	;# 
   845  0115                     	;# 
   846  0116                     	;# 
   847  0117                     	;# 
   848  0118                     	;# 
   849  0119                     	;# 
   850  011D                     	;# 
   851  018C                     	;# 
   852  018D                     	;# 
   853  018E                     	;# 
   854  0191                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0193                     	;# 
   858  0193                     	;# 
   859  0194                     	;# 
   860  0195                     	;# 
   861  0196                     	;# 
   862  0197                     	;# 
   863  0199                     	;# 
   864  019A                     	;# 
   865  019B                     	;# 
   866  019B                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  020C                     	;# 
   872  020D                     	;# 
   873  0211                     	;# 
   874  0211                     	;# 
   875  0212                     	;# 
   876  0212                     	;# 
   877  0213                     	;# 
   878  0213                     	;# 
   879  0214                     	;# 
   880  0214                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0216                     	;# 
   885  0216                     	;# 
   886  0217                     	;# 
   887  0217                     	;# 
   888  0391                     	;# 
   889  0392                     	;# 
   890  0393                     	;# 
   891  0394                     	;# 
   892  0395                     	;# 
   893  0396                     	;# 
   894  039A                     	;# 
   895  039B                     	;# 
   896  0611                     	;# 
   897  0612                     	;# 
   898  0613                     	;# 
   899  0613                     	;# 
   900  0614                     	;# 
   901  0615                     	;# 
   902  0616                     	;# 
   903  0616                     	;# 
   904  0691                     	;# 
   905  0692                     	;# 
   906  0693                     	;# 
   907  0694                     	;# 
   908  0695                     	;# 
   909  0E8E                     	;# 
   910  0E8F                     	;# 
   911  0E90                     	;# 
   912  0E91                     	;# 
   913  0E92                     	;# 
   914  0E93                     	;# 
   915  0E94                     	;# 
   916  0E94                     	;# 
   917  0E95                     	;# 
   918  0E96                     	;# 
   919  0E97                     	;# 
   920  0E98                     	;# 
   921  0E99                     	;# 
   922  0E9A                     	;# 
   923  0E9B                     	;# 
   924  0E9C                     	;# 
   925  0E9D                     	;# 
   926  0E9E                     	;# 
   927  0E9F                     	;# 
   928  0FE4                     	;# 
   929  0FE5                     	;# 
   930  0FE6                     	;# 
   931  0FE7                     	;# 
   932  0FE8                     	;# 
   933  0FE9                     	;# 
   934  0FEA                     	;# 
   935  0FEB                     	;# 
   936  0FED                     	;# 
   937  0FEE                     	;# 
   938  0FEF                     	;_ep_buffers
   939                           
   940 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
   941  0000                     
   942 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
   943  0000                     
   944 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
   945  0000                     
   946                           	psect	idataBANK0
   947  0EF9                     __pidataBANK0:	
   948                           
   949                           ;initializer for _ep_buf
   950  0EF9  3400               	retlw	0
   951  0EFA  3400               	retlw	0
   952  0EFB  3400               	retlw	0
   953  0EFC  3400               	retlw	0
   954  0EFD  3400               	retlw	0
   955  0EFE  3400               	retlw	0
   956  0EFF  3400               	retlw	0
   957  0F00  3490               	retlw	144
   958  0F01  3420               	retlw	32
   959  0F02  34D0               	retlw	208
   960  0F03  3420               	retlw	32
   961  0F04  3440               	retlw	64
   962  0F05  3440               	retlw	64
   963  0F06  3400               	retlw	0
   964                           
   965                           ;initializer for _ep0_buf
   966  0F07  3480               	retlw	128
   967  0F08  3420               	retlw	32
   968  0F09  3488               	retlw	136
   969  0F0A  3420               	retlw	32
   970  0F0B  3400               	retlw	0
   971                           
   972                           ;initializer for _usb_application_config_descs
   973  0F0C  347F               	retlw	low (_configuration_1| (0+32768))
   974  0F0D  3483               	retlw	high (_configuration_1| (0+32768))
   975                           
   976                           	psect	stringtext
   977  0300                     __pstringtext:	
   978  0300                     __stringtab:	
   979  0300  3400               	retlw	0
   980  0301                     __end_of__stringtab:	
   981  0301                     _interface_string:	
   982  0301  3418               	retlw	24
   983  0302  3403               	retlw	3
   984  0303  3449               	retlw	73
   985  0304  3400               	retlw	0
   986  0305  346E               	retlw	110
   987  0306  3400               	retlw	0
   988  0307  3474               	retlw	116
   989  0308  3400               	retlw	0
   990  0309  3465               	retlw	101
   991  030A  3400               	retlw	0
   992  030B  3472               	retlw	114
   993  030C  3400               	retlw	0
   994  030D  3466               	retlw	102
   995  030E  3400               	retlw	0
   996  030F  3461               	retlw	97
   997  0310  3400               	retlw	0
   998  0311  3463               	retlw	99
   999  0312  3400               	retlw	0
  1000  0313  3465               	retlw	101
  1001  0314  3400               	retlw	0
  1002  0315  3420               	retlw	32
  1003  0316  3400               	retlw	0
  1004  0317  3431               	retlw	49
  1005  0318  3400               	retlw	0
  1006  0319                     __end_of_interface_string:	
  1007  0319                     _product_string:	
  1008  0319  343A               	retlw	58
  1009  031A  3403               	retlw	3
  1010  031B  3455               	retlw	85
  1011  031C  3400               	retlw	0
  1012  031D  3453               	retlw	83
  1013  031E  3400               	retlw	0
  1014  031F  3442               	retlw	66
  1015  0320  3400               	retlw	0
  1016  0321  3420               	retlw	32
  1017  0322  3400               	retlw	0
  1018  0323  3450               	retlw	80
  1019  0324  3400               	retlw	0
  1020  0325  346F               	retlw	111
  1021  0326  3400               	retlw	0
  1022  0327  3474               	retlw	116
  1023  0328  3400               	retlw	0
  1024  0329  3465               	retlw	101
  1025  032A  3400               	retlw	0
  1026  032B  346E               	retlw	110
  1027  032C  3400               	retlw	0
  1028  032D  3474               	retlw	116
  1029  032E  3400               	retlw	0
  1030  032F  3469               	retlw	105
  1031  0330  3400               	retlw	0
  1032  0331  346F               	retlw	111
  1033  0332  3400               	retlw	0
  1034  0333  3473               	retlw	115
  1035  0334  3400               	retlw	0
  1036  0335  3474               	retlw	116
  1037  0336  3400               	retlw	0
  1038  0337  3461               	retlw	97
  1039  0338  3400               	retlw	0
  1040  0339  3474               	retlw	116
  1041  033A  3400               	retlw	0
  1042  033B  342F               	retlw	47
  1043  033C  3400               	retlw	0
  1044  033D  3467               	retlw	103
  1045  033E  3400               	retlw	0
  1046  033F  3461               	retlw	97
  1047  0340  3400               	retlw	0
  1048  0341  346C               	retlw	108
  1049  0342  3400               	retlw	0
  1050  0343  3476               	retlw	118
  1051  0344  3400               	retlw	0
  1052  0345  3461               	retlw	97
  1053  0346  3400               	retlw	0
  1054  0347  346E               	retlw	110
  1055  0348  3400               	retlw	0
  1056  0349  346F               	retlw	111
  1057  034A  3400               	retlw	0
  1058  034B  3473               	retlw	115
  1059  034C  3400               	retlw	0
  1060  034D  3474               	retlw	116
  1061  034E  3400               	retlw	0
  1062  034F  3461               	retlw	97
  1063  0350  3400               	retlw	0
  1064  0351  3474               	retlw	116
  1065  0352  3400               	retlw	0
  1066  0353                     __end_of_product_string:	
  1067  0353                     _vendor_string:	
  1068  0353  342C               	retlw	44
  1069  0354  3403               	retlw	3
  1070  0355  3443               	retlw	67
  1071  0356  3400               	retlw	0
  1072  0357  346F               	retlw	111
  1073  0358  3400               	retlw	0
  1074  0359  3443               	retlw	67
  1075  035A  3400               	retlw	0
  1076  035B  346F               	retlw	111
  1077  035C  3400               	retlw	0
  1078  035D  346F               	retlw	111
  1079  035E  3400               	retlw	0
  1080  035F  344E               	retlw	78
  1081  0360  3400               	retlw	0
  1082  0361  3420               	retlw	32
  1083  0362  3400               	retlw	0
  1084  0363  3472               	retlw	114
  1085  0364  3400               	retlw	0
  1086  0365  3465               	retlw	101
  1087  0366  3400               	retlw	0
  1088  0367  3473               	retlw	115
  1089  0368  3400               	retlw	0
  1090  0369  3465               	retlw	101
  1091  036A  3400               	retlw	0
  1092  036B  3461               	retlw	97
  1093  036C  3400               	retlw	0
  1094  036D  3472               	retlw	114
  1095  036E  3400               	retlw	0
  1096  036F  3463               	retlw	99
  1097  0370  3400               	retlw	0
  1098  0371  3468               	retlw	104
  1099  0372  3400               	retlw	0
  1100  0373  3420               	retlw	32
  1101  0374  3400               	retlw	0
  1102  0375  3467               	retlw	103
  1103  0376  3400               	retlw	0
  1104  0377  3472               	retlw	114
  1105  0378  3400               	retlw	0
  1106  0379  346F               	retlw	111
  1107  037A  3400               	retlw	0
  1108  037B  3475               	retlw	117
  1109  037C  3400               	retlw	0
  1110  037D  3470               	retlw	112
  1111  037E  3400               	retlw	0
  1112  037F                     __end_of_vendor_string:	
  1113  037F                     _configuration_1:	
  1114  037F  3409               	retlw	9
  1115  0380  3402               	retlw	2
  1116  0381  3420               	retlw	32
  1117  0382  3400               	retlw	0
  1118  0383  3401               	retlw	1
  1119  0384  3401               	retlw	1
  1120  0385  3402               	retlw	2
  1121  0386  3480               	retlw	128
  1122  0387  3432               	retlw	50
  1123  0388  3409               	retlw	9
  1124  0389  3404               	retlw	4
  1125  038A  3400               	retlw	0
  1126  038B  3400               	retlw	0
  1127  038C  3402               	retlw	2
  1128  038D  34FF               	retlw	255
  1129  038E  3400               	retlw	0
  1130  038F  3400               	retlw	0
  1131  0390  3402               	retlw	2
  1132  0391  3407               	retlw	7
  1133  0392  3405               	retlw	5
  1134  0393  3481               	retlw	129
  1135  0394  3402               	retlw	2
  1136  0395  3440               	retlw	64
  1137  0396  3400               	retlw	0
  1138  0397  3401               	retlw	1
  1139  0398  3407               	retlw	7
  1140  0399  3405               	retlw	5
  1141  039A  3401               	retlw	1
  1142  039B  3402               	retlw	2
  1143  039C  3440               	retlw	64
  1144  039D  3400               	retlw	0
  1145  039E  3401               	retlw	1
  1146  039F                     __end_of_configuration_1:	
  1147  039F                     _this_device_descriptor:	
  1148  039F  3412               	retlw	18
  1149  03A0  3401               	retlw	1
  1150  03A1  3400               	retlw	0
  1151  03A2  3402               	retlw	2
  1152  03A3  3400               	retlw	0
  1153  03A4  3400               	retlw	0
  1154  03A5  3400               	retlw	0
  1155  03A6  3408               	retlw	8
  1156  03A7  34A0               	retlw	160
  1157  03A8  34A0               	retlw	160
  1158  03A9  3402               	retlw	2
  1159  03AA  3400               	retlw	0
  1160  03AB  3401               	retlw	1
  1161  03AC  3400               	retlw	0
  1162  03AD  3401               	retlw	1
  1163  03AE  3402               	retlw	2
  1164  03AF  3403               	retlw	3
  1165  03B0  3401               	retlw	1
  1166  03B1                     __end_of_this_device_descriptor:	
  1167  03B1                     _serial_string:	
  1168  03B1  340A               	retlw	10
  1169  03B2  3403               	retlw	3
  1170  03B3  3430               	retlw	48
  1171  03B4  3400               	retlw	0
  1172  03B5  3430               	retlw	48
  1173  03B6  3400               	retlw	0
  1174  03B7  3430               	retlw	48
  1175  03B8  3400               	retlw	0
  1176  03B9  3431               	retlw	49
  1177  03BA  3400               	retlw	0
  1178  03BB                     __end_of_serial_string:	
  1179  03BB                     _str00:	
  1180  03BB  3404               	retlw	4
  1181  03BC  3403               	retlw	3
  1182  03BD  3409               	retlw	9
  1183  03BE  3404               	retlw	4
  1184  03BF                     __end_of_str00:	
  1185  2080                     _ep_buffers	set	8320
  1186  000B                     _INTCONbits	set	11
  1187  0011                     _PIR1bits	set	17
  1188  0012                     _PIR2bits	set	18
  1189  000D                     _PORTBbits	set	13
  1190  000E                     _PORTCbits	set	14
  1191  0099                     _OSCCONbits	set	153
  1192  0092                     _PIE2bits	set	146
  1193  008C                     _TRISAbits	set	140
  1194  008D                     _TRISBbits	set	141
  1195  008E                     _TRISCbits	set	142
  1196  011D                     _APFCON	set	285
  1197  010C                     _LATAbits	set	268
  1198  010D                     _LATBbits	set	269
  1199  010E                     _LATCbits	set	270
  1200  0191                     _PMADR	set	401
  1201  0193                     _PMDAT	set	403
  1202  018C                     _ANSELA	set	396
  1203  018D                     _ANSELB	set	397
  1204  018E                     _ANSELC	set	398
  1205  019F                     _BAUDCON	set	415
  1206  0195                     _PMCON1bits	set	405
  1207  0199                     _RCREG	set	409
  1208  019D                     _RCSTA	set	413
  1209  019D                     _RCSTAbits	set	413
  1210  019C                     _SPBRGH	set	412
  1211  019B                     _SPBRGL	set	411
  1212  019A                     _TXREG	set	410
  1213  019E                     _TXSTA	set	414
  1214  019E                     _TXSTAbits	set	414
  1215  039B                     _ACTCONbits	set	923
  1216  0E96                     _UADDR	set	3734
  1217  0E91                     _UCFGbits	set	3729
  1218  0E8E                     _UCONbits	set	3726
  1219  0E97                     _UEIE	set	3735
  1220  0E92                     _UIE	set	3730
  1221  0E92                     _UIEbits	set	3730
  1222  0E90                     _UIR	set	3728
  1223  0E90                     _UIRbits	set	3728
  1224  0E8F                     _USTATbits	set	3727
  1225  0E98                     _UEP0	set	3736
  1226  03BF                     __stringdata:	
  1227  03BF                     STR_6:	
  1228  03BF  3450               	retlw	80	;'P'
  1229  03C0  344F               	retlw	79	;'O'
  1230  03C1  3454               	retlw	84	;'T'
  1231  03C2  3445               	retlw	69	;'E'
  1232  03C3  344E               	retlw	78	;'N'
  1233  03C4  3454               	retlw	84	;'T'
  1234  03C5  3449               	retlw	73	;'I'
  1235  03C6  344F               	retlw	79	;'O'
  1236  03C7  3453               	retlw	83	;'S'
  1237  03C8  3454               	retlw	84	;'T'
  1238  03C9  3441               	retlw	65	;'A'
  1239  03CA  3454               	retlw	84	;'T'
  1240  03CB  3449               	retlw	73	;'I'
  1241  03CC  3443               	retlw	67	;'C'
  1242  03CD  3400               	retlw	0
  1243  03CE                     STR_19:	
  1244  03CE  3453               	retlw	83	;'S'
  1245  03CF  3448               	retlw	72	;'H'
  1246  03D0  3455               	retlw	85	;'U'
  1247  03D1  344E               	retlw	78	;'N'
  1248  03D2  3454               	retlw	84	;'T'
  1249  03D3  3443               	retlw	67	;'C'
  1250  03D4  3441               	retlw	65	;'A'
  1251  03D5  344C               	retlw	76	;'L'
  1252  03D6  3453               	retlw	83	;'S'
  1253  03D7  3441               	retlw	65	;'A'
  1254  03D8  3456               	retlw	86	;'V'
  1255  03D9  3445               	retlw	69	;'E'
  1256  03DA  3420               	retlw	32	;' '
  1257  03DB  3400               	retlw	0
  1258  03DC                     STR_7:	
  1259  03DC  3447               	retlw	71	;'G'
  1260  03DD  3441               	retlw	65	;'A'
  1261  03DE  344C               	retlw	76	;'L'
  1262  03DF  3456               	retlw	86	;'V'
  1263  03E0  3441               	retlw	65	;'A'
  1264  03E1  344E               	retlw	78	;'N'
  1265  03E2  344F               	retlw	79	;'O'
  1266  03E3  3453               	retlw	83	;'S'
  1267  03E4  3454               	retlw	84	;'T'
  1268  03E5  3441               	retlw	65	;'A'
  1269  03E6  3454               	retlw	84	;'T'
  1270  03E7  3449               	retlw	73	;'I'
  1271  03E8  3443               	retlw	67	;'C'
  1272  03E9  3400               	retlw	0
  1273  03EA                     STR_18:	
  1274  03EA  3453               	retlw	83	;'S'
  1275  03EB  3448               	retlw	72	;'H'
  1276  03EC  3455               	retlw	85	;'U'
  1277  03ED  344E               	retlw	78	;'N'
  1278  03EE  3454               	retlw	84	;'T'
  1279  03EF  3443               	retlw	67	;'C'
  1280  03F0  3441               	retlw	65	;'A'
  1281  03F1  344C               	retlw	76	;'L'
  1282  03F2  3452               	retlw	82	;'R'
  1283  03F3  3445               	retlw	69	;'E'
  1284  03F4  3441               	retlw	65	;'A'
  1285  03F5  3444               	retlw	68	;'D'
  1286  03F6  3400               	retlw	0
  1287  03F7                     STR_15:	
  1288  03F7  344F               	retlw	79	;'O'
  1289  03F8  3446               	retlw	70	;'F'
  1290  03F9  3446               	retlw	70	;'F'
  1291  03FA  3453               	retlw	83	;'S'
  1292  03FB  3445               	retlw	69	;'E'
  1293  03FC  3454               	retlw	84	;'T'
  1294  03FD  3453               	retlw	83	;'S'
  1295  03FE  3441               	retlw	65	;'A'
  1296  03FF  3456               	retlw	86	;'V'
  1297  0400  3445               	retlw	69	;'E'
  1298  0401  3420               	retlw	32	;' '
  1299  0402  3400               	retlw	0
  1300  0403                     STR_17:	
  1301  0403  3444               	retlw	68	;'D'
  1302  0404  3441               	retlw	65	;'A'
  1303  0405  3443               	retlw	67	;'C'
  1304  0406  3443               	retlw	67	;'C'
  1305  0407  3441               	retlw	65	;'A'
  1306  0408  344C               	retlw	76	;'L'
  1307  0409  3453               	retlw	83	;'S'
  1308  040A  3445               	retlw	69	;'E'
  1309  040B  3454               	retlw	84	;'T'
  1310  040C  3420               	retlw	32	;' '
  1311  040D  3400               	retlw	0
  1312  040E                     STR_14:	
  1313  040E  344F               	retlw	79	;'O'
  1314  040F  3446               	retlw	70	;'F'
  1315  0410  3446               	retlw	70	;'F'
  1316  0411  3453               	retlw	83	;'S'
  1317  0412  3445               	retlw	69	;'E'
  1318  0413  3454               	retlw	84	;'T'
  1319  0414  3452               	retlw	82	;'R'
  1320  0415  3445               	retlw	69	;'E'
  1321  0416  3441               	retlw	65	;'A'
  1322  0417  3444               	retlw	68	;'D'
  1323  0418  3400               	retlw	0
  1324  0419                     STR_16:	
  1325  0419  3444               	retlw	68	;'D'
  1326  041A  3441               	retlw	65	;'A'
  1327  041B  3443               	retlw	67	;'C'
  1328  041C  3443               	retlw	67	;'C'
  1329  041D  3441               	retlw	65	;'A'
  1330  041E  344C               	retlw	76	;'L'
  1331  041F  3447               	retlw	71	;'G'
  1332  0420  3445               	retlw	69	;'E'
  1333  0421  3454               	retlw	84	;'T'
  1334  0422  3400               	retlw	0
  1335  0423                     STR_5:	
  1336  0423  3443               	retlw	67	;'C'
  1337  0424  3445               	retlw	69	;'E'
  1338  0425  344C               	retlw	76	;'L'
  1339  0426  344C               	retlw	76	;'L'
  1340  0427  3420               	retlw	32	;' '
  1341  0428  344F               	retlw	79	;'O'
  1342  0429  3446               	retlw	70	;'F'
  1343  042A  3446               	retlw	70	;'F'
  1344  042B  3400               	retlw	0
  1345  042C                     STR_11:	
  1346  042C  3444               	retlw	68	;'D'
  1347  042D  3441               	retlw	65	;'A'
  1348  042E  3443               	retlw	67	;'C'
  1349  042F  3453               	retlw	83	;'S'
  1350  0430  3445               	retlw	69	;'E'
  1351  0431  3454               	retlw	84	;'T'
  1352  0432  3420               	retlw	32	;' '
  1353  0433  3400               	retlw	0
  1354  0434                     STR_8:	
  1355  0434  3452               	retlw	82	;'R'
  1356  0435  3441               	retlw	65	;'A'
  1357  0436  344E               	retlw	78	;'N'
  1358  0437  3447               	retlw	71	;'G'
  1359  0438  3445               	retlw	69	;'E'
  1360  0439  3420               	retlw	32	;' '
  1361  043A  3431               	retlw	49	;'1'
  1362  043B  3400               	retlw	0
  1363  043C                     STR_9:	
  1364  043C  3452               	retlw	82	;'R'
  1365  043D  3441               	retlw	65	;'A'
  1366  043E  344E               	retlw	78	;'N'
  1367  043F  3447               	retlw	71	;'G'
  1368  0440  3445               	retlw	69	;'E'
  1369  0441  3420               	retlw	32	;' '
  1370  0442  3432               	retlw	50	;'2'
  1371  0443  3400               	retlw	0
  1372  0444                     STR_10:	
  1373  0444  3452               	retlw	82	;'R'
  1374  0445  3441               	retlw	65	;'A'
  1375  0446  344E               	retlw	78	;'N'
  1376  0447  3447               	retlw	71	;'G'
  1377  0448  3445               	retlw	69	;'E'
  1378  0449  3420               	retlw	32	;' '
  1379  044A  3433               	retlw	51	;'3'
  1380  044B  3400               	retlw	0
  1381  044C                     STR_13:	
  1382  044C  3441               	retlw	65	;'A'
  1383  044D  3444               	retlw	68	;'D'
  1384  044E  3443               	retlw	67	;'C'
  1385  044F  3452               	retlw	82	;'R'
  1386  0450  3445               	retlw	69	;'E'
  1387  0451  3441               	retlw	65	;'A'
  1388  0452  3444               	retlw	68	;'D'
  1389  0453  3400               	retlw	0
  1390  0454                     STR_4:	
  1391  0454  3443               	retlw	67	;'C'
  1392  0455  3445               	retlw	69	;'E'
  1393  0456  344C               	retlw	76	;'L'
  1394  0457  344C               	retlw	76	;'L'
  1395  0458  3420               	retlw	32	;' '
  1396  0459  344F               	retlw	79	;'O'
  1397  045A  344E               	retlw	78	;'N'
  1398  045B  3400               	retlw	0
  1399  045C                     STR_12:	
  1400  045C  3444               	retlw	68	;'D'
  1401  045D  3441               	retlw	65	;'A'
  1402  045E  3443               	retlw	67	;'C'
  1403  045F  3443               	retlw	67	;'C'
  1404  0460  3441               	retlw	65	;'A'
  1405  0461  344C               	retlw	76	;'L'
  1406  0462  3400               	retlw	0
  1407  0463                     STR_3:	
  1408  0463  3457               	retlw	87	;'W'
  1409  0464  3441               	retlw	65	;'A'
  1410  0465  3449               	retlw	73	;'I'
  1411  0466  3454               	retlw	84	;'T'
  1412  0467  340A               	retlw	10
  1413  0468  3400               	retlw	0
  1414  0469                     STR_2:	
  1415  0469  344F               	retlw	79	;'O'
  1416  046A  344B               	retlw	75	;'K'
  1417  046B  340A               	retlw	10
  1418  046C  3400               	retlw	0
  1419  046D                     STR_1:	
  1420  046D  343F               	retlw	63	;'?'
  1421  046E  340A               	retlw	10
  1422  046F  3400               	retlw	0
  1423  0470                     __end_of__stringdata:	
  1424                           
  1425                           ; #config settings
  1426  0000                     
  1427                           	psect	cinit
  1428  000D                     start_initialization:	
  1429  000D                     __initialization:	
  1430                           
  1431                           ; Clear objects allocated to COMMON
  1432  000D  01FC               	clrf	__pbssCOMMON& (0+127)
  1433                           
  1434                           ; Clear objects allocated to BANK0
  1435  000E  3030               	movlw	low __pbssBANK0
  1436  000F  0084               	movwf	4
  1437  0010  3000               	movlw	high __pbssBANK0
  1438  0011  0085               	movwf	5
  1439  0012  3017               	movlw	23
  1440  0013  00FE               	movwf	btemp
  1441  0014  3000               	movlw	0
  1442  0015  00FF               	movwf	btemp+1
  1443  0016  318E  2679  3180   	fcall	clear_ram0
  1444                           
  1445                           ; Clear objects allocated to BANK1
  1446  0019  30A0               	movlw	low __pbssBANK1
  1447  001A  0084               	movwf	4
  1448  001B  3000               	movlw	high __pbssBANK1
  1449  001C  0085               	movwf	5
  1450  001D  3014               	movlw	20
  1451  001E  00FE               	movwf	btemp
  1452  001F  3000               	movlw	0
  1453  0020  00FF               	movwf	btemp+1
  1454  0021  318E  2679  3180   	fcall	clear_ram0
  1455                           
  1456                           ; Clear objects allocated to BANK3
  1457  0024  30C0               	movlw	low __pbssBANK3
  1458  0025  0084               	movwf	4
  1459  0026  3001               	movlw	high __pbssBANK3
  1460  0027  0085               	movwf	5
  1461  0028  3020               	movlw	32
  1462  0029  00FE               	movwf	btemp
  1463  002A  3000               	movlw	0
  1464  002B  00FF               	movwf	btemp+1
  1465  002C  318E  2679  3180   	fcall	clear_ram0
  1466                           
  1467                           ; Initialize objects allocated to BANK0
  1468  002F  30F9               	movlw	low __pidataBANK0
  1469  0030  0084               	movwf	4
  1470  0031  308E               	movlw	(high __pidataBANK0)| (0+128)
  1471  0032  0085               	movwf	5
  1472  0033  3047               	movlw	low __pdataBANK0
  1473  0034  0086               	movwf	6
  1474  0035  3000               	movlw	high __pdataBANK0
  1475  0036  0087               	movwf	7
  1476  0037  3000               	movlw	0
  1477  0038  00FF               	movwf	btemp+1
  1478  0039  3015               	movlw	21
  1479  003A  318E  266D         	fcall	init_ram
  1480  003C                     end_of_initialization:	
  1481                           ;End of C runtime variable initialization code
  1482                           
  1483  003C                     __end_of__initialization:	
  1484  003C  0020               	movlb	0
  1485  003D  3187  2F1D         	ljmp	_main	;jump to C main() function
  1486                           
  1487                           	psect	bssCOMMON
  1488  007C                     __pbssCOMMON:	
  1489  007C                     _received_data_length:	
  1490  007C                     	ds	1
  1491                           
  1492                           	psect	bssBANK0
  1493  0030                     __pbssBANK0:	
  1494  0030                     _ep0_data_stage_buf_remaining:	
  1495  0030                     	ds	2
  1496  0032                     _ep0_data_stage_in_buffer:	
  1497  0032                     	ds	2
  1498  0034                     _received_data:	
  1499  0034                     	ds	2
  1500  0036                     _EUSART_ErrorHandler:	
  1501  0036                     	ds	1
  1502  0037                     _EUSART_FramingErrorHandler:	
  1503  0037                     	ds	1
  1504  0038                     _EUSART_OverrunErrorHandler:	
  1505  0038                     	ds	1
  1506  0039                     _addr:	
  1507  0039                     	ds	1
  1508  003A                     _addr_pending:	
  1509  003A                     	ds	1
  1510  003B                     _control_need_zlp:	
  1511  003B                     	ds	1
  1512  003C                     _ep0_data_stage_callback:	
  1513  003C                     	ds	1
  1514  003D                     _ep0_data_stage_context:	
  1515  003D                     	ds	1
  1516  003E                     _ep0_data_stage_direc:	
  1517  003E                     	ds	1
  1518  003F                     _ep0_data_stage_out_buffer:	
  1519  003F                     	ds	1
  1520  0040                     _eusartRxLastError:	
  1521  0040                     	ds	1
  1522  0041                     _returning_short:	
  1523  0041                     	ds	1
  1524  0042                     _transfer_data:	
  1525  0042                     	ds	1
  1526  0043                     _transfer_interface:	
  1527  0043                     	ds	1
  1528  0044                     _transmit_data:	
  1529  0044                     	ds	1
  1530  0045                     _transmit_data_length:	
  1531  0045                     	ds	1
  1532  0046                     _g_configuration:	
  1533  0046                     	ds	1
  1534                           
  1535                           	psect	dataBANK0
  1536  0047                     __pdataBANK0:	
  1537  0047                     _ep_buf:	
  1538  0047                     	ds	14
  1539  0055                     _ep0_buf:	
  1540  0055                     	ds	5
  1541  005A                     _usb_application_config_descs:	
  1542  005A                     	ds	2
  1543                           
  1544                           	psect	bssBANK1
  1545  00A0                     __pbssBANK1:	
  1546  00A0                     _uart_command:	
  1547  00A0                     	ds	20
  1548                           
  1549                           	psect	bssBANK3
  1550  01C0                     __pbssBANK3:	
  1551  01C0                     _heflashbuffer:	
  1552  01C0                     	ds	32
  1553                           
  1554                           	psect	clrtext
  1555  0E79                     clear_ram0:	
  1556                           ;	Called with FSR0 containing the base address, and
  1557                           ;	btemp/btemp+1 has the size to clear
  1558                           
  1559  0E79  0064               	clrwdt	;clear the watchdog before getting into this loop
  1560  0E7A                     clrloop0:	
  1561  0E7A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1562  0E7B  3101               	addfsr 0,1
  1563  0E7C  3001               	movlw	1
  1564  0E7D  02FE               	subwf	126,f
  1565  0E7E  3000               	movlw	0
  1566  0E7F  3BFF               	subwfb	127,f
  1567  0E80  087F               	movf	127,w
  1568  0E81  047E               	iorwf	126,w
  1569  0E82  1903               	btfsc	3,2
  1570  0E83  3400               	retlw	0	;all done for this memory range, return
  1571  0E84  2E7A               	goto	clrloop0	;have we reached the end yet?
  1572                           
  1573                           	psect	inittext
  1574  0E6D                     init_ram:	
  1575  0E6D  00FE               	movwf	126
  1576  0E6E                     initloop:	
  1577  0E6E  0012               	moviw fsr0++
  1578  0E6F  001E               	movwi fsr1++
  1579  0E70  3001               	movlw	1
  1580  0E71  02FE               	subwf	126,f
  1581  0E72  3000               	movlw	0
  1582  0E73  3BFF               	subwfb	127,f
  1583  0E74  087F               	movf	127,w
  1584  0E75  047E               	iorwf	126,w
  1585  0E76  1903               	btfsc	3,2
  1586  0E77  3400               	retlw	0
  1587  0E78  2E6E               	goto	initloop
  1588                           
  1589                           	psect	cstackCOMMON
  1590  0070                     __pcstackCOMMON:	
  1591  0070                     ?_SPIDelay:	
  1592  0070                     ?_WriteByteSPI:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0070                     ?_ClockPulse:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0070                     ?_EUSART_Initialize:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0070                     ?_EUSART_SetFramingErrorHandler:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0070                     ?_EUSART_SetOverrunErrorHandler:	
  1605                           ; 0 bytes @ 0x0
  1606                           
  1607  0070                     ?_EUSART_SetErrorHandler:	
  1608                           ; 0 bytes @ 0x0
  1609                           
  1610  0070                     ?__unlock:	
  1611                           ; 0 bytes @ 0x0
  1612                           
  1613  0070                     ?_InitializeSPI:	
  1614                           ; 0 bytes @ 0x0
  1615                           
  1616  0070                     ?_DAC1220_Reset:	
  1617                           ; 0 bytes @ 0x0
  1618                           
  1619  0070                     ?_DAC1220_Init:	
  1620                           ; 0 bytes @ 0x0
  1621                           
  1622  0070                     ?_DAC1220_SelfCal:	
  1623                           ; 0 bytes @ 0x0
  1624                           
  1625  0070                     ?_InitializeIO:	
  1626                           ; 0 bytes @ 0x0
  1627                           
  1628  0070                     ?_command_unknown:	
  1629                           ; 0 bytes @ 0x0
  1630                           
  1631  0070                     ?_send_OK:	
  1632                           ; 0 bytes @ 0x0
  1633                           
  1634  0070                     ?_send_WAIT:	
  1635                           ; 0 bytes @ 0x0
  1636                           
  1637  0070                     ?_command_cell_on:	
  1638                           ; 0 bytes @ 0x0
  1639                           
  1640  0070                     ?_command_cell_off:	
  1641                           ; 0 bytes @ 0x0
  1642                           
  1643  0070                     ?_command_mode_potentiostatic:	
  1644                           ; 0 bytes @ 0x0
  1645                           
  1646  0070                     ?_command_mode_galvanostatic:	
  1647                           ; 0 bytes @ 0x0
  1648                           
  1649  0070                     ?_command_range1:	
  1650                           ; 0 bytes @ 0x0
  1651                           
  1652  0070                     ?_command_range2:	
  1653                           ; 0 bytes @ 0x0
  1654                           
  1655  0070                     ?_command_range3:	
  1656                           ; 0 bytes @ 0x0
  1657                           
  1658  0070                     ?_command_calibrate_dac:	
  1659                           ; 0 bytes @ 0x0
  1660                           
  1661  0070                     ?_command_read_adc:	
  1662                           ; 0 bytes @ 0x0
  1663                           
  1664  0070                     ?_command_read_offset:	
  1665                           ; 0 bytes @ 0x0
  1666                           
  1667  0070                     ?_command_read_shuntcalibration:	
  1668                           ; 0 bytes @ 0x0
  1669                           
  1670  0070                     ?_command_read_dac_cal:	
  1671                           ; 0 bytes @ 0x0
  1672                           
  1673  0070                     ?_interpret_command:	
  1674                           ; 0 bytes @ 0x0
  1675                           
  1676  0070                     ?_isr:	
  1677                           ; 0 bytes @ 0x0
  1678                           
  1679  0070                     ??_isr:	
  1680                           ; 0 bytes @ 0x0
  1681                           
  1682  0070                     ?_EUSART_Write:	
  1683                           ; 0 bytes @ 0x0
  1684                           
  1685  0070                     ?_ReadByteSPI:	
  1686                           ; 0 bytes @ 0x0
  1687                           
  1688  0070                     ?_EUSART_is_rx_ready:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0070                     ?_EUSART_Read:	
  1692                           ; 1 bytes @ 0x0
  1693                           
  1694  0070                     ?_MCP3550_Read:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0070                     ?_main:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700                           
  1701                           ; 2 bytes @ 0x0
  1702  0070                     	ds	1
  1703  0071                     ??_SPIDelay:	
  1704  0071                     ??_EUSART_is_rx_ready:	
  1705                           ; 0 bytes @ 0x1
  1706                           
  1707  0071                     ??_EUSART_Read:	
  1708                           ; 0 bytes @ 0x1
  1709                           
  1710  0071                     ??_EUSART_SetFramingErrorHandler:	
  1711                           ; 0 bytes @ 0x1
  1712                           
  1713  0071                     ??_EUSART_SetOverrunErrorHandler:	
  1714                           ; 0 bytes @ 0x1
  1715                           
  1716  0071                     ??_EUSART_SetErrorHandler:	
  1717                           ; 0 bytes @ 0x1
  1718                           
  1719  0071                     ??__unlock:	
  1720                           ; 0 bytes @ 0x1
  1721                           
  1722  0071                     ?_FLASH_write:	
  1723                           ; 0 bytes @ 0x1
  1724                           
  1725  0071                     ?_FLASH_erase:	
  1726                           ; 0 bytes @ 0x1
  1727                           
  1728  0071                     ??_InitializeSPI:	
  1729                           ; 0 bytes @ 0x1
  1730                           
  1731  0071                     ??_EUSART_Write:	
  1732                           ; 0 bytes @ 0x1
  1733                           
  1734  0071                     ?_memcpy:	
  1735                           ; 0 bytes @ 0x1
  1736                           
  1737  0071                     ?_strlen:	
  1738                           ; 2 bytes @ 0x1
  1739                           
  1740  0071                     ?_strncmp:	
  1741                           ; 2 bytes @ 0x1
  1742                           
  1743  0071                     ?_FLASH_read:	
  1744                           ; 2 bytes @ 0x1
  1745                           
  1746  0071                     EUSART_Write@txData:	
  1747                           ; 2 bytes @ 0x1
  1748                           
  1749  0071                     FLASH_read@address:	
  1750                           ; 1 bytes @ 0x1
  1751                           
  1752  0071                     FLASH_write@address:	
  1753                           ; 2 bytes @ 0x1
  1754                           
  1755  0071                     FLASH_erase@address:	
  1756                           ; 2 bytes @ 0x1
  1757                           
  1758  0071                     memcpy@d1:	
  1759                           ; 2 bytes @ 0x1
  1760                           
  1761  0071                     strlen@s:	
  1762                           ; 2 bytes @ 0x1
  1763                           
  1764  0071                     strncmp@s1:	
  1765                           ; 2 bytes @ 0x1
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0x1
  1769  0071                     	ds	1
  1770  0072                     ?_Read2BytesSPI:	
  1771  0072                     ??_WriteByteSPI:	
  1772                           ; 0 bytes @ 0x2
  1773                           
  1774  0072                     ??_ReadByteSPI:	
  1775                           ; 0 bytes @ 0x2
  1776                           
  1777  0072                     ??_ClockPulse:	
  1778                           ; 0 bytes @ 0x2
  1779                           
  1780  0072                     ?_USART_Send:	
  1781                           ; 0 bytes @ 0x2
  1782                           
  1783  0072                     ??_DAC1220_Reset:	
  1784                           ; 0 bytes @ 0x2
  1785                           
  1786  0072                     Read2BytesSPI@data2_byte:	
  1787                           ; 0 bytes @ 0x2
  1788                           
  1789  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1790                           ; 1 bytes @ 0x2
  1791                           
  1792  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1793                           ; 1 bytes @ 0x2
  1794                           
  1795  0072                     EUSART_SetErrorHandler@interruptHandler:	
  1796                           ; 1 bytes @ 0x2
  1797                           
  1798  0072                     USART_Send@dataToSend:	
  1799                           ; 1 bytes @ 0x2
  1800                           
  1801                           
  1802                           ; 2 bytes @ 0x2
  1803  0072                     	ds	1
  1804  0073                     ??_Read2BytesSPI:	
  1805  0073                     ??_strlen:	
  1806                           ; 0 bytes @ 0x3
  1807                           
  1808  0073                     ??_EUSART_Initialize:	
  1809                           ; 0 bytes @ 0x3
  1810                           
  1811  0073                     ??_FLASH_read:	
  1812                           ; 0 bytes @ 0x3
  1813                           
  1814  0073                     ??_FLASH_erase:	
  1815                           ; 0 bytes @ 0x3
  1816                           
  1817  0073                     ?_HEFLASH_readBlock:	
  1818                           ; 0 bytes @ 0x3
  1819                           
  1820  0073                     FLASH_erase@temp:	
  1821                           ; 1 bytes @ 0x3
  1822                           
  1823  0073                     HEFLASH_readBlock@radd:	
  1824                           ; 1 bytes @ 0x3
  1825                           
  1826  0073                     ReadByteSPI@bit_counter:	
  1827                           ; 1 bytes @ 0x3
  1828                           
  1829  0073                     WriteByteSPI@data_byte:	
  1830                           ; 1 bytes @ 0x3
  1831                           
  1832  0073                     FLASH_write@data:	
  1833                           ; 1 bytes @ 0x3
  1834                           
  1835  0073                     memcpy@s1:	
  1836                           ; 2 bytes @ 0x3
  1837                           
  1838  0073                     strncmp@s2:	
  1839                           ; 2 bytes @ 0x3
  1840                           
  1841                           
  1842                           ; 2 bytes @ 0x3
  1843  0073                     	ds	1
  1844  0074                     HEFLASH_readBlock@count:	
  1845  0074                     Read2BytesSPI@bit_counter:	
  1846                           ; 1 bytes @ 0x4
  1847                           
  1848  0074                     ReadByteSPI@data_byte:	
  1849                           ; 1 bytes @ 0x4
  1850                           
  1851  0074                     WriteByteSPI@bit_counter:	
  1852                           ; 1 bytes @ 0x4
  1853                           
  1854  0074                     USART_Send@dataLength:	
  1855                           ; 1 bytes @ 0x4
  1856                           
  1857                           
  1858                           ; 1 bytes @ 0x4
  1859  0074                     	ds	1
  1860  0075                     ??_USART_Send:	
  1861  0075                     ??_HEFLASH_readBlock:	
  1862                           ; 0 bytes @ 0x5
  1863                           
  1864  0075                     ?_DAC1220_Write2Bytes:	
  1865                           ; 0 bytes @ 0x5
  1866                           
  1867  0075                     ?_DAC1220_Write3Bytes:	
  1868                           ; 0 bytes @ 0x5
  1869                           
  1870  0075                     ?_DAC1220_Read3Bytes:	
  1871                           ; 0 bytes @ 0x5
  1872                           
  1873  0075                     FLASH_write@latch:	
  1874                           ; 0 bytes @ 0x5
  1875                           
  1876  0075                     DAC1220_Write2Bytes@byte1:	
  1877                           ; 1 bytes @ 0x5
  1878                           
  1879  0075                     DAC1220_Write3Bytes@byte1:	
  1880                           ; 1 bytes @ 0x5
  1881                           
  1882  0075                     DAC1220_Read3Bytes@byte1:	
  1883                           ; 1 bytes @ 0x5
  1884                           
  1885  0075                     Read2BytesSPI@data1_byte:	
  1886                           ; 1 bytes @ 0x5
  1887                           
  1888  0075                     memcpy@n:	
  1889                           ; 1 bytes @ 0x5
  1890                           
  1891  0075                     strlen@cp:	
  1892                           ; 2 bytes @ 0x5
  1893                           
  1894  0075                     strncmp@len:	
  1895                           ; 2 bytes @ 0x5
  1896                           
  1897                           
  1898                           ; 2 bytes @ 0x5
  1899  0075                     	ds	1
  1900  0076                     ??_FLASH_write:	
  1901  0076                     ??_MCP3550_Read:	
  1902                           ; 0 bytes @ 0x6
  1903                           
  1904  0076                     FLASH_write@temp:	
  1905                           ; 0 bytes @ 0x6
  1906                           
  1907  0076                     DAC1220_Write2Bytes@byte2:	
  1908                           ; 1 bytes @ 0x6
  1909                           
  1910  0076                     DAC1220_Write3Bytes@byte2:	
  1911                           ; 1 bytes @ 0x6
  1912                           
  1913  0076                     DAC1220_Read3Bytes@byte2:	
  1914                           ; 1 bytes @ 0x6
  1915                           
  1916  0076                     USART_Send@i:	
  1917                           ; 1 bytes @ 0x6
  1918                           
  1919                           
  1920                           ; 1 bytes @ 0x6
  1921  0076                     	ds	1
  1922  0077                     ??_memcpy:	
  1923  0077                     ??_strncmp:	
  1924                           ; 0 bytes @ 0x7
  1925                           
  1926  0077                     ??_DAC1220_Write2Bytes:	
  1927                           ; 0 bytes @ 0x7
  1928                           
  1929  0077                     ??_command_unknown:	
  1930                           ; 0 bytes @ 0x7
  1931                           
  1932  0077                     ??_send_OK:	
  1933                           ; 0 bytes @ 0x7
  1934                           
  1935  0077                     ??_send_WAIT:	
  1936                           ; 0 bytes @ 0x7
  1937                           
  1938  0077                     ?_HEFLASH_writeBlock:	
  1939                           ; 0 bytes @ 0x7
  1940                           
  1941  0077                     MCP3550_Read@data_ready:	
  1942                           ; 1 bytes @ 0x7
  1943                           
  1944  0077                     DAC1220_Write2Bytes@address:	
  1945                           ; 1 bytes @ 0x7
  1946                           
  1947  0077                     DAC1220_Write3Bytes@byte3:	
  1948                           ; 1 bytes @ 0x7
  1949                           
  1950  0077                     DAC1220_Read3Bytes@byte3:	
  1951                           ; 1 bytes @ 0x7
  1952                           
  1953  0077                     HEFLASH_writeBlock@data:	
  1954                           ; 1 bytes @ 0x7
  1955                           
  1956  0077                     HEFLASH_readBlock@add:	
  1957                           ; 2 bytes @ 0x7
  1958                           
  1959                           
  1960                           ; 2 bytes @ 0x7
  1961  0077                     	ds	1
  1962  0078                     ??_DAC1220_Write3Bytes:	
  1963  0078                     ??_DAC1220_Read3Bytes:	
  1964                           ; 0 bytes @ 0x8
  1965                           
  1966  0078                     ??_DAC1220_SelfCal:	
  1967                           ; 0 bytes @ 0x8
  1968                           
  1969  0078                     MCP3550_Read@adc_data:	
  1970                           ; 0 bytes @ 0x8
  1971                           
  1972  0078                     DAC1220_Write3Bytes@address:	
  1973                           ; 1 bytes @ 0x8
  1974                           
  1975  0078                     command_unknown@reply:	
  1976                           ; 1 bytes @ 0x8
  1977                           
  1978  0078                     send_OK@reply:	
  1979                           ; 2 bytes @ 0x8
  1980                           
  1981  0078                     send_WAIT@reply:	
  1982                           ; 2 bytes @ 0x8
  1983                           
  1984  0078                     memcpy@d:	
  1985                           ; 2 bytes @ 0x8
  1986                           
  1987                           
  1988                           ; 2 bytes @ 0x8
  1989  0078                     	ds	1
  1990  0079                     ??_DAC1220_Init:	
  1991  0079                     HEFLASH_writeBlock@count:	
  1992                           ; 0 bytes @ 0x9
  1993                           
  1994  0079                     HEFLASH_readBlock@buffer:	
  1995                           ; 1 bytes @ 0x9
  1996                           
  1997  0079                     DAC1220_Read3Bytes@address:	
  1998                           ; 1 bytes @ 0x9
  1999                           
  2000                           
  2001                           ; 1 bytes @ 0x9
  2002  0079                     	ds	1
  2003  007A                     ??_HEFLASH_writeBlock:	
  2004  007A                     ??_command_cell_on:	
  2005                           ; 0 bytes @ 0xA
  2006                           
  2007  007A                     ??_command_cell_off:	
  2008                           ; 0 bytes @ 0xA
  2009                           
  2010  007A                     ??_command_mode_potentiostatic:	
  2011                           ; 0 bytes @ 0xA
  2012                           
  2013  007A                     ??_command_mode_galvanostatic:	
  2014                           ; 0 bytes @ 0xA
  2015                           
  2016  007A                     ??_command_range1:	
  2017                           ; 0 bytes @ 0xA
  2018                           
  2019  007A                     ??_command_range2:	
  2020                           ; 0 bytes @ 0xA
  2021                           
  2022  007A                     ??_command_range3:	
  2023                           ; 0 bytes @ 0xA
  2024                           
  2025  007A                     ?_command_set_dac:	
  2026                           ; 0 bytes @ 0xA
  2027                           
  2028  007A                     command_set_dac@dac_data:	
  2029                           ; 0 bytes @ 0xA
  2030                           
  2031  007A                     memcpy@s:	
  2032                           ; 2 bytes @ 0xA
  2033                           
  2034                           
  2035                           ; 2 bytes @ 0xA
  2036  007A                     	ds	2
  2037  007C                     ??_interpret_command:	
  2038                           
  2039                           	psect	cstackBANK0
  2040  005C                     __pcstackBANK0:	
  2041                           ; 0 bytes @ 0xC
  2042                           
  2043  005C                     ??_InitializeIO:	
  2044  005C                     ??_command_set_dac:	
  2045                           ; 0 bytes @ 0x0
  2046                           
  2047  005C                     ??_command_read_adc:	
  2048                           ; 0 bytes @ 0x0
  2049                           
  2050  005C                     ??_command_read_offset:	
  2051                           ; 0 bytes @ 0x0
  2052                           
  2053  005C                     ??_command_read_shuntcalibration:	
  2054                           ; 0 bytes @ 0x0
  2055                           
  2056  005C                     ??_command_read_dac_cal:	
  2057                           ; 0 bytes @ 0x0
  2058                           
  2059  005C                     HEFLASH_writeBlock@radd:	
  2060                           ; 0 bytes @ 0x0
  2061                           
  2062                           
  2063                           ; 1 bytes @ 0x0
  2064  005C                     	ds	1
  2065  005D                     HEFLASH_writeBlock@add:	
  2066                           
  2067                           ; 2 bytes @ 0x1
  2068  005D                     	ds	1
  2069  005E                     command_read_adc@adc_data:	
  2070                           
  2071                           ; 6 bytes @ 0x2
  2072  005E                     	ds	1
  2073  005F                     ??_command_calibrate_dac:	
  2074  005F                     ?_command_save_offset:	
  2075                           ; 0 bytes @ 0x3
  2076                           
  2077  005F                     ?_command_save_shuntcalibration:	
  2078                           ; 0 bytes @ 0x3
  2079                           
  2080  005F                     ?_command_set_dac_cal:	
  2081                           ; 0 bytes @ 0x3
  2082                           
  2083  005F                     command_save_offset@offset_data:	
  2084                           ; 0 bytes @ 0x3
  2085                           
  2086  005F                     command_save_shuntcalibration@shuntcalibration_data:	
  2087                           ; 2 bytes @ 0x3
  2088                           
  2089  005F                     command_set_dac_cal@dac_cal_data:	
  2090                           ; 2 bytes @ 0x3
  2091                           
  2092                           
  2093                           ; 2 bytes @ 0x3
  2094  005F                     	ds	2
  2095  0061                     ??_command_save_offset:	
  2096  0061                     ??_command_save_shuntcalibration:	
  2097                           ; 0 bytes @ 0x5
  2098                           
  2099  0061                     ??_command_set_dac_cal:	
  2100                           ; 0 bytes @ 0x5
  2101                           
  2102                           
  2103                           ; 0 bytes @ 0x5
  2104  0061                     	ds	1
  2105  0062                     command_calibrate_dac@data:	
  2106                           
  2107                           ; 6 bytes @ 0x6
  2108  0062                     	ds	8
  2109  006A                     ??_main:	
  2110                           
  2111                           ; 0 bytes @ 0xE
  2112  006A                     	ds	1
  2113  006B                     main@c:	
  2114                           
  2115                           ; 1 bytes @ 0xF
  2116  006B                     	ds	1
  2117  006C                     main@i:	
  2118                           
  2119                           ; 1 bytes @ 0x10
  2120  006C                     	ds	1
  2121                           
  2122                           	psect	maintext
  2123  071D                     __pmaintext:	
  2124 ;;
  2125 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2126 ;;
  2127 ;; *************** function _main *****************
  2128 ;; Defined at:
  2129 ;;		line 288 in file "main.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  i               1   16[BANK0 ] unsigned char 
  2134 ;;  c               1   15[BANK0 ] unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  2  678[COMMON] int 
  2137 ;; Registers used:
  2138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 17F/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2147 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2148 ;;Total ram usage:        3 bytes
  2149 ;; Hardware stack levels required when called:    8
  2150 ;; This function calls:
  2151 ;;		_InitializeIO
  2152 ;;		_interpret_command
  2153 ;;		_EUSART_Initialize
  2154 ;;		_EUSART_is_rx_ready
  2155 ;;		_EUSART_Read
  2156 ;; This function is called by:
  2157 ;;		Startup code after reset
  2158 ;; This function uses a non-reentrant model
  2159 ;;
  2160                           
  2161                           
  2162                           ;psect for function _main
  2163  071D                     _main:	
  2164                           
  2165                           ;main.c: 289: InitializeIO();
  2166                           
  2167                           ;incstack = 0
  2168                           ; Regs used in _main: [allreg]
  2169  071D  3184  2470  3187   	fcall	_InitializeIO
  2170                           
  2171                           ;main.c: 290: EUSART_Initialize();
  2172  0720  318F  2754  3187   	fcall	_EUSART_Initialize
  2173                           
  2174                           ;main.c: 293: ACTCONbits.ACTSRC = 1;
  2175  0723  0027               	movlb	7	; select bank7
  2176  0724  161B               	bsf	27,4	;volatile
  2177                           
  2178                           ;main.c: 294: ACTCONbits.ACTEN = 1;
  2179  0725  179B               	bsf	27,7	;volatile
  2180                           
  2181                           ;main.c: 297: INTCONbits.PEIE = 1;
  2182  0726  170B               	bsf	11,6	;volatile
  2183                           
  2184                           ;main.c: 298: INTCONbits.GIE = 1;
  2185  0727  178B               	bsf	11,7	;volatile
  2186  0728                     l4766:	
  2187                           ;main.c: 303: while (1)
  2188                           
  2189                           
  2190                           ;main.c: 304: {
  2191                           ;main.c: 319: if(EUSART_is_rx_ready()){
  2192  0728  318E  261B  3187   	fcall	_EUSART_is_rx_ready
  2193  072B  3A00               	xorlw	0
  2194  072C  1903               	skipnz
  2195  072D  2F28               	goto	l4766
  2196                           
  2197                           ;main.c: 320: uint8_t i=0;
  2198  072E  0020               	movlb	0	; select bank0
  2199  072F  01EC               	clrf	main@i
  2200  0730                     l4774:	
  2201                           ;main.c: 321: uint8_t c;
  2202                           ;main.c: 322: while((c=EUSART_Read())!='\n'){
  2203                           
  2204  0730  318E  2656  3187   	fcall	_EUSART_Read
  2205  0733  0020               	movlb	0	; select bank0
  2206  0734  00EA               	movwf	??_main
  2207  0735  086A               	movf	??_main,w
  2208  0736  00EB               	movwf	main@c
  2209  0737  086B               	movf	main@c,w
  2210  0738  3A0A               	xorlw	10
  2211  0739  1903               	btfsc	3,2
  2212  073A  2F48               	goto	l4776
  2213                           
  2214                           ;main.c: 323: uart_command[i]=c;
  2215  073B  086B               	movf	main@c,w
  2216  073C  00EA               	movwf	??_main
  2217  073D  086C               	movf	main@i,w
  2218  073E  3EA0               	addlw	_uart_command& (0+255)
  2219  073F  0086               	movwf	6
  2220  0740  0187               	clrf	7
  2221  0741  086A               	movf	??_main,w
  2222  0742  0081               	movwf	1
  2223                           
  2224                           ;main.c: 324: i++;
  2225  0743  3001               	movlw	1
  2226  0744  00EA               	movwf	??_main
  2227  0745  086A               	movf	??_main,w
  2228  0746  07EC               	addwf	main@i,f
  2229  0747  2F30               	goto	l4774
  2230  0748                     l4776:	
  2231                           
  2232                           ;main.c: 325: }
  2233                           ;main.c: 326: received_data_length=i;
  2234  0748  086C               	movf	main@i,w
  2235  0749  00EA               	movwf	??_main
  2236  074A  086A               	movf	??_main,w
  2237  074B  00FC               	movwf	_received_data_length
  2238                           
  2239                           ;main.c: 327: interpret_command();
  2240  074C  3181  2103  3187   	fcall	_interpret_command
  2241  074F  2F28               	goto	l4766
  2242  0750                     __end_of_main:	
  2243                           ;main.c: 328: }
  2244                           ;main.c: 330: }
  2245                           ;main.c: 332: return 0;
  2246                           ;	Return value of _main is never used
  2247                           
  2248                           
  2249                           	psect	text1
  2250  0E56                     __ptext1:	
  2251 ;; *************** function _EUSART_Read *****************
  2252 ;; Defined at:
  2253 ;;		line 114 in file "eusart.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      unsigned char 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           
  2282                           ;psect for function _EUSART_Read
  2283  0E56                     _EUSART_Read:	
  2284  0E56                     l775:	
  2285                           ;eusart.c: 116: {
  2286                           
  2287                           ;eusart.c: 115: while(!PIR1bits.RCIF)
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _EUSART_Read: [wreg+status,2]
  2291                           
  2292  0E56  0020               	movlb	0	; select bank0
  2293  0E57  1E91               	btfss	17,5	;volatile
  2294  0E58  2E56               	goto	l775
  2295                           
  2296                           ;eusart.c: 117: }
  2297                           ;eusart.c: 119: eusartRxLastError.status = 0;
  2298  0E59  01C0               	clrf	_eusartRxLastError	;volatile
  2299                           
  2300                           ;eusart.c: 121: if(1 == RCSTAbits.OERR)
  2301  0E5A  0023               	movlb	3	; select bank3
  2302  0E5B  1C9D               	btfss	29,1	;volatile
  2303  0E5C  2E5F               	goto	l4610
  2304                           
  2305                           ;eusart.c: 122: {
  2306                           ;eusart.c: 125: RCSTAbits.CREN = 0;
  2307  0E5D  121D               	bcf	29,4	;volatile
  2308                           
  2309                           ;eusart.c: 126: RCSTAbits.CREN = 1;
  2310  0E5E  161D               	bsf	29,4	;volatile
  2311  0E5F                     l4610:	
  2312                           
  2313                           ;eusart.c: 127: }
  2314                           ;eusart.c: 129: return RCREG;
  2315  0E5F  0819               	movf	25,w	;volatile
  2316  0E60  0008               	return
  2317  0E61                     __end_of_EUSART_Read:	
  2318                           
  2319                           	psect	text2
  2320  0E1B                     __ptext2:	
  2321 ;; *************** function _EUSART_is_rx_ready *****************
  2322 ;; Defined at:
  2323 ;;		line 100 in file "eusart.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;		None
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      unsigned char 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2341 ;;Total ram usage:        0 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    1
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_main
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _EUSART_is_rx_ready
  2353  0E1B                     _EUSART_is_rx_ready:	
  2354                           
  2355                           ;eusart.c: 101: return (bool)(PIR1bits.RCIF);
  2356                           
  2357                           ;incstack = 0
  2358                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  2359  0E1B  0020               	movlb	0	; select bank0
  2360  0E1C  0E11               	swapf	17,w	;volatile
  2361  0E1D  0C89               	rrf	9,f
  2362  0E1E  3901               	andlw	1
  2363  0E1F  0008               	return
  2364  0E20                     __end_of_EUSART_is_rx_ready:	
  2365                           
  2366                           	psect	text3
  2367  0F54                     __ptext3:	
  2368 ;; *************** function _EUSART_Initialize *****************
  2369 ;; Defined at:
  2370 ;;		line 67 in file "eusart.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;		None
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;		None
  2375 ;; Return value:  Size  Location     Type
  2376 ;;		None               void
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0, pclath, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2388 ;;Total ram usage:        0 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    2
  2391 ;; This function calls:
  2392 ;;		_EUSART_SetFramingErrorHandler
  2393 ;;		_EUSART_SetOverrunErrorHandler
  2394 ;;		_EUSART_SetErrorHandler
  2395 ;; This function is called by:
  2396 ;;		_main
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           
  2401                           ;psect for function _EUSART_Initialize
  2402  0F54                     _EUSART_Initialize:	
  2403                           
  2404                           ;eusart.c: 71: BAUDCON = 0x08;
  2405                           
  2406                           ;incstack = 0
  2407                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2408  0F54  3008               	movlw	8
  2409  0F55  0023               	movlb	3	; select bank3
  2410  0F56  009F               	movwf	31	;volatile
  2411                           
  2412                           ;eusart.c: 74: RCSTA = 0x90;
  2413  0F57  3090               	movlw	144
  2414  0F58  009D               	movwf	29	;volatile
  2415                           
  2416                           ;eusart.c: 77: TXSTA = 0x24;
  2417  0F59  3024               	movlw	36
  2418  0F5A  009E               	movwf	30	;volatile
  2419                           
  2420                           ;eusart.c: 80: SPBRGL = 0x70;
  2421  0F5B  3070               	movlw	112
  2422  0F5C  009B               	movwf	27	;volatile
  2423                           
  2424                           ;eusart.c: 83: SPBRGH = 0x02;
  2425  0F5D  3002               	movlw	2
  2426  0F5E  009C               	movwf	28	;volatile
  2427                           
  2428                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  2429  0F5F  30FE               	movlw	(0-fpbase)& (0+255)
  2430  0F60  318E  2626  318F   	fcall	_EUSART_SetFramingErrorHandler
  2431                           
  2432                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  2433  0F63  30FE               	movlw	(0-fpbase)& (0+255)
  2434  0F64  318E  262D  318F   	fcall	_EUSART_SetOverrunErrorHandler
  2435                           
  2436                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  2437  0F67  30FE               	movlw	(0-fpbase)& (0+255)
  2438  0F68  318E  2634         	fcall	_EUSART_SetErrorHandler
  2439                           
  2440                           ;eusart.c: 90: eusartRxLastError.status = 0;
  2441  0F6A  0020               	movlb	0	; select bank0
  2442  0F6B  01C0               	clrf	_eusartRxLastError	;volatile
  2443  0F6C  0008               	return
  2444  0F6D                     __end_of_EUSART_Initialize:	
  2445                           
  2446                           	psect	text4
  2447  0E34                     __ptext4:	
  2448 ;; *************** function _EUSART_SetErrorHandler *****************
  2449 ;; Defined at:
  2450 ;;		line 180 in file "eusart.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  interruptHan    1    wreg     PTR FTN()void 
  2453 ;;		 -> EUSART_DefaultErrorHandler(0), 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  2456 ;;		 -> EUSART_DefaultErrorHandler(0), 
  2457 ;; Return value:  Size  Location     Type
  2458 ;;		None               void
  2459 ;; Registers used:
  2460 ;;		wreg
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2470 ;;Total ram usage:        2 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_EUSART_Initialize
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _EUSART_SetErrorHandler
  2482  0E34                     _EUSART_SetErrorHandler:	
  2483                           
  2484                           ;incstack = 0
  2485                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  2486                           ;EUSART_SetErrorHandler@interruptHandler stored from wreg
  2487  0E34  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  2488                           
  2489                           ;eusart.c: 181: EUSART_ErrorHandler = interruptHandler;
  2490  0E35  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  2491  0E36  00F1               	movwf	??_EUSART_SetErrorHandler
  2492  0E37  0871               	movf	??_EUSART_SetErrorHandler,w
  2493  0E38  0020               	movlb	0	; select bank0
  2494  0E39  00B6               	movwf	_EUSART_ErrorHandler
  2495  0E3A  0008               	return
  2496  0E3B                     __end_of_EUSART_SetErrorHandler:	
  2497                           
  2498                           	psect	text5
  2499  0E2D                     __ptext5:	
  2500 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2501 ;; Defined at:
  2502 ;;		line 176 in file "eusart.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  interruptHan    1    wreg     PTR FTN()void 
  2505 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  2508 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;		None               void
  2511 ;; Registers used:
  2512 ;;		wreg
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2522 ;;Total ram usage:        2 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    1
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_EUSART_Initialize
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           
  2533                           ;psect for function _EUSART_SetOverrunErrorHandler
  2534  0E2D                     _EUSART_SetOverrunErrorHandler:	
  2535                           
  2536                           ;incstack = 0
  2537                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  2538                           ;EUSART_SetOverrunErrorHandler@interruptHandler stored from wreg
  2539  0E2D  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2540                           
  2541                           ;eusart.c: 177: EUSART_OverrunErrorHandler = interruptHandler;
  2542  0E2E  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  2543  0E2F  00F1               	movwf	??_EUSART_SetOverrunErrorHandler
  2544  0E30  0871               	movf	??_EUSART_SetOverrunErrorHandler,w
  2545  0E31  0020               	movlb	0	; select bank0
  2546  0E32  00B8               	movwf	_EUSART_OverrunErrorHandler
  2547  0E33  0008               	return
  2548  0E34                     __end_of_EUSART_SetOverrunErrorHandler:	
  2549                           
  2550                           	psect	text6
  2551  0E26                     __ptext6:	
  2552 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  2553 ;; Defined at:
  2554 ;;		line 172 in file "eusart.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  interruptHan    1    wreg     PTR FTN()void 
  2557 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  2560 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;		None               void
  2563 ;; Registers used:
  2564 ;;		wreg
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2572 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2573 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2574 ;;Total ram usage:        2 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_EUSART_Initialize
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _EUSART_SetFramingErrorHandler
  2586  0E26                     _EUSART_SetFramingErrorHandler:	
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  2590                           ;EUSART_SetFramingErrorHandler@interruptHandler stored from wreg
  2591  0E26  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2592                           
  2593                           ;eusart.c: 173: EUSART_FramingErrorHandler = interruptHandler;
  2594  0E27  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  2595  0E28  00F1               	movwf	??_EUSART_SetFramingErrorHandler
  2596  0E29  0871               	movf	??_EUSART_SetFramingErrorHandler,w
  2597  0E2A  0020               	movlb	0	; select bank0
  2598  0E2B  00B7               	movwf	_EUSART_FramingErrorHandler
  2599  0E2C  0008               	return
  2600  0E2D                     __end_of_EUSART_SetFramingErrorHandler:	
  2601                           
  2602                           	psect	text7
  2603  0103                     __ptext7:	
  2604 ;; *************** function _interpret_command *****************
  2605 ;; Defined at:
  2606 ;;		line 249 in file "main.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;		None
  2609 ;; Auto vars:     Size  Location     Type
  2610 ;;		None
  2611 ;; Return value:  Size  Location     Type
  2612 ;;		None               void
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2624 ;;Total ram usage:        0 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; Hardware stack levels required when called:    7
  2627 ;; This function calls:
  2628 ;;		_command_unknown
  2629 ;;		_command_cell_on
  2630 ;;		_command_cell_off
  2631 ;;		_command_mode_potentiostatic
  2632 ;;		_command_mode_galvanostatic
  2633 ;;		_command_range1
  2634 ;;		_command_range2
  2635 ;;		_command_range3
  2636 ;;		_command_set_dac
  2637 ;;		_command_calibrate_dac
  2638 ;;		_command_read_adc
  2639 ;;		_command_read_offset
  2640 ;;		_command_save_offset
  2641 ;;		_command_read_shuntcalibration
  2642 ;;		_command_save_shuntcalibration
  2643 ;;		_command_read_dac_cal
  2644 ;;		_command_set_dac_cal
  2645 ;;		_strncmp
  2646 ;; This function is called by:
  2647 ;;		_main
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           
  2652                           ;psect for function _interpret_command
  2653  0103                     _interpret_command:	
  2654                           
  2655                           ;main.c: 250: if (received_data_length == 7 && strncmp(uart_command,"CELL ON",7) == 0)
  2656                           
  2657                           ;incstack = 0
  2658                           ; Regs used in _interpret_command: [allreg]
  2659  0103  087C               	movf	_received_data_length,w
  2660  0104  3A07               	xorlw	7
  2661  0105  1D03               	skipz
  2662  0106  291D               	goto	l4662
  2663  0107  30A0               	movlw	low _uart_command
  2664  0108  00F1               	movwf	?_strncmp
  2665  0109  3000               	movlw	high _uart_command
  2666  010A  00F2               	movwf	?_strncmp+1
  2667  010B  3054               	movlw	low (STR_4| (0+32768))
  2668  010C  00F3               	movwf	?_strncmp+2
  2669  010D  3084               	movlw	high (STR_4| (0+32768))
  2670  010E  00F4               	movwf	?_strncmp+3
  2671  010F  3007               	movlw	7
  2672  0110  00F5               	movwf	?_strncmp+4
  2673  0111  3000               	movlw	0
  2674  0112  00F6               	movwf	?_strncmp+5
  2675  0113  3185  25B4  3181   	fcall	_strncmp
  2676  0116  0872               	movf	?_strncmp+1,w
  2677  0117  0471               	iorwf	?_strncmp,w
  2678  0118  1D03               	skipz
  2679  0119  291D               	goto	l4662
  2680                           
  2681                           ;main.c: 251: command_cell_on();
  2682  011A  318E  2607         	fcall	_command_cell_on
  2683  011C  0008               	return
  2684  011D                     l4662:	
  2685                           
  2686                           ;main.c: 252: else if (received_data_length == 8 && strncmp(uart_command,"CELL OFF",8) =
      +                          = 0)
  2687  011D  087C               	movf	_received_data_length,w
  2688  011E  3A08               	xorlw	8
  2689  011F  1D03               	skipz
  2690  0120  2937               	goto	l4668
  2691  0121  30A0               	movlw	low _uart_command
  2692  0122  00F1               	movwf	?_strncmp
  2693  0123  3000               	movlw	high _uart_command
  2694  0124  00F2               	movwf	?_strncmp+1
  2695  0125  3023               	movlw	low (STR_5| (0+32768))
  2696  0126  00F3               	movwf	?_strncmp+2
  2697  0127  3084               	movlw	high (STR_5| (0+32768))
  2698  0128  00F4               	movwf	?_strncmp+3
  2699  0129  3008               	movlw	8
  2700  012A  00F5               	movwf	?_strncmp+4
  2701  012B  3000               	movlw	0
  2702  012C  00F6               	movwf	?_strncmp+5
  2703  012D  3185  25B4  3181   	fcall	_strncmp
  2704  0130  0872               	movf	?_strncmp+1,w
  2705  0131  0471               	iorwf	?_strncmp,w
  2706  0132  1D03               	skipz
  2707  0133  2937               	goto	l4668
  2708                           
  2709                           ;main.c: 253: command_cell_off();
  2710  0134  318E  260C         	fcall	_command_cell_off
  2711  0136  0008               	return
  2712  0137                     l4668:	
  2713                           
  2714                           ;main.c: 254: else if (received_data_length == 14 && strncmp(uart_command,"POTENTIOSTATI
      +                          C",14) == 0)
  2715  0137  087C               	movf	_received_data_length,w
  2716  0138  3A0E               	xorlw	14
  2717  0139  1D03               	skipz
  2718  013A  2951               	goto	l4674
  2719  013B  30A0               	movlw	low _uart_command
  2720  013C  00F1               	movwf	?_strncmp
  2721  013D  3000               	movlw	high _uart_command
  2722  013E  00F2               	movwf	?_strncmp+1
  2723  013F  30BF               	movlw	low (STR_6| (0+32768))
  2724  0140  00F3               	movwf	?_strncmp+2
  2725  0141  3083               	movlw	high (STR_6| (0+32768))
  2726  0142  00F4               	movwf	?_strncmp+3
  2727  0143  300E               	movlw	14
  2728  0144  00F5               	movwf	?_strncmp+4
  2729  0145  3000               	movlw	0
  2730  0146  00F6               	movwf	?_strncmp+5
  2731  0147  3185  25B4  3181   	fcall	_strncmp
  2732  014A  0872               	movf	?_strncmp+1,w
  2733  014B  0471               	iorwf	?_strncmp,w
  2734  014C  1D03               	skipz
  2735  014D  2951               	goto	l4674
  2736                           
  2737                           ;main.c: 255: command_mode_potentiostatic();
  2738  014E  318E  2611         	fcall	_command_mode_potentiostatic
  2739  0150  0008               	return
  2740  0151                     l4674:	
  2741                           
  2742                           ;main.c: 256: else if (received_data_length == 13 && strncmp(uart_command,"GALVANOSTATIC
      +                          ",13) == 0)
  2743  0151  087C               	movf	_received_data_length,w
  2744  0152  3A0D               	xorlw	13
  2745  0153  1D03               	skipz
  2746  0154  296B               	goto	l4680
  2747  0155  30A0               	movlw	low _uart_command
  2748  0156  00F1               	movwf	?_strncmp
  2749  0157  3000               	movlw	high _uart_command
  2750  0158  00F2               	movwf	?_strncmp+1
  2751  0159  30DC               	movlw	low (STR_7| (0+32768))
  2752  015A  00F3               	movwf	?_strncmp+2
  2753  015B  3083               	movlw	high (STR_7| (0+32768))
  2754  015C  00F4               	movwf	?_strncmp+3
  2755  015D  300D               	movlw	13
  2756  015E  00F5               	movwf	?_strncmp+4
  2757  015F  3000               	movlw	0
  2758  0160  00F6               	movwf	?_strncmp+5
  2759  0161  3185  25B4  3181   	fcall	_strncmp
  2760  0164  0872               	movf	?_strncmp+1,w
  2761  0165  0471               	iorwf	?_strncmp,w
  2762  0166  1D03               	skipz
  2763  0167  296B               	goto	l4680
  2764                           
  2765                           ;main.c: 257: command_mode_galvanostatic();
  2766  0168  318E  2616         	fcall	_command_mode_galvanostatic
  2767  016A  0008               	return
  2768  016B                     l4680:	
  2769                           
  2770                           ;main.c: 258: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 1",7) ==
      +                           0)
  2771  016B  087C               	movf	_received_data_length,w
  2772  016C  3A07               	xorlw	7
  2773  016D  1D03               	skipz
  2774  016E  2985               	goto	l4686
  2775  016F  30A0               	movlw	low _uart_command
  2776  0170  00F1               	movwf	?_strncmp
  2777  0171  3000               	movlw	high _uart_command
  2778  0172  00F2               	movwf	?_strncmp+1
  2779  0173  3034               	movlw	low (STR_8| (0+32768))
  2780  0174  00F3               	movwf	?_strncmp+2
  2781  0175  3084               	movlw	high (STR_8| (0+32768))
  2782  0176  00F4               	movwf	?_strncmp+3
  2783  0177  3007               	movlw	7
  2784  0178  00F5               	movwf	?_strncmp+4
  2785  0179  3000               	movlw	0
  2786  017A  00F6               	movwf	?_strncmp+5
  2787  017B  3185  25B4  3181   	fcall	_strncmp
  2788  017E  0872               	movf	?_strncmp+1,w
  2789  017F  0471               	iorwf	?_strncmp,w
  2790  0180  1D03               	skipz
  2791  0181  2985               	goto	l4686
  2792                           
  2793                           ;main.c: 259: command_range1();
  2794  0182  318E  2692         	fcall	_command_range1
  2795  0184  0008               	return
  2796  0185                     l4686:	
  2797                           
  2798                           ;main.c: 260: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 2",7) ==
      +                           0)
  2799  0185  087C               	movf	_received_data_length,w
  2800  0186  3A07               	xorlw	7
  2801  0187  1D03               	skipz
  2802  0188  299F               	goto	l4692
  2803  0189  30A0               	movlw	low _uart_command
  2804  018A  00F1               	movwf	?_strncmp
  2805  018B  3000               	movlw	high _uart_command
  2806  018C  00F2               	movwf	?_strncmp+1
  2807  018D  303C               	movlw	low (STR_9| (0+32768))
  2808  018E  00F3               	movwf	?_strncmp+2
  2809  018F  3084               	movlw	high (STR_9| (0+32768))
  2810  0190  00F4               	movwf	?_strncmp+3
  2811  0191  3007               	movlw	7
  2812  0192  00F5               	movwf	?_strncmp+4
  2813  0193  3000               	movlw	0
  2814  0194  00F6               	movwf	?_strncmp+5
  2815  0195  3185  25B4  3181   	fcall	_strncmp
  2816  0198  0872               	movf	?_strncmp+1,w
  2817  0199  0471               	iorwf	?_strncmp,w
  2818  019A  1D03               	skipz
  2819  019B  299F               	goto	l4692
  2820                           
  2821                           ;main.c: 261: command_range2();
  2822  019C  318E  26A2         	fcall	_command_range2
  2823  019E  0008               	return
  2824  019F                     l4692:	
  2825                           
  2826                           ;main.c: 262: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 3",7) ==
      +                           0)
  2827  019F  087C               	movf	_received_data_length,w
  2828  01A0  3A07               	xorlw	7
  2829  01A1  1D03               	skipz
  2830  01A2  29B9               	goto	l4698
  2831  01A3  30A0               	movlw	low _uart_command
  2832  01A4  00F1               	movwf	?_strncmp
  2833  01A5  3000               	movlw	high _uart_command
  2834  01A6  00F2               	movwf	?_strncmp+1
  2835  01A7  3044               	movlw	low (STR_10| (0+32768))
  2836  01A8  00F3               	movwf	?_strncmp+2
  2837  01A9  3084               	movlw	high (STR_10| (0+32768))
  2838  01AA  00F4               	movwf	?_strncmp+3
  2839  01AB  3007               	movlw	7
  2840  01AC  00F5               	movwf	?_strncmp+4
  2841  01AD  3000               	movlw	0
  2842  01AE  00F6               	movwf	?_strncmp+5
  2843  01AF  3185  25B4  3181   	fcall	_strncmp
  2844  01B2  0872               	movf	?_strncmp+1,w
  2845  01B3  0471               	iorwf	?_strncmp,w
  2846  01B4  1D03               	skipz
  2847  01B5  29B9               	goto	l4698
  2848                           
  2849                           ;main.c: 263: command_range3();
  2850  01B6  318E  26B2         	fcall	_command_range3
  2851  01B8  0008               	return
  2852  01B9                     l4698:	
  2853                           
  2854                           ;main.c: 264: else if (received_data_length == 10 && strncmp(received_data,"DACSET ",7) 
      +                          == 0)
  2855  01B9  087C               	movf	_received_data_length,w
  2856  01BA  3A0A               	xorlw	10
  2857  01BB  1D03               	skipz
  2858  01BC  29DD               	goto	l4704
  2859  01BD  0020               	movlb	0	; select bank0
  2860  01BE  0835               	movf	_received_data+1,w
  2861  01BF  01F2               	clrf	?_strncmp+1
  2862  01C0  07F2               	addwf	?_strncmp+1,f
  2863  01C1  0834               	movf	_received_data,w
  2864  01C2  01F1               	clrf	?_strncmp
  2865  01C3  07F1               	addwf	?_strncmp,f
  2866  01C4  302C               	movlw	low (STR_11| (0+32768))
  2867  01C5  00F3               	movwf	?_strncmp+2
  2868  01C6  3084               	movlw	high (STR_11| (0+32768))
  2869  01C7  00F4               	movwf	?_strncmp+3
  2870  01C8  3007               	movlw	7
  2871  01C9  00F5               	movwf	?_strncmp+4
  2872  01CA  3000               	movlw	0
  2873  01CB  00F6               	movwf	?_strncmp+5
  2874  01CC  3185  25B4  3181   	fcall	_strncmp
  2875  01CF  0872               	movf	?_strncmp+1,w
  2876  01D0  0471               	iorwf	?_strncmp,w
  2877  01D1  1D03               	skipz
  2878  01D2  29DD               	goto	l4704
  2879                           
  2880                           ;main.c: 265: command_set_dac(received_data+7);
  2881  01D3  0020               	movlb	0	; select bank0
  2882  01D4  0834               	movf	_received_data,w
  2883  01D5  3E07               	addlw	7
  2884  01D6  00FA               	movwf	?_command_set_dac
  2885  01D7  3000               	movlw	0
  2886  01D8  3D35               	addwfc	_received_data+1,w
  2887  01D9  00FB               	movwf	?_command_set_dac+1
  2888  01DA  3187  2782         	fcall	_command_set_dac
  2889  01DC  0008               	return
  2890  01DD                     l4704:	
  2891                           
  2892                           ;main.c: 266: else if (received_data_length == 6 && strncmp(received_data,"DACCAL",6) ==
      +                           0)
  2893  01DD  087C               	movf	_received_data_length,w
  2894  01DE  3A06               	xorlw	6
  2895  01DF  1D03               	skipz
  2896  01E0  29FA               	goto	l4710
  2897  01E1  0020               	movlb	0	; select bank0
  2898  01E2  0835               	movf	_received_data+1,w
  2899  01E3  01F2               	clrf	?_strncmp+1
  2900  01E4  07F2               	addwf	?_strncmp+1,f
  2901  01E5  0834               	movf	_received_data,w
  2902  01E6  01F1               	clrf	?_strncmp
  2903  01E7  07F1               	addwf	?_strncmp,f
  2904  01E8  305C               	movlw	low (STR_12| (0+32768))
  2905  01E9  00F3               	movwf	?_strncmp+2
  2906  01EA  3084               	movlw	high (STR_12| (0+32768))
  2907  01EB  00F4               	movwf	?_strncmp+3
  2908  01EC  3006               	movlw	6
  2909  01ED  00F5               	movwf	?_strncmp+4
  2910  01EE  3000               	movlw	0
  2911  01EF  00F6               	movwf	?_strncmp+5
  2912  01F0  3185  25B4  3181   	fcall	_strncmp
  2913  01F3  0872               	movf	?_strncmp+1,w
  2914  01F4  0471               	iorwf	?_strncmp,w
  2915  01F5  1D03               	skipz
  2916  01F6  29FA               	goto	l4710
  2917                           
  2918                           ;main.c: 267: command_calibrate_dac();
  2919  01F7  3185  25FA         	fcall	_command_calibrate_dac
  2920  01F9  0008               	return
  2921  01FA                     l4710:	
  2922                           
  2923                           ;main.c: 268: else if (received_data_length == 7 && strncmp(received_data,"ADCREAD",7) =
      +                          = 0)
  2924  01FA  087C               	movf	_received_data_length,w
  2925  01FB  3A07               	xorlw	7
  2926  01FC  1D03               	skipz
  2927  01FD  2A17               	goto	l4716
  2928  01FE  0020               	movlb	0	; select bank0
  2929  01FF  0835               	movf	_received_data+1,w
  2930  0200  01F2               	clrf	?_strncmp+1
  2931  0201  07F2               	addwf	?_strncmp+1,f
  2932  0202  0834               	movf	_received_data,w
  2933  0203  01F1               	clrf	?_strncmp
  2934  0204  07F1               	addwf	?_strncmp,f
  2935  0205  304C               	movlw	low (STR_13| (0+32768))
  2936  0206  00F3               	movwf	?_strncmp+2
  2937  0207  3084               	movlw	high (STR_13| (0+32768))
  2938  0208  00F4               	movwf	?_strncmp+3
  2939  0209  3007               	movlw	7
  2940  020A  00F5               	movwf	?_strncmp+4
  2941  020B  3000               	movlw	0
  2942  020C  00F6               	movwf	?_strncmp+5
  2943  020D  3185  25B4  3181   	fcall	_strncmp
  2944  0210  0872               	movf	?_strncmp+1,w
  2945  0211  0471               	iorwf	?_strncmp,w
  2946  0212  1D03               	skipz
  2947  0213  2A17               	goto	l4716
  2948                           
  2949                           ;main.c: 269: command_read_adc();
  2950  0214  3180  2087         	fcall	_command_read_adc
  2951  0216  0008               	return
  2952  0217                     l4716:	
  2953                           
  2954                           ;main.c: 270: else if (received_data_length == 10 && strncmp(received_data,"OFFSETREAD",
      +                          10) == 0)
  2955  0217  087C               	movf	_received_data_length,w
  2956  0218  3A0A               	xorlw	10
  2957  0219  1D03               	skipz
  2958  021A  2A34               	goto	l4722
  2959  021B  0020               	movlb	0	; select bank0
  2960  021C  0835               	movf	_received_data+1,w
  2961  021D  01F2               	clrf	?_strncmp+1
  2962  021E  07F2               	addwf	?_strncmp+1,f
  2963  021F  0834               	movf	_received_data,w
  2964  0220  01F1               	clrf	?_strncmp
  2965  0221  07F1               	addwf	?_strncmp,f
  2966  0222  300E               	movlw	low (STR_14| (0+32768))
  2967  0223  00F3               	movwf	?_strncmp+2
  2968  0224  3084               	movlw	high (STR_14| (0+32768))
  2969  0225  00F4               	movwf	?_strncmp+3
  2970  0226  300A               	movlw	10
  2971  0227  00F5               	movwf	?_strncmp+4
  2972  0228  3000               	movlw	0
  2973  0229  00F6               	movwf	?_strncmp+5
  2974  022A  3185  25B4  3181   	fcall	_strncmp
  2975  022D  0872               	movf	?_strncmp+1,w
  2976  022E  0471               	iorwf	?_strncmp,w
  2977  022F  1D03               	skipz
  2978  0230  2A34               	goto	l4722
  2979                           
  2980                           ;main.c: 271: command_read_offset();
  2981  0231  3187  27DD         	fcall	_command_read_offset
  2982  0233  0008               	return
  2983  0234                     l4722:	
  2984                           
  2985                           ;main.c: 272: else if (received_data_length == 17 && strncmp(received_data,"OFFSETSAVE "
      +                          ,11) == 0)
  2986  0234  087C               	movf	_received_data_length,w
  2987  0235  3A11               	xorlw	17
  2988  0236  1D03               	skipz
  2989  0237  2A58               	goto	l4728
  2990  0238  0020               	movlb	0	; select bank0
  2991  0239  0835               	movf	_received_data+1,w
  2992  023A  01F2               	clrf	?_strncmp+1
  2993  023B  07F2               	addwf	?_strncmp+1,f
  2994  023C  0834               	movf	_received_data,w
  2995  023D  01F1               	clrf	?_strncmp
  2996  023E  07F1               	addwf	?_strncmp,f
  2997  023F  30F7               	movlw	low (STR_15| (0+32768))
  2998  0240  00F3               	movwf	?_strncmp+2
  2999  0241  3083               	movlw	high (STR_15| (0+32768))
  3000  0242  00F4               	movwf	?_strncmp+3
  3001  0243  300B               	movlw	11
  3002  0244  00F5               	movwf	?_strncmp+4
  3003  0245  3000               	movlw	0
  3004  0246  00F6               	movwf	?_strncmp+5
  3005  0247  3185  25B4  3181   	fcall	_strncmp
  3006  024A  0872               	movf	?_strncmp+1,w
  3007  024B  0471               	iorwf	?_strncmp,w
  3008  024C  1D03               	skipz
  3009  024D  2A58               	goto	l4728
  3010                           
  3011                           ;main.c: 273: command_save_offset(received_data+11);
  3012  024E  0020               	movlb	0	; select bank0
  3013  024F  0834               	movf	_received_data,w
  3014  0250  3E0B               	addlw	11
  3015  0251  00DF               	movwf	?_command_save_offset
  3016  0252  3000               	movlw	0
  3017  0253  3D35               	addwfc	_received_data+1,w
  3018  0254  00E0               	movwf	?_command_save_offset+1
  3019  0255  318E  26C2         	fcall	_command_save_offset
  3020  0257  0008               	return
  3021  0258                     l4728:	
  3022                           
  3023                           ;main.c: 274: else if (received_data_length == 9 && strncmp(received_data,"DACCALGET",9)
      +                           == 0)
  3024  0258  087C               	movf	_received_data_length,w
  3025  0259  3A09               	xorlw	9
  3026  025A  1D03               	skipz
  3027  025B  2A75               	goto	l4734
  3028  025C  0020               	movlb	0	; select bank0
  3029  025D  0835               	movf	_received_data+1,w
  3030  025E  01F2               	clrf	?_strncmp+1
  3031  025F  07F2               	addwf	?_strncmp+1,f
  3032  0260  0834               	movf	_received_data,w
  3033  0261  01F1               	clrf	?_strncmp
  3034  0262  07F1               	addwf	?_strncmp,f
  3035  0263  3019               	movlw	low (STR_16| (0+32768))
  3036  0264  00F3               	movwf	?_strncmp+2
  3037  0265  3084               	movlw	high (STR_16| (0+32768))
  3038  0266  00F4               	movwf	?_strncmp+3
  3039  0267  3009               	movlw	9
  3040  0268  00F5               	movwf	?_strncmp+4
  3041  0269  3000               	movlw	0
  3042  026A  00F6               	movwf	?_strncmp+5
  3043  026B  3185  25B4  3181   	fcall	_strncmp
  3044  026E  0872               	movf	?_strncmp+1,w
  3045  026F  0471               	iorwf	?_strncmp,w
  3046  0270  1D03               	skipz
  3047  0271  2A75               	goto	l4734
  3048                           
  3049                           ;main.c: 275: command_read_dac_cal();
  3050  0272  3180  203F         	fcall	_command_read_dac_cal
  3051  0274  0008               	return
  3052  0275                     l4734:	
  3053                           
  3054                           ;main.c: 276: else if (received_data_length == 16 && strncmp(received_data,"DACCALSET ",
      +                          10) == 0)
  3055  0275  087C               	movf	_received_data_length,w
  3056  0276  3A10               	xorlw	16
  3057  0277  1D03               	skipz
  3058  0278  2A99               	goto	l4740
  3059  0279  0020               	movlb	0	; select bank0
  3060  027A  0835               	movf	_received_data+1,w
  3061  027B  01F2               	clrf	?_strncmp+1
  3062  027C  07F2               	addwf	?_strncmp+1,f
  3063  027D  0834               	movf	_received_data,w
  3064  027E  01F1               	clrf	?_strncmp
  3065  027F  07F1               	addwf	?_strncmp,f
  3066  0280  3003               	movlw	low (STR_17| (0+32768))
  3067  0281  00F3               	movwf	?_strncmp+2
  3068  0282  3084               	movlw	high (STR_17| (0+32768))
  3069  0283  00F4               	movwf	?_strncmp+3
  3070  0284  300A               	movlw	10
  3071  0285  00F5               	movwf	?_strncmp+4
  3072  0286  3000               	movlw	0
  3073  0287  00F6               	movwf	?_strncmp+5
  3074  0288  3185  25B4  3181   	fcall	_strncmp
  3075  028B  0872               	movf	?_strncmp+1,w
  3076  028C  0471               	iorwf	?_strncmp,w
  3077  028D  1D03               	skipz
  3078  028E  2A99               	goto	l4740
  3079                           
  3080                           ;main.c: 277: command_set_dac_cal(received_data+10);
  3081  028F  0020               	movlb	0	; select bank0
  3082  0290  0834               	movf	_received_data,w
  3083  0291  3E0A               	addlw	10
  3084  0292  00DF               	movwf	?_command_set_dac_cal
  3085  0293  3000               	movlw	0
  3086  0294  3D35               	addwfc	_received_data+1,w
  3087  0295  00E0               	movwf	?_command_set_dac_cal+1
  3088  0296  3184  24E5         	fcall	_command_set_dac_cal
  3089  0298  0008               	return
  3090  0299                     l4740:	
  3091                           
  3092                           ;main.c: 278: else if (received_data_length == 12 && strncmp(received_data,"SHUNTCALREAD
      +                          ",12) == 0)
  3093  0299  087C               	movf	_received_data_length,w
  3094  029A  3A0C               	xorlw	12
  3095  029B  1D03               	skipz
  3096  029C  2AB6               	goto	l4746
  3097  029D  0020               	movlb	0	; select bank0
  3098  029E  0835               	movf	_received_data+1,w
  3099  029F  01F2               	clrf	?_strncmp+1
  3100  02A0  07F2               	addwf	?_strncmp+1,f
  3101  02A1  0834               	movf	_received_data,w
  3102  02A2  01F1               	clrf	?_strncmp
  3103  02A3  07F1               	addwf	?_strncmp,f
  3104  02A4  30EA               	movlw	low (STR_18| (0+32768))
  3105  02A5  00F3               	movwf	?_strncmp+2
  3106  02A6  3083               	movlw	high (STR_18| (0+32768))
  3107  02A7  00F4               	movwf	?_strncmp+3
  3108  02A8  300C               	movlw	12
  3109  02A9  00F5               	movwf	?_strncmp+4
  3110  02AA  3000               	movlw	0
  3111  02AB  00F6               	movwf	?_strncmp+5
  3112  02AC  3185  25B4  3181   	fcall	_strncmp
  3113  02AF  0872               	movf	?_strncmp+1,w
  3114  02B0  0471               	iorwf	?_strncmp,w
  3115  02B1  1D03               	skipz
  3116  02B2  2AB6               	goto	l4746
  3117                           
  3118                           ;main.c: 279: command_read_shuntcalibration();
  3119  02B3  3180  2063         	fcall	_command_read_shuntcalibration
  3120  02B5  0008               	return
  3121  02B6                     l4746:	
  3122                           
  3123                           ;main.c: 280: else if (received_data_length == 19 && strncmp(received_data,"SHUNTCALSAVE
      +                           ",13) == 0)
  3124  02B6  087C               	movf	_received_data_length,w
  3125  02B7  3A13               	xorlw	19
  3126  02B8  1D03               	skipz
  3127  02B9  2ADA               	goto	l4752
  3128  02BA  0020               	movlb	0	; select bank0
  3129  02BB  0835               	movf	_received_data+1,w
  3130  02BC  01F2               	clrf	?_strncmp+1
  3131  02BD  07F2               	addwf	?_strncmp+1,f
  3132  02BE  0834               	movf	_received_data,w
  3133  02BF  01F1               	clrf	?_strncmp
  3134  02C0  07F1               	addwf	?_strncmp,f
  3135  02C1  30CE               	movlw	low (STR_19| (0+32768))
  3136  02C2  00F3               	movwf	?_strncmp+2
  3137  02C3  3083               	movlw	high (STR_19| (0+32768))
  3138  02C4  00F4               	movwf	?_strncmp+3
  3139  02C5  300D               	movlw	13
  3140  02C6  00F5               	movwf	?_strncmp+4
  3141  02C7  3000               	movlw	0
  3142  02C8  00F6               	movwf	?_strncmp+5
  3143  02C9  3185  25B4  3181   	fcall	_strncmp
  3144  02CC  0872               	movf	?_strncmp+1,w
  3145  02CD  0471               	iorwf	?_strncmp,w
  3146  02CE  1D03               	skipz
  3147  02CF  2ADA               	goto	l4752
  3148                           
  3149                           ;main.c: 281: command_save_shuntcalibration(received_data+13);
  3150  02D0  0020               	movlb	0	; select bank0
  3151  02D1  0834               	movf	_received_data,w
  3152  02D2  3E0D               	addlw	13
  3153  02D3  00DF               	movwf	?_command_save_shuntcalibration
  3154  02D4  3000               	movlw	0
  3155  02D5  3D35               	addwfc	_received_data+1,w
  3156  02D6  00E0               	movwf	?_command_save_shuntcalibration+1
  3157  02D7  318E  26D4         	fcall	_command_save_shuntcalibration
  3158  02D9  0008               	return
  3159  02DA                     l4752:	
  3160                           
  3161                           ;main.c: 283: else
  3162                           ;main.c: 284: command_unknown();
  3163  02DA  318F  27A3         	fcall	_command_unknown
  3164  02DC  0008               	return
  3165  02DD                     __end_of_interpret_command:	
  3166                           
  3167                           	psect	text8
  3168  05B4                     __ptext8:	
  3169 ;; *************** function _strncmp *****************
  3170 ;; Defined at:
  3171 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strncmp.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  s1              2    1[COMMON] PTR const unsigned char 
  3174 ;;		 -> uart_command(20), ROM(8192), 
  3175 ;;  s2              2    3[COMMON] PTR const unsigned char 
  3176 ;;		 -> STR_19(14), STR_18(13), STR_17(11), STR_16(10), 
  3177 ;;		 -> STR_15(12), STR_14(11), STR_13(8), STR_12(7), 
  3178 ;;		 -> STR_11(8), STR_10(8), STR_9(8), STR_8(8), 
  3179 ;;		 -> STR_7(14), STR_6(15), STR_5(9), STR_4(8), 
  3180 ;;  len             2    5[COMMON] unsigned int 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;		None
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  2    1[COMMON] int 
  3185 ;; Registers used:
  3186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3192 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3195 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3196 ;;Total ram usage:        8 bytes
  3197 ;; Hardware stack levels used:    1
  3198 ;; Hardware stack levels required when called:    1
  3199 ;; This function calls:
  3200 ;;		Nothing
  3201 ;; This function is called by:
  3202 ;;		_interpret_command
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           
  3207                           ;psect for function _strncmp
  3208  05B4                     _strncmp:	
  3209  05B4                     l1168:	
  3210                           ;incstack = 0
  3211                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  3212                           
  3213  05B4  3001               	movlw	1
  3214  05B5  02F5               	subwf	strncmp@len,f
  3215  05B6  3000               	movlw	0
  3216  05B7  3BF6               	subwfb	strncmp@len+1,f
  3217  05B8  30FF               	movlw	255
  3218  05B9  0676               	xorwf	strncmp@len+1,w
  3219  05BA  1D03               	skipz
  3220  05BB  2DBE               	goto	u3605
  3221  05BC  30FF               	movlw	255
  3222  05BD  0675               	xorwf	strncmp@len,w
  3223  05BE                     u3605:	
  3224  05BE  1903               	btfsc	3,2
  3225  05BF  2DF7               	goto	l4560
  3226  05C0  0871               	movf	strncmp@s1,w
  3227  05C1  0084               	movwf	4
  3228  05C2  0872               	movf	strncmp@s1+1,w
  3229  05C3  0085               	movwf	5
  3230  05C4  0800               	movf	0,w	;code access
  3231  05C5  3A00               	xorlw	0
  3232  05C6  1903               	skipnz
  3233  05C7  2DD6               	goto	l4554
  3234  05C8  0873               	movf	strncmp@s2,w
  3235  05C9  0084               	movwf	4
  3236  05CA  0874               	movf	strncmp@s2+1,w
  3237  05CB  0085               	movwf	5
  3238  05CC  0800               	movf	0,w	;code access
  3239  05CD  00F7               	movwf	??_strncmp
  3240  05CE  0871               	movf	strncmp@s1,w
  3241  05CF  0084               	movwf	4
  3242  05D0  0872               	movf	strncmp@s1+1,w
  3243  05D1  0085               	movwf	5
  3244  05D2  0800               	movf	0,w	;code access
  3245  05D3  0677               	xorwf	??_strncmp,w
  3246  05D4  1903               	skipnz
  3247  05D5  2DEE               	goto	l4558
  3248  05D6                     l4554:	
  3249  05D6  0873               	movf	strncmp@s2,w
  3250  05D7  0084               	movwf	4
  3251  05D8  0874               	movf	strncmp@s2+1,w
  3252  05D9  0085               	movwf	5
  3253  05DA  0800               	movf	0,w	;code access
  3254  05DB  00F7               	movwf	??_strncmp
  3255  05DC  01F8               	clrf	??_strncmp+1
  3256  05DD  09F7               	comf	??_strncmp,f
  3257  05DE  09F8               	comf	??_strncmp+1,f
  3258  05DF  0AF7               	incf	??_strncmp,f
  3259  05E0  1903               	skipnz
  3260  05E1  0AF8               	incf	??_strncmp+1,f
  3261  05E2  0871               	movf	strncmp@s1,w
  3262  05E3  0084               	movwf	4
  3263  05E4  0872               	movf	strncmp@s1+1,w
  3264  05E5  0085               	movwf	5
  3265  05E6  0800               	movf	0,w	;code access
  3266  05E7  0777               	addwf	??_strncmp,w
  3267  05E8  00F1               	movwf	?_strncmp
  3268  05E9  0878               	movf	??_strncmp+1,w
  3269  05EA  1803               	skipnc
  3270  05EB  0A78               	incf	??_strncmp+1,w
  3271  05EC  00F2               	movwf	?_strncmp+1
  3272  05ED  0008               	return
  3273  05EE                     l4558:	
  3274  05EE  3001               	movlw	1
  3275  05EF  07F1               	addwf	strncmp@s1,f
  3276  05F0  3000               	movlw	0
  3277  05F1  3DF2               	addwfc	strncmp@s1+1,f
  3278  05F2  3001               	movlw	1
  3279  05F3  07F3               	addwf	strncmp@s2,f
  3280  05F4  3000               	movlw	0
  3281  05F5  3DF4               	addwfc	strncmp@s2+1,f
  3282  05F6  2DB4               	goto	l1168
  3283  05F7                     l4560:	
  3284  05F7  01F1               	clrf	?_strncmp
  3285  05F8  01F2               	clrf	?_strncmp+1
  3286  05F9  0008               	return
  3287  05FA                     __end_of_strncmp:	
  3288                           
  3289                           	psect	text9
  3290  04E5                     __ptext9:	
  3291 ;; *************** function _command_set_dac_cal *****************
  3292 ;; Defined at:
  3293 ;;		line 242 in file "main.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  dac_cal_data    2    3[BANK0 ] PTR const unsigned char 
  3296 ;;		 -> ROM(8192), 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;		None               void
  3301 ;; Registers used:
  3302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3308 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3310 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3311 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3312 ;;Total ram usage:       11 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    5
  3315 ;; This function calls:
  3316 ;;		_HEFLASH_writeBlock
  3317 ;;		_DAC1220_Write3Bytes
  3318 ;;		_send_OK
  3319 ;; This function is called by:
  3320 ;;		_interpret_command
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _command_set_dac_cal
  3326  04E5                     _command_set_dac_cal:	
  3327                           
  3328                           ;main.c: 243: HEFLASH_writeBlock(2, dac_cal_data, 6);
  3329                           
  3330                           ;incstack = 0
  3331                           ; Regs used in _command_set_dac_cal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3332  04E5  0020               	movlb	0	; select bank0
  3333  04E6  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3334  04E7  01F8               	clrf	?_HEFLASH_writeBlock+1
  3335  04E8  07F8               	addwf	?_HEFLASH_writeBlock+1,f
  3336  04E9  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3337  04EA  01F7               	clrf	?_HEFLASH_writeBlock
  3338  04EB  07F7               	addwf	?_HEFLASH_writeBlock,f
  3339  04EC  3006               	movlw	6
  3340  04ED  00E1               	movwf	??_command_set_dac_cal
  3341  04EE  0861               	movf	??_command_set_dac_cal,w
  3342  04EF  00F9               	movwf	?_HEFLASH_writeBlock+2
  3343  04F0  3002               	movlw	2
  3344  04F1  3185  2554  3184   	fcall	_HEFLASH_writeBlock
  3345                           
  3346                           ;main.c: 244: DAC1220_Write3Bytes(8, dac_cal_data[0], dac_cal_data[1], dac_cal_data[2]);
  3347  04F4  0020               	movlb	0	; select bank0
  3348  04F5  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3349  04F6  0084               	movwf	4
  3350  04F7  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3351  04F8  0085               	movwf	5
  3352  04F9  0800               	movf	0,w	;code access
  3353  04FA  00E1               	movwf	??_command_set_dac_cal
  3354  04FB  0861               	movf	??_command_set_dac_cal,w
  3355  04FC  00F5               	movwf	?_DAC1220_Write3Bytes
  3356  04FD  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3357  04FE  00E3               	movwf	??_command_set_dac_cal+2
  3358  04FF  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3359  0500  00E2               	movwf	??_command_set_dac_cal+1
  3360  0501  3001               	movlw	1
  3361  0502  0762               	addwf	??_command_set_dac_cal+1,w
  3362  0503  0084               	movwf	4
  3363  0504  0863               	movf	??_command_set_dac_cal+2,w
  3364  0505  1803               	skipnc
  3365  0506  0A63               	incf	??_command_set_dac_cal+2,w
  3366  0507  0085               	movwf	5
  3367  0508  0800               	movf	0,w	;code access
  3368  0509  00E4               	movwf	??_command_set_dac_cal+3
  3369  050A  0864               	movf	??_command_set_dac_cal+3,w
  3370  050B  00F6               	movwf	?_DAC1220_Write3Bytes+1
  3371  050C  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3372  050D  00E6               	movwf	??_command_set_dac_cal+5
  3373  050E  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3374  050F  00E5               	movwf	??_command_set_dac_cal+4
  3375  0510  3002               	movlw	2
  3376  0511  0765               	addwf	??_command_set_dac_cal+4,w
  3377  0512  0084               	movwf	4
  3378  0513  0866               	movf	??_command_set_dac_cal+5,w
  3379  0514  1803               	skipnc
  3380  0515  0A66               	incf	??_command_set_dac_cal+5,w
  3381  0516  0085               	movwf	5
  3382  0517  0800               	movf	0,w	;code access
  3383  0518  00E7               	movwf	??_command_set_dac_cal+6
  3384  0519  0867               	movf	??_command_set_dac_cal+6,w
  3385  051A  00F7               	movwf	?_DAC1220_Write3Bytes+2
  3386  051B  3008               	movlw	8
  3387  051C  3180  20C9  3184   	fcall	_DAC1220_Write3Bytes
  3388                           
  3389                           ;main.c: 245: DAC1220_Write3Bytes(12, dac_cal_data[3], dac_cal_data[4], dac_cal_data[5]);
  3390  051F  0020               	movlb	0	; select bank0
  3391  0520  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3392  0521  00E2               	movwf	??_command_set_dac_cal+1
  3393  0522  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3394  0523  00E1               	movwf	??_command_set_dac_cal
  3395  0524  3003               	movlw	3
  3396  0525  0761               	addwf	??_command_set_dac_cal,w
  3397  0526  0084               	movwf	4
  3398  0527  0862               	movf	??_command_set_dac_cal+1,w
  3399  0528  1803               	skipnc
  3400  0529  0A62               	incf	??_command_set_dac_cal+1,w
  3401  052A  0085               	movwf	5
  3402  052B  0800               	movf	0,w	;code access
  3403  052C  00E3               	movwf	??_command_set_dac_cal+2
  3404  052D  0863               	movf	??_command_set_dac_cal+2,w
  3405  052E  00F5               	movwf	?_DAC1220_Write3Bytes
  3406  052F  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3407  0530  00E5               	movwf	??_command_set_dac_cal+4
  3408  0531  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3409  0532  00E4               	movwf	??_command_set_dac_cal+3
  3410  0533  3004               	movlw	4
  3411  0534  0764               	addwf	??_command_set_dac_cal+3,w
  3412  0535  0084               	movwf	4
  3413  0536  0865               	movf	??_command_set_dac_cal+4,w
  3414  0537  1803               	skipnc
  3415  0538  0A65               	incf	??_command_set_dac_cal+4,w
  3416  0539  0085               	movwf	5
  3417  053A  0800               	movf	0,w	;code access
  3418  053B  00E6               	movwf	??_command_set_dac_cal+5
  3419  053C  0866               	movf	??_command_set_dac_cal+5,w
  3420  053D  00F6               	movwf	?_DAC1220_Write3Bytes+1
  3421  053E  0860               	movf	command_set_dac_cal@dac_cal_data+1,w
  3422  053F  00E8               	movwf	??_command_set_dac_cal+7
  3423  0540  085F               	movf	command_set_dac_cal@dac_cal_data,w
  3424  0541  00E7               	movwf	??_command_set_dac_cal+6
  3425  0542  3005               	movlw	5
  3426  0543  0767               	addwf	??_command_set_dac_cal+6,w
  3427  0544  0084               	movwf	4
  3428  0545  0868               	movf	??_command_set_dac_cal+7,w
  3429  0546  1803               	skipnc
  3430  0547  0A68               	incf	??_command_set_dac_cal+7,w
  3431  0548  0085               	movwf	5
  3432  0549  0800               	movf	0,w	;code access
  3433  054A  00E9               	movwf	??_command_set_dac_cal+8
  3434  054B  0869               	movf	??_command_set_dac_cal+8,w
  3435  054C  00F7               	movwf	?_DAC1220_Write3Bytes+2
  3436  054D  300C               	movlw	12
  3437  054E  3180  20C9  3184   	fcall	_DAC1220_Write3Bytes
  3438                           
  3439                           ;main.c: 246: send_OK();
  3440  0551  318F  27C2         	fcall	_send_OK
  3441  0553  0008               	return
  3442  0554                     __end_of_command_set_dac_cal:	
  3443                           
  3444                           	psect	text10
  3445  003F                     __ptext10:	
  3446 ;; *************** function _command_read_dac_cal *****************
  3447 ;; Defined at:
  3448 ;;		line 235 in file "main.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;		None
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;		None
  3453 ;; Return value:  Size  Location     Type
  3454 ;;		None               void
  3455 ;; Registers used:
  3456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;Total ram usage:        2 bytes
  3467 ;; Hardware stack levels used:    1
  3468 ;; Hardware stack levels required when called:    3
  3469 ;; This function calls:
  3470 ;;		_HEFLASH_readBlock
  3471 ;;		_memcpy
  3472 ;; This function is called by:
  3473 ;;		_interpret_command
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _command_read_dac_cal
  3479  003F                     _command_read_dac_cal:	
  3480                           
  3481                           ;main.c: 236: HEFLASH_readBlock(heflashbuffer, 2, 32);
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _command_read_dac_cal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3485  003F  3002               	movlw	2
  3486  0040  0020               	movlb	0	; select bank0
  3487  0041  00DC               	movwf	??_command_read_dac_cal
  3488  0042  085C               	movf	??_command_read_dac_cal,w
  3489  0043  00F3               	movwf	?_HEFLASH_readBlock
  3490  0044  3020               	movlw	32
  3491  0045  00DD               	movwf	??_command_read_dac_cal+1
  3492  0046  085D               	movf	??_command_read_dac_cal+1,w
  3493  0047  00F4               	movwf	?_HEFLASH_readBlock+1
  3494  0048  30C0               	movlw	_heflashbuffer& (0+255)
  3495  0049  3186  26E7  3180   	fcall	_HEFLASH_readBlock
  3496                           
  3497                           ;main.c: 237: transmit_data_length=6;
  3498  004C  3006               	movlw	6
  3499  004D  0020               	movlb	0	; select bank0
  3500  004E  00DC               	movwf	??_command_read_dac_cal
  3501  004F  085C               	movf	??_command_read_dac_cal,w
  3502  0050  00C5               	movwf	_transmit_data_length
  3503                           
  3504                           ;main.c: 238: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  3505  0051  0844               	movf	_transmit_data,w
  3506  0052  00F1               	movwf	?_memcpy
  3507  0053  3000               	movlw	0
  3508  0054  00F2               	movwf	?_memcpy+1
  3509  0055  30C0               	movlw	low _heflashbuffer
  3510  0056  00F3               	movwf	?_memcpy+2
  3511  0057  3001               	movlw	high _heflashbuffer
  3512  0058  00F4               	movwf	?_memcpy+3
  3513  0059  0845               	movf	_transmit_data_length,w
  3514  005A  00DC               	movwf	??_command_read_dac_cal
  3515  005B  01DD               	clrf	??_command_read_dac_cal+1
  3516  005C  085C               	movf	??_command_read_dac_cal,w
  3517  005D  00F5               	movwf	?_memcpy+4
  3518  005E  085D               	movf	??_command_read_dac_cal+1,w
  3519  005F  00F6               	movwf	?_memcpy+5
  3520  0060  3187  27B0         	fcall	_memcpy
  3521  0062  0008               	return
  3522  0063                     __end_of_command_read_dac_cal:	
  3523                           
  3524                           	psect	text11
  3525  0ED4                     __ptext11:	
  3526 ;; *************** function _command_save_shuntcalibration *****************
  3527 ;; Defined at:
  3528 ;;		line 229 in file "main.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  shuntcalibra    2    3[BANK0 ] PTR const unsigned char 
  3531 ;;		 -> ROM(8192), 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;		None               void
  3536 ;; Registers used:
  3537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3547 ;;Total ram usage:        3 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    4
  3550 ;; This function calls:
  3551 ;;		_HEFLASH_writeBlock
  3552 ;;		_send_OK
  3553 ;; This function is called by:
  3554 ;;		_interpret_command
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _command_save_shuntcalibration
  3560  0ED4                     _command_save_shuntcalibration:	
  3561                           
  3562                           ;main.c: 230: HEFLASH_writeBlock(3, shuntcalibration_data, 6);
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _command_save_shuntcalibration: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  3566  0ED4  0020               	movlb	0	; select bank0
  3567  0ED5  0860               	movf	command_save_shuntcalibration@shuntcalibration_data+1,w
  3568  0ED6  01F8               	clrf	?_HEFLASH_writeBlock+1
  3569  0ED7  07F8               	addwf	?_HEFLASH_writeBlock+1,f
  3570  0ED8  085F               	movf	command_save_shuntcalibration@shuntcalibration_data,w
  3571  0ED9  01F7               	clrf	?_HEFLASH_writeBlock
  3572  0EDA  07F7               	addwf	?_HEFLASH_writeBlock,f
  3573  0EDB  3006               	movlw	6
  3574  0EDC  00E1               	movwf	??_command_save_shuntcalibration
  3575  0EDD  0861               	movf	??_command_save_shuntcalibration,w
  3576  0EDE  00F9               	movwf	?_HEFLASH_writeBlock+2
  3577  0EDF  3003               	movlw	3
  3578  0EE0  3185  2554  318E   	fcall	_HEFLASH_writeBlock
  3579                           
  3580                           ;main.c: 231: send_OK();
  3581  0EE3  318F  27C2         	fcall	_send_OK
  3582  0EE5  0008               	return
  3583  0EE6                     __end_of_command_save_shuntcalibration:	
  3584                           
  3585                           	psect	text12
  3586  0063                     __ptext12:	
  3587 ;; *************** function _command_read_shuntcalibration *****************
  3588 ;; Defined at:
  3589 ;;		line 222 in file "main.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3607 ;;Total ram usage:        2 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    3
  3610 ;; This function calls:
  3611 ;;		_HEFLASH_readBlock
  3612 ;;		_memcpy
  3613 ;; This function is called by:
  3614 ;;		_interpret_command
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _command_read_shuntcalibration
  3620  0063                     _command_read_shuntcalibration:	
  3621                           
  3622                           ;main.c: 223: HEFLASH_readBlock(heflashbuffer, 3, 32);
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _command_read_shuntcalibration: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3626  0063  3003               	movlw	3
  3627  0064  0020               	movlb	0	; select bank0
  3628  0065  00DC               	movwf	??_command_read_shuntcalibration
  3629  0066  085C               	movf	??_command_read_shuntcalibration,w
  3630  0067  00F3               	movwf	?_HEFLASH_readBlock
  3631  0068  3020               	movlw	32
  3632  0069  00DD               	movwf	??_command_read_shuntcalibration+1
  3633  006A  085D               	movf	??_command_read_shuntcalibration+1,w
  3634  006B  00F4               	movwf	?_HEFLASH_readBlock+1
  3635  006C  30C0               	movlw	_heflashbuffer& (0+255)
  3636  006D  3186  26E7  3180   	fcall	_HEFLASH_readBlock
  3637                           
  3638                           ;main.c: 224: transmit_data_length=6;
  3639  0070  3006               	movlw	6
  3640  0071  0020               	movlb	0	; select bank0
  3641  0072  00DC               	movwf	??_command_read_shuntcalibration
  3642  0073  085C               	movf	??_command_read_shuntcalibration,w
  3643  0074  00C5               	movwf	_transmit_data_length
  3644                           
  3645                           ;main.c: 225: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  3646  0075  0844               	movf	_transmit_data,w
  3647  0076  00F1               	movwf	?_memcpy
  3648  0077  3000               	movlw	0
  3649  0078  00F2               	movwf	?_memcpy+1
  3650  0079  30C0               	movlw	low _heflashbuffer
  3651  007A  00F3               	movwf	?_memcpy+2
  3652  007B  3001               	movlw	high _heflashbuffer
  3653  007C  00F4               	movwf	?_memcpy+3
  3654  007D  0845               	movf	_transmit_data_length,w
  3655  007E  00DC               	movwf	??_command_read_shuntcalibration
  3656  007F  01DD               	clrf	??_command_read_shuntcalibration+1
  3657  0080  085C               	movf	??_command_read_shuntcalibration,w
  3658  0081  00F5               	movwf	?_memcpy+4
  3659  0082  085D               	movf	??_command_read_shuntcalibration+1,w
  3660  0083  00F6               	movwf	?_memcpy+5
  3661  0084  3187  27B0         	fcall	_memcpy
  3662  0086  0008               	return
  3663  0087                     __end_of_command_read_shuntcalibration:	
  3664                           
  3665                           	psect	text13
  3666  0EC2                     __ptext13:	
  3667 ;; *************** function _command_save_offset *****************
  3668 ;; Defined at:
  3669 ;;		line 216 in file "main.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  offset_data     2    3[BANK0 ] PTR const unsigned char 
  3672 ;;		 -> ROM(8192), 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;		None               void
  3677 ;; Registers used:
  3678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3684 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3687 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3688 ;;Total ram usage:        3 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    4
  3691 ;; This function calls:
  3692 ;;		_HEFLASH_writeBlock
  3693 ;;		_send_OK
  3694 ;; This function is called by:
  3695 ;;		_interpret_command
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           
  3700                           ;psect for function _command_save_offset
  3701  0EC2                     _command_save_offset:	
  3702                           
  3703                           ;main.c: 217: HEFLASH_writeBlock(1, offset_data, 6);
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _command_save_offset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3707  0EC2  0020               	movlb	0	; select bank0
  3708  0EC3  0860               	movf	command_save_offset@offset_data+1,w
  3709  0EC4  01F8               	clrf	?_HEFLASH_writeBlock+1
  3710  0EC5  07F8               	addwf	?_HEFLASH_writeBlock+1,f
  3711  0EC6  085F               	movf	command_save_offset@offset_data,w
  3712  0EC7  01F7               	clrf	?_HEFLASH_writeBlock
  3713  0EC8  07F7               	addwf	?_HEFLASH_writeBlock,f
  3714  0EC9  3006               	movlw	6
  3715  0ECA  00E1               	movwf	??_command_save_offset
  3716  0ECB  0861               	movf	??_command_save_offset,w
  3717  0ECC  00F9               	movwf	?_HEFLASH_writeBlock+2
  3718  0ECD  3001               	movlw	1
  3719  0ECE  3185  2554  318E   	fcall	_HEFLASH_writeBlock
  3720                           
  3721                           ;main.c: 218: send_OK();
  3722  0ED1  318F  27C2         	fcall	_send_OK
  3723  0ED3  0008               	return
  3724  0ED4                     __end_of_command_save_offset:	
  3725                           
  3726                           	psect	text14
  3727  07DD                     __ptext14:	
  3728 ;; *************** function _command_read_offset *****************
  3729 ;; Defined at:
  3730 ;;		line 209 in file "main.c"
  3731 ;; Parameters:    Size  Location     Type
  3732 ;;		None
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;		None
  3735 ;; Return value:  Size  Location     Type
  3736 ;;		None               void
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3748 ;;Total ram usage:        2 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    3
  3751 ;; This function calls:
  3752 ;;		_HEFLASH_readBlock
  3753 ;;		_memcpy
  3754 ;; This function is called by:
  3755 ;;		_interpret_command
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function _command_read_offset
  3761  07DD                     _command_read_offset:	
  3762                           
  3763                           ;main.c: 210: HEFLASH_readBlock(heflashbuffer, 1, 32);
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _command_read_offset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3767  07DD  01F3               	clrf	?_HEFLASH_readBlock
  3768  07DE  0AF3               	incf	?_HEFLASH_readBlock,f
  3769  07DF  3020               	movlw	32
  3770  07E0  0020               	movlb	0	; select bank0
  3771  07E1  00DC               	movwf	??_command_read_offset
  3772  07E2  085C               	movf	??_command_read_offset,w
  3773  07E3  00F4               	movwf	?_HEFLASH_readBlock+1
  3774  07E4  30C0               	movlw	_heflashbuffer& (0+255)
  3775  07E5  3186  26E7  3187   	fcall	_HEFLASH_readBlock
  3776                           
  3777                           ;main.c: 211: transmit_data_length=6;
  3778  07E8  3006               	movlw	6
  3779  07E9  0020               	movlb	0	; select bank0
  3780  07EA  00DC               	movwf	??_command_read_offset
  3781  07EB  085C               	movf	??_command_read_offset,w
  3782  07EC  00C5               	movwf	_transmit_data_length
  3783                           
  3784                           ;main.c: 212: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  3785  07ED  0844               	movf	_transmit_data,w
  3786  07EE  00F1               	movwf	?_memcpy
  3787  07EF  3000               	movlw	0
  3788  07F0  00F2               	movwf	?_memcpy+1
  3789  07F1  30C0               	movlw	low _heflashbuffer
  3790  07F2  00F3               	movwf	?_memcpy+2
  3791  07F3  3001               	movlw	high _heflashbuffer
  3792  07F4  00F4               	movwf	?_memcpy+3
  3793  07F5  0845               	movf	_transmit_data_length,w
  3794  07F6  00DC               	movwf	??_command_read_offset
  3795  07F7  01DD               	clrf	??_command_read_offset+1
  3796  07F8  085C               	movf	??_command_read_offset,w
  3797  07F9  00F5               	movwf	?_memcpy+4
  3798  07FA  085D               	movf	??_command_read_offset+1,w
  3799  07FB  00F6               	movwf	?_memcpy+5
  3800  07FC  3187  27B0         	fcall	_memcpy
  3801  07FE  0008               	return
  3802  07FF                     __end_of_command_read_offset:	
  3803                           
  3804                           	psect	text15
  3805  0087                     __ptext15:	
  3806 ;; *************** function _command_read_adc *****************
  3807 ;; Defined at:
  3808 ;;		line 195 in file "main.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  adc_data        6    2[BANK0 ] unsigned char [6]
  3813 ;; Return value:  Size  Location     Type
  3814 ;;		None               void
  3815 ;; Registers used:
  3816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;Total ram usage:        8 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    5
  3829 ;; This function calls:
  3830 ;;		_MCP3550_Read
  3831 ;;		_memcpy
  3832 ;;		_send_WAIT
  3833 ;; This function is called by:
  3834 ;;		_interpret_command
  3835 ;; This function uses a non-reentrant model
  3836 ;;
  3837                           
  3838                           
  3839                           ;psect for function _command_read_adc
  3840  0087                     _command_read_adc:	
  3841                           
  3842                           ;main.c: 196: uint8_t adc_data[6];
  3843                           ;main.c: 197: if(MCP3550_Read(adc_data))
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _command_read_adc: [allreg]
  3847  0087  305E               	movlw	command_read_adc@adc_data& (0+255)
  3848  0088  3186  2677  3180   	fcall	_MCP3550_Read
  3849  008B  3A00               	xorlw	0
  3850  008C  1903               	skipnz
  3851  008D  28A5               	goto	l4424
  3852                           
  3853                           ;main.c: 198: {
  3854                           ;main.c: 199: transmit_data_length=6;
  3855  008E  3006               	movlw	6
  3856  008F  0020               	movlb	0	; select bank0
  3857  0090  00DC               	movwf	??_command_read_adc
  3858  0091  085C               	movf	??_command_read_adc,w
  3859  0092  00C5               	movwf	_transmit_data_length
  3860                           
  3861                           ;main.c: 200: memcpy(transmit_data, adc_data, transmit_data_length);
  3862  0093  0844               	movf	_transmit_data,w
  3863  0094  00F1               	movwf	?_memcpy
  3864  0095  3000               	movlw	0
  3865  0096  00F2               	movwf	?_memcpy+1
  3866  0097  305E               	movlw	low command_read_adc@adc_data
  3867  0098  00F3               	movwf	?_memcpy+2
  3868  0099  3000               	movlw	high command_read_adc@adc_data
  3869  009A  00F4               	movwf	?_memcpy+3
  3870  009B  0845               	movf	_transmit_data_length,w
  3871  009C  00DC               	movwf	??_command_read_adc
  3872  009D  01DD               	clrf	??_command_read_adc+1
  3873  009E  085C               	movf	??_command_read_adc,w
  3874  009F  00F5               	movwf	?_memcpy+4
  3875  00A0  085D               	movf	??_command_read_adc+1,w
  3876  00A1  00F6               	movwf	?_memcpy+5
  3877  00A2  3187  27B0         	fcall	_memcpy
  3878                           
  3879                           ;main.c: 201: }
  3880  00A4  0008               	return
  3881  00A5                     l4424:	
  3882                           
  3883                           ;main.c: 202: else
  3884                           ;main.c: 203: {
  3885                           ;main.c: 204: send_WAIT();
  3886  00A5  318F  27E1         	fcall	_send_WAIT
  3887  00A7  0008               	return
  3888  00A8                     __end_of_command_read_adc:	
  3889                           
  3890                           	psect	text16
  3891  0FE1                     __ptext16:	
  3892 ;; *************** function _send_WAIT *****************
  3893 ;; Defined at:
  3894 ;;		line 120 in file "main.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  reply           2    8[COMMON] PTR const unsigned char 
  3899 ;;		 -> STR_3(6), 
  3900 ;; Return value:  Size  Location     Type
  3901 ;;		None               void
  3902 ;; Registers used:
  3903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;Total ram usage:        3 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    3
  3916 ;; This function calls:
  3917 ;;		_strlen
  3918 ;;		_USART_Send
  3919 ;; This function is called by:
  3920 ;;		_command_read_adc
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _send_WAIT
  3926  0FE1                     _send_WAIT:	
  3927                           
  3928                           ;main.c: 121: const uint8_t* reply = "WAIT\n";
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _send_WAIT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3932  0FE1  3063               	movlw	low (STR_3| (0+32768))
  3933  0FE2  00F8               	movwf	send_WAIT@reply
  3934  0FE3  3084               	movlw	high (STR_3| (0+32768))
  3935  0FE4  00F9               	movwf	send_WAIT@reply+1
  3936                           
  3937                           ;main.c: 122: transmit_data_length = strlen(reply);
  3938  0FE5  0879               	movf	send_WAIT@reply+1,w
  3939  0FE6  01F2               	clrf	?_strlen+1
  3940  0FE7  07F2               	addwf	?_strlen+1,f
  3941  0FE8  0878               	movf	send_WAIT@reply,w
  3942  0FE9  01F1               	clrf	?_strlen
  3943  0FEA  07F1               	addwf	?_strlen,f
  3944  0FEB  3180  20A8  318F   	fcall	_strlen
  3945  0FEE  0871               	movf	?_strlen,w
  3946  0FEF  00F7               	movwf	??_send_WAIT
  3947  0FF0  0877               	movf	??_send_WAIT,w
  3948  0FF1  0020               	movlb	0	; select bank0
  3949  0FF2  00C5               	movwf	_transmit_data_length
  3950                           
  3951                           ;main.c: 123: USART_Send(reply,transmit_data_length);
  3952  0FF3  0879               	movf	send_WAIT@reply+1,w
  3953  0FF4  01F3               	clrf	?_USART_Send+1
  3954  0FF5  07F3               	addwf	?_USART_Send+1,f
  3955  0FF6  0878               	movf	send_WAIT@reply,w
  3956  0FF7  01F2               	clrf	?_USART_Send
  3957  0FF8  07F2               	addwf	?_USART_Send,f
  3958  0FF9  0845               	movf	_transmit_data_length,w
  3959  0FFA  00F7               	movwf	??_send_WAIT
  3960  0FFB  0877               	movf	??_send_WAIT,w
  3961  0FFC  00F4               	movwf	?_USART_Send+2
  3962  0FFD  318F  2724         	fcall	_USART_Send
  3963  0FFF  0008               	return
  3964  1000                     __end_of_send_WAIT:	
  3965                           
  3966                           	psect	text17
  3967  07B0                     __ptext17:	
  3968 ;; *************** function _memcpy *****************
  3969 ;; Defined at:
  3970 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  d1              2    1[COMMON] PTR void 
  3973 ;;		 -> NULL(0), ep_buffers(144), 
  3974 ;;  s1              2    3[COMMON] PTR const void 
  3975 ;;		 -> serial_string(10), product_string(58), vendor_string(44), str00(4), 
  3976 ;;		 -> configuration_1(32), command_read_adc@adc_data(6), heflashbuffer(32), handle_standard_control_request@ret_863(1)
      +, 
  3977 ;;		 -> handle_standard_control_request@ret_861(2), handle_standard_control_request@ret(2), this_device_descriptor(18), 
      +g_configuration(1), 
  3978 ;;		 -> NULL(0), ep_buffers(144), 
  3979 ;;  n               2    5[COMMON] unsigned int 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  s               2   10[COMMON] PTR const unsigned char 
  3982 ;;		 -> serial_string(10), product_string(58), vendor_string(44), str00(4), 
  3983 ;;		 -> configuration_1(32), command_read_adc@adc_data(6), heflashbuffer(32), handle_standard_control_request@ret_863(1)
      +, 
  3984 ;;		 -> handle_standard_control_request@ret_861(2), handle_standard_control_request@ret(2), this_device_descriptor(18), 
      +g_configuration(1), 
  3985 ;;		 -> NULL(0), ep_buffers(144), 
  3986 ;;  d               2    8[COMMON] PTR unsigned char 
  3987 ;;		 -> NULL(0), ep_buffers(144), 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  2    1[COMMON] PTR void 
  3990 ;; Registers used:
  3991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3997 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;Total ram usage:       11 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    1
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_command_read_adc
  4008 ;;		_command_read_offset
  4009 ;;		_command_read_shuntcalibration
  4010 ;;		_command_read_dac_cal
  4011 ;;		_start_control_return
  4012 ;;		_handle_ep0_out
  4013 ;;		_handle_ep0_in
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           
  4018                           ;psect for function _memcpy
  4019  07B0                     _memcpy:	
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  4023  07B0  0874               	movf	memcpy@s1+1,w
  4024  07B1  01FB               	clrf	memcpy@s+1
  4025  07B2  07FB               	addwf	memcpy@s+1,f
  4026  07B3  0873               	movf	memcpy@s1,w
  4027  07B4  01FA               	clrf	memcpy@s
  4028  07B5  07FA               	addwf	memcpy@s,f
  4029  07B6  0872               	movf	memcpy@d1+1,w
  4030  07B7  01F9               	clrf	memcpy@d+1
  4031  07B8  07F9               	addwf	memcpy@d+1,f
  4032  07B9  0871               	movf	memcpy@d1,w
  4033  07BA  01F8               	clrf	memcpy@d
  4034  07BB  07F8               	addwf	memcpy@d,f
  4035  07BC                     l3784:	
  4036  07BC  3001               	movlw	1
  4037  07BD  02F5               	subwf	memcpy@n,f
  4038  07BE  3000               	movlw	0
  4039  07BF  3BF6               	subwfb	memcpy@n+1,f
  4040  07C0  30FF               	movlw	255
  4041  07C1  0676               	xorwf	memcpy@n+1,w
  4042  07C2  1D03               	skipz
  4043  07C3  2FC6               	goto	u2275
  4044  07C4  30FF               	movlw	255
  4045  07C5  0675               	xorwf	memcpy@n,w
  4046  07C6                     u2275:	
  4047  07C6  1903               	btfsc	3,2
  4048  07C7  0008               	return
  4049  07C8  087A               	movf	memcpy@s,w
  4050  07C9  0084               	movwf	4
  4051  07CA  087B               	movf	memcpy@s+1,w
  4052  07CB  0085               	movwf	5
  4053  07CC  0800               	movf	0,w	;code access
  4054  07CD  00F7               	movwf	??_memcpy
  4055  07CE  0878               	movf	memcpy@d,w
  4056  07CF  0086               	movwf	6
  4057  07D0  0879               	movf	memcpy@d+1,w
  4058  07D1  0087               	movwf	7
  4059  07D2  0877               	movf	??_memcpy,w
  4060  07D3  0081               	movwf	1
  4061  07D4  3001               	movlw	1
  4062  07D5  07FA               	addwf	memcpy@s,f
  4063  07D6  3000               	movlw	0
  4064  07D7  3DFB               	addwfc	memcpy@s+1,f
  4065  07D8  3001               	movlw	1
  4066  07D9  07F8               	addwf	memcpy@d,f
  4067  07DA  3000               	movlw	0
  4068  07DB  3DF9               	addwfc	memcpy@d+1,f
  4069  07DC  2FBC               	goto	l3784
  4070  07DD                     __end_of_memcpy:	
  4071                           ;	Return value of _memcpy is never used
  4072                           
  4073                           
  4074                           	psect	text18
  4075  0677                     __ptext18:	
  4076 ;; *************** function _MCP3550_Read *****************
  4077 ;; Defined at:
  4078 ;;		line 22 in file "spi/spi_software.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  adc_data        1    wreg     PTR unsigned char 
  4081 ;;		 -> command_read_adc@adc_data(6), 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  adc_data        1    8[COMMON] PTR unsigned char 
  4084 ;;		 -> command_read_adc@adc_data(6), 
  4085 ;;  data_ready      1    7[COMMON] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      unsigned char 
  4088 ;; Registers used:
  4089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;Total ram usage:        3 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    4
  4102 ;; This function calls:
  4103 ;;		_SPIDelay
  4104 ;;		_Read2BytesSPI
  4105 ;; This function is called by:
  4106 ;;		_command_read_adc
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _MCP3550_Read
  4112  0677                     _MCP3550_Read:	
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _MCP3550_Read: [allreg]
  4116                           ;MCP3550_Read@adc_data stored from wreg
  4117  0677  00F8               	movwf	MCP3550_Read@adc_data
  4118                           
  4119                           ;spi_software.c: 23: uint8_t data_ready = 0;
  4120  0678  01F7               	clrf	MCP3550_Read@data_ready
  4121                           
  4122                           ;spi_software.c: 25: LATCbits.LATC3 = 0;
  4123  0679  0022               	movlb	2	; select bank2
  4124  067A  118E               	bcf	14,3	;volatile
  4125                           
  4126                           ;spi_software.c: 26: SPIDelay();
  4127  067B  318E  2620  3186   	fcall	_SPIDelay
  4128                           
  4129                           ;spi_software.c: 27: if(!PORTBbits.RB4)
  4130  067E  0020               	movlb	0	; select bank0
  4131  067F  1A0D               	btfsc	13,4	;volatile
  4132  0680  2EA9               	goto	l3416
  4133                           
  4134                           ;spi_software.c: 28: {
  4135                           ;spi_software.c: 29: Read2BytesSPI(adc_data,adc_data+3);
  4136  0681  0878               	movf	MCP3550_Read@adc_data,w
  4137  0682  3E03               	addlw	3
  4138  0683  00F6               	movwf	??_MCP3550_Read
  4139  0684  0876               	movf	??_MCP3550_Read,w
  4140  0685  00F2               	movwf	?_Read2BytesSPI
  4141  0686  0878               	movf	MCP3550_Read@adc_data,w
  4142  0687  3186  263D  3186   	fcall	_Read2BytesSPI
  4143                           
  4144                           ;spi_software.c: 30: Read2BytesSPI(adc_data+1,adc_data+4);
  4145  068A  0878               	movf	MCP3550_Read@adc_data,w
  4146  068B  3E04               	addlw	4
  4147  068C  00F6               	movwf	??_MCP3550_Read
  4148  068D  0876               	movf	??_MCP3550_Read,w
  4149  068E  00F2               	movwf	?_Read2BytesSPI
  4150  068F  0A78               	incf	MCP3550_Read@adc_data,w
  4151  0690  3186  263D  3186   	fcall	_Read2BytesSPI
  4152                           
  4153                           ;spi_software.c: 31: Read2BytesSPI(adc_data+2,adc_data+5);
  4154  0693  0878               	movf	MCP3550_Read@adc_data,w
  4155  0694  3E05               	addlw	5
  4156  0695  00F6               	movwf	??_MCP3550_Read
  4157  0696  0876               	movf	??_MCP3550_Read,w
  4158  0697  00F2               	movwf	?_Read2BytesSPI
  4159  0698  0878               	movf	MCP3550_Read@adc_data,w
  4160  0699  3E02               	addlw	2
  4161  069A  3186  263D  3186   	fcall	_Read2BytesSPI
  4162                           
  4163                           ;spi_software.c: 32: data_ready = 1;
  4164  069D  01F7               	clrf	MCP3550_Read@data_ready
  4165  069E  0AF7               	incf	MCP3550_Read@data_ready,f
  4166                           
  4167                           ;spi_software.c: 34: LATCbits.LATC3 = 1;
  4168  069F  0022               	movlb	2	; select bank2
  4169  06A0  158E               	bsf	14,3	;volatile
  4170                           
  4171                           ;spi_software.c: 35: SPIDelay();
  4172  06A1  318E  2620  3186   	fcall	_SPIDelay
  4173                           
  4174                           ;spi_software.c: 36: LATCbits.LATC3 = 0;
  4175  06A4  0022               	movlb	2	; select bank2
  4176  06A5  118E               	bcf	14,3	;volatile
  4177                           
  4178                           ;spi_software.c: 37: SPIDelay();
  4179  06A6  318E  2620  3186   	fcall	_SPIDelay
  4180  06A9                     l3416:	
  4181                           
  4182                           ;spi_software.c: 38: }
  4183                           ;spi_software.c: 39: LATCbits.LATC3 = 1;
  4184  06A9  0022               	movlb	2	; select bank2
  4185  06AA  158E               	bsf	14,3	;volatile
  4186                           
  4187                           ;spi_software.c: 40: SPIDelay();
  4188  06AB  318E  2620         	fcall	_SPIDelay
  4189                           
  4190                           ;spi_software.c: 41: return data_ready;
  4191  06AD  0877               	movf	MCP3550_Read@data_ready,w
  4192  06AE  0008               	return
  4193  06AF                     __end_of_MCP3550_Read:	
  4194                           
  4195                           	psect	text19
  4196  063D                     __ptext19:	
  4197 ;; *************** function _Read2BytesSPI *****************
  4198 ;; Defined at:
  4199 ;;		line 132 in file "spi/spi_software.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;  data1_byte      1    wreg     PTR unsigned char 
  4202 ;;		 -> command_read_adc@adc_data(6), 
  4203 ;;  data2_byte      1    2[COMMON] PTR unsigned char 
  4204 ;;		 -> command_read_adc@adc_data(6), 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  data1_byte      1    5[COMMON] PTR unsigned char 
  4207 ;;		 -> command_read_adc@adc_data(6), 
  4208 ;;  bit_counter     1    4[COMMON] unsigned char 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;		None               void
  4211 ;; Registers used:
  4212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        4 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    3
  4225 ;; This function calls:
  4226 ;;		_ClockPulse
  4227 ;; This function is called by:
  4228 ;;		_MCP3550_Read
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _Read2BytesSPI
  4234  063D                     _Read2BytesSPI:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _Read2BytesSPI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4238                           ;Read2BytesSPI@data1_byte stored from wreg
  4239  063D  00F5               	movwf	Read2BytesSPI@data1_byte
  4240                           
  4241                           ;spi_software.c: 133: *data1_byte = 0;
  4242  063E  0875               	movf	Read2BytesSPI@data1_byte,w
  4243  063F  0086               	movwf	6
  4244  0640  0187               	clrf	7
  4245  0641  0181               	clrf	1
  4246                           
  4247                           ;spi_software.c: 134: *data2_byte = 0;
  4248  0642  0872               	movf	Read2BytesSPI@data2_byte,w
  4249  0643  0086               	movwf	6
  4250  0644  0187               	clrf	7
  4251  0645  0181               	clrf	1
  4252                           
  4253                           ;spi_software.c: 135: uint8_t bit_counter = 8;
  4254  0646  3008               	movlw	8
  4255  0647  00F3               	movwf	??_Read2BytesSPI
  4256  0648  0873               	movf	??_Read2BytesSPI,w
  4257  0649  00F4               	movwf	Read2BytesSPI@bit_counter
  4258  064A                     l3430:	
  4259                           ;spi_software.c: 136: do
  4260                           
  4261                           
  4262                           ;spi_software.c: 137: {
  4263                           ;spi_software.c: 138: ClockPulse();
  4264  064A  318E  264C  3186   	fcall	_ClockPulse
  4265                           
  4266                           ;spi_software.c: 139: *data1_byte <<= 1;
  4267  064D  0875               	movf	Read2BytesSPI@data1_byte,w
  4268  064E  0086               	movwf	6
  4269  064F  0187               	clrf	7
  4270  0650  1003               	clrc
  4271  0651  0D81               	rlf	1,f
  4272                           
  4273                           ;spi_software.c: 140: *data2_byte <<= 1;
  4274  0652  0872               	movf	Read2BytesSPI@data2_byte,w
  4275  0653  0086               	movwf	6
  4276  0654  0187               	clrf	7
  4277  0655  1003               	clrc
  4278  0656  0D81               	rlf	1,f
  4279                           
  4280                           ;spi_software.c: 141: *data1_byte &= 0xFE;
  4281  0657  30FE               	movlw	254
  4282  0658  00F3               	movwf	??_Read2BytesSPI
  4283  0659  0875               	movf	Read2BytesSPI@data1_byte,w
  4284  065A  0086               	movwf	6
  4285  065B  0187               	clrf	7
  4286  065C  0873               	movf	??_Read2BytesSPI,w
  4287  065D  0581               	andwf	1,f
  4288                           
  4289                           ;spi_software.c: 142: *data2_byte &= 0xFE;
  4290  065E  30FE               	movlw	254
  4291  065F  00F3               	movwf	??_Read2BytesSPI
  4292  0660  0872               	movf	Read2BytesSPI@data2_byte,w
  4293  0661  0086               	movwf	6
  4294  0662  0187               	clrf	7
  4295  0663  0873               	movf	??_Read2BytesSPI,w
  4296  0664  0581               	andwf	1,f
  4297                           
  4298                           ;spi_software.c: 143: if(PORTBbits.RB4)
  4299  0665  0020               	movlb	0	; select bank0
  4300  0666  1E0D               	btfss	13,4	;volatile
  4301  0667  2E6C               	goto	l3444
  4302                           
  4303                           ;spi_software.c: 144: *data1_byte |= 0x01;
  4304  0668  0875               	movf	Read2BytesSPI@data1_byte,w
  4305  0669  0086               	movwf	6
  4306  066A  0187               	clrf	7
  4307  066B  1401               	bsf	1,0
  4308  066C                     l3444:	
  4309                           
  4310                           ;spi_software.c: 145: if(PORTCbits.RC7)
  4311  066C  1F8E               	btfss	14,7	;volatile
  4312  066D  2E72               	goto	l3448
  4313                           
  4314                           ;spi_software.c: 146: *data2_byte |= 0x01;
  4315  066E  0872               	movf	Read2BytesSPI@data2_byte,w
  4316  066F  0086               	movwf	6
  4317  0670  0187               	clrf	7
  4318  0671  1401               	bsf	1,0
  4319  0672                     l3448:	
  4320                           
  4321                           ;spi_software.c: 147: } while (--bit_counter);
  4322  0672  3001               	movlw	1
  4323  0673  02F4               	subwf	Read2BytesSPI@bit_counter,f
  4324  0674  1903               	btfsc	3,2
  4325  0675  0008               	return
  4326  0676  2E4A               	goto	l3430
  4327  0677                     __end_of_Read2BytesSPI:	
  4328                           
  4329                           	psect	text20
  4330  05FA                     __ptext20:	
  4331 ;; *************** function _command_calibrate_dac *****************
  4332 ;; Defined at:
  4333 ;;		line 184 in file "main.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  data            6    6[BANK0 ] unsigned char [6]
  4338 ;; Return value:  Size  Location     Type
  4339 ;;		None               void
  4340 ;; Registers used:
  4341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;Total ram usage:        9 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    6
  4354 ;; This function calls:
  4355 ;;		_HEFLASH_writeBlock
  4356 ;;		_DAC1220_Read3Bytes
  4357 ;;		_DAC1220_SelfCal
  4358 ;;		_send_OK
  4359 ;; This function is called by:
  4360 ;;		_interpret_command
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _command_calibrate_dac
  4366  05FA                     _command_calibrate_dac:	
  4367                           
  4368                           ;main.c: 185: DAC1220_SelfCal();
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _command_calibrate_dac: [allreg]
  4372  05FA  318E  2661  3185   	fcall	_DAC1220_SelfCal
  4373                           
  4374                           ;main.c: 186: _delay((unsigned long)((500)*(48000000/4000.0)));
  4375  05FD  301F               	movlw	31
  4376  05FE  0020               	movlb	0	; select bank0
  4377  05FF  00E1               	movwf	??_command_calibrate_dac+2
  4378  0600  3071               	movlw	113
  4379  0601  00E0               	movwf	??_command_calibrate_dac+1
  4380  0602  303B               	movlw	59
  4381  0603  00DF               	movwf	??_command_calibrate_dac
  4382  0604                     u4067:	
  4383  0604  0BDF               	decfsz	??_command_calibrate_dac,f
  4384  0605  2E04               	goto	u4067
  4385  0606  0BE0               	decfsz	??_command_calibrate_dac+1,f
  4386  0607  2E04               	goto	u4067
  4387  0608  0BE1               	decfsz	??_command_calibrate_dac+2,f
  4388  0609  2E04               	goto	u4067
  4389  060A  0000               	nop
  4390                           
  4391                           ;main.c: 187: uint8_t data[6];
  4392                           ;main.c: 188: DAC1220_Read3Bytes(8, data, data+1, data+2);
  4393  060B  3062               	movlw	command_calibrate_dac@data& (0+255)
  4394  060C  0020               	movlb	0	; select bank0
  4395  060D  00DF               	movwf	??_command_calibrate_dac
  4396  060E  085F               	movf	??_command_calibrate_dac,w
  4397  060F  00F5               	movwf	?_DAC1220_Read3Bytes
  4398  0610  3063               	movlw	(command_calibrate_dac@data+1)& (0+255)
  4399  0611  00E0               	movwf	??_command_calibrate_dac+1
  4400  0612  0860               	movf	??_command_calibrate_dac+1,w
  4401  0613  00F6               	movwf	?_DAC1220_Read3Bytes+1
  4402  0614  3064               	movlw	(command_calibrate_dac@data+2)& (0+255)
  4403  0615  00E1               	movwf	??_command_calibrate_dac+2
  4404  0616  0861               	movf	??_command_calibrate_dac+2,w
  4405  0617  00F7               	movwf	?_DAC1220_Read3Bytes+2
  4406  0618  3008               	movlw	8
  4407  0619  3187  2750  3185   	fcall	_DAC1220_Read3Bytes
  4408                           
  4409                           ;main.c: 189: DAC1220_Read3Bytes(12, data+3, data+4, data+5);
  4410  061C  3065               	movlw	(command_calibrate_dac@data+3)& (0+255)
  4411  061D  0020               	movlb	0	; select bank0
  4412  061E  00DF               	movwf	??_command_calibrate_dac
  4413  061F  085F               	movf	??_command_calibrate_dac,w
  4414  0620  00F5               	movwf	?_DAC1220_Read3Bytes
  4415  0621  3066               	movlw	(command_calibrate_dac@data+4)& (0+255)
  4416  0622  00E0               	movwf	??_command_calibrate_dac+1
  4417  0623  0860               	movf	??_command_calibrate_dac+1,w
  4418  0624  00F6               	movwf	?_DAC1220_Read3Bytes+1
  4419  0625  3067               	movlw	(command_calibrate_dac@data+5)& (0+255)
  4420  0626  00E1               	movwf	??_command_calibrate_dac+2
  4421  0627  0861               	movf	??_command_calibrate_dac+2,w
  4422  0628  00F7               	movwf	?_DAC1220_Read3Bytes+2
  4423  0629  300C               	movlw	12
  4424  062A  3187  2750  3185   	fcall	_DAC1220_Read3Bytes
  4425                           
  4426                           ;main.c: 190: HEFLASH_writeBlock(2, data, 6);
  4427  062D  3062               	movlw	low command_calibrate_dac@data
  4428  062E  00F7               	movwf	?_HEFLASH_writeBlock
  4429  062F  3000               	movlw	high command_calibrate_dac@data
  4430  0630  00F8               	movwf	?_HEFLASH_writeBlock+1
  4431  0631  3006               	movlw	6
  4432  0632  0020               	movlb	0	; select bank0
  4433  0633  00DF               	movwf	??_command_calibrate_dac
  4434  0634  085F               	movf	??_command_calibrate_dac,w
  4435  0635  00F9               	movwf	?_HEFLASH_writeBlock+2
  4436  0636  3002               	movlw	2
  4437  0637  3185  2554  3185   	fcall	_HEFLASH_writeBlock
  4438                           
  4439                           ;main.c: 191: send_OK();
  4440  063A  318F  27C2         	fcall	_send_OK
  4441  063C  0008               	return
  4442  063D                     __end_of_command_calibrate_dac:	
  4443                           
  4444                           	psect	text21
  4445  0E61                     __ptext21:	
  4446 ;; *************** function _DAC1220_SelfCal *****************
  4447 ;; Defined at:
  4448 ;;		line 127 in file "spi/spi_software.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;		None
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;		None               void
  4455 ;; Registers used:
  4456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;Total ram usage:        2 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    5
  4469 ;; This function calls:
  4470 ;;		_DAC1220_Write2Bytes
  4471 ;; This function is called by:
  4472 ;;		_command_calibrate_dac
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _DAC1220_SelfCal
  4478  0E61                     _DAC1220_SelfCal:	
  4479                           
  4480                           ;spi_software.c: 128: DAC1220_Write2Bytes(4, 32, 161);
  4481                           
  4482                           ;incstack = 0
  4483                           ; Regs used in _DAC1220_SelfCal: [allreg]
  4484  0E61  3020               	movlw	32
  4485  0E62  00F8               	movwf	??_DAC1220_SelfCal
  4486  0E63  0878               	movf	??_DAC1220_SelfCal,w
  4487  0E64  00F5               	movwf	?_DAC1220_Write2Bytes
  4488  0E65  30A1               	movlw	161
  4489  0E66  00F9               	movwf	??_DAC1220_SelfCal+1
  4490  0E67  0879               	movf	??_DAC1220_SelfCal+1,w
  4491  0E68  00F6               	movwf	?_DAC1220_Write2Bytes+1
  4492  0E69  3004               	movlw	4
  4493  0E6A  318F  2787         	fcall	_DAC1220_Write2Bytes
  4494  0E6C  0008               	return
  4495  0E6D                     __end_of_DAC1220_SelfCal:	
  4496                           
  4497                           	psect	text22
  4498  0750                     __ptext22:	
  4499 ;; *************** function _DAC1220_Read3Bytes *****************
  4500 ;; Defined at:
  4501 ;;		line 106 in file "spi/spi_software.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  address         1    wreg     const unsigned char 
  4504 ;;  byte1           1    5[COMMON] PTR unsigned char 
  4505 ;;		 -> command_calibrate_dac@data(6), 
  4506 ;;  byte2           1    6[COMMON] PTR unsigned char 
  4507 ;;		 -> command_calibrate_dac@data(6), 
  4508 ;;  byte3           1    7[COMMON] PTR unsigned char 
  4509 ;;		 -> command_calibrate_dac@data(6), 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  address         1    9[COMMON] const unsigned char 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        5 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    4
  4528 ;; This function calls:
  4529 ;;		_SPIDelay
  4530 ;;		_WriteByteSPI
  4531 ;;		_ReadByteSPI
  4532 ;; This function is called by:
  4533 ;;		_command_calibrate_dac
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _DAC1220_Read3Bytes
  4539  0750                     _DAC1220_Read3Bytes:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _DAC1220_Read3Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4543                           ;DAC1220_Read3Bytes@address stored from wreg
  4544  0750  00F9               	movwf	DAC1220_Read3Bytes@address
  4545                           
  4546                           ;spi_software.c: 107: LATBbits.LATB6 = 0;
  4547  0751  0022               	movlb	2	; select bank2
  4548  0752  130D               	bcf	13,6	;volatile
  4549                           
  4550                           ;spi_software.c: 108: SPIDelay();
  4551  0753  318E  2620  3187   	fcall	_SPIDelay
  4552                           
  4553                           ;spi_software.c: 109: TRISBbits.TRISB4 = 0;
  4554  0756  0021               	movlb	1	; select bank1
  4555  0757  120D               	bcf	13,4	;volatile
  4556                           
  4557                           ;spi_software.c: 110: WriteByteSPI(192+address);
  4558  0758  0879               	movf	DAC1220_Read3Bytes@address,w
  4559  0759  3EC0               	addlw	192
  4560  075A  318F  276D  3187   	fcall	_WriteByteSPI
  4561                           
  4562                           ;spi_software.c: 111: TRISBbits.TRISB4 = 1;
  4563  075D  0021               	movlb	1	; select bank1
  4564  075E  160D               	bsf	13,4	;volatile
  4565                           
  4566                           ;spi_software.c: 112: SPIDelay();
  4567  075F  318E  2620  3187   	fcall	_SPIDelay
  4568                           
  4569                           ;spi_software.c: 113: *byte1 = ReadByteSPI();
  4570  0762  3180  20E9  3187   	fcall	_ReadByteSPI
  4571  0765  00F8               	movwf	??_DAC1220_Read3Bytes
  4572  0766  0875               	movf	DAC1220_Read3Bytes@byte1,w
  4573  0767  0086               	movwf	6
  4574  0768  0187               	clrf	7
  4575  0769  0878               	movf	??_DAC1220_Read3Bytes,w
  4576  076A  0081               	movwf	1
  4577                           
  4578                           ;spi_software.c: 114: *byte2 = ReadByteSPI();
  4579  076B  3180  20E9  3187   	fcall	_ReadByteSPI
  4580  076E  00F8               	movwf	??_DAC1220_Read3Bytes
  4581  076F  0876               	movf	DAC1220_Read3Bytes@byte2,w
  4582  0770  0086               	movwf	6
  4583  0771  0187               	clrf	7
  4584  0772  0878               	movf	??_DAC1220_Read3Bytes,w
  4585  0773  0081               	movwf	1
  4586                           
  4587                           ;spi_software.c: 115: *byte3 = ReadByteSPI();
  4588  0774  3180  20E9  3187   	fcall	_ReadByteSPI
  4589  0777  00F8               	movwf	??_DAC1220_Read3Bytes
  4590  0778  0877               	movf	DAC1220_Read3Bytes@byte3,w
  4591  0779  0086               	movwf	6
  4592  077A  0187               	clrf	7
  4593  077B  0878               	movf	??_DAC1220_Read3Bytes,w
  4594  077C  0081               	movwf	1
  4595                           
  4596                           ;spi_software.c: 116: LATBbits.LATB6 = 1;
  4597  077D  0022               	movlb	2	; select bank2
  4598  077E  170D               	bsf	13,6	;volatile
  4599                           
  4600                           ;spi_software.c: 117: SPIDelay();
  4601  077F  318E  2620         	fcall	_SPIDelay
  4602  0781  0008               	return
  4603  0782                     __end_of_DAC1220_Read3Bytes:	
  4604                           
  4605                           	psect	text23
  4606  00E9                     __ptext23:	
  4607 ;; *************** function _ReadByteSPI *****************
  4608 ;; Defined at:
  4609 ;;		line 151 in file "spi/spi_software.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  data_byte       1    4[COMMON] unsigned char 
  4614 ;;  bit_counter     1    3[COMMON] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      unsigned char 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, pclath, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;Total ram usage:        3 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    3
  4631 ;; This function calls:
  4632 ;;		_ClockPulse
  4633 ;; This function is called by:
  4634 ;;		_DAC1220_Read3Bytes
  4635 ;;		_DAC1220_Read2Bytes
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           
  4640                           ;psect for function _ReadByteSPI
  4641  00E9                     _ReadByteSPI:	
  4642                           
  4643                           ;spi_software.c: 152: uint8_t data_byte = 0;
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in _ReadByteSPI: [wreg+status,2+status,0+pclath+cstack]
  4647  00E9  01F4               	clrf	ReadByteSPI@data_byte
  4648                           
  4649                           ;spi_software.c: 153: uint8_t bit_counter = 8;
  4650  00EA  3008               	movlw	8
  4651  00EB  00F2               	movwf	??_ReadByteSPI
  4652  00EC  0872               	movf	??_ReadByteSPI,w
  4653  00ED  00F3               	movwf	ReadByteSPI@bit_counter
  4654  00EE                     l3532:	
  4655                           ;spi_software.c: 154: do
  4656                           
  4657                           
  4658                           ;spi_software.c: 155: {
  4659                           ;spi_software.c: 156: ClockPulse();
  4660  00EE  318E  264C  3180   	fcall	_ClockPulse
  4661                           
  4662                           ;spi_software.c: 157: data_byte <<= 1;
  4663  00F1  1003               	clrc
  4664  00F2  0DF4               	rlf	ReadByteSPI@data_byte,f
  4665                           
  4666                           ;spi_software.c: 158: data_byte &= 0xFE;
  4667  00F3  30FE               	movlw	254
  4668  00F4  00F2               	movwf	??_ReadByteSPI
  4669  00F5  0872               	movf	??_ReadByteSPI,w
  4670  00F6  05F4               	andwf	ReadByteSPI@data_byte,f
  4671                           
  4672                           ;spi_software.c: 159: if(PORTBbits.RB4)
  4673  00F7  0020               	movlb	0	; select bank0
  4674  00F8  1A0D               	btfsc	13,4	;volatile
  4675                           
  4676                           ;spi_software.c: 160: data_byte |= 0x01;
  4677  00F9  1474               	bsf	ReadByteSPI@data_byte,0
  4678                           
  4679                           ;spi_software.c: 161: } while (--bit_counter);
  4680  00FA  3001               	movlw	1
  4681  00FB  02F3               	subwf	ReadByteSPI@bit_counter,f
  4682  00FC  1D03               	btfss	3,2
  4683  00FD  28EE               	goto	l3532
  4684                           
  4685                           ;spi_software.c: 162: return data_byte;
  4686  00FE  0874               	movf	ReadByteSPI@data_byte,w
  4687  00FF  0008               	return
  4688  0100                     __end_of_ReadByteSPI:	
  4689                           
  4690                           	psect	text24
  4691  0554                     __ptext24:	
  4692 ;; *************** function _HEFLASH_writeBlock *****************
  4693 ;; Defined at:
  4694 ;;		line 18 in file "heflash/HEFlash.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;  radd            1    wreg     unsigned char 
  4697 ;;  data            2    7[COMMON] PTR const unsigned char 
  4698 ;;		 -> command_calibrate_dac@data(6), ROM(8192), 
  4699 ;;  count           1    9[COMMON] unsigned char 
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;  radd            1    0[BANK0 ] unsigned char 
  4702 ;;  add             2    1[BANK0 ] unsigned int 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      unsigned char 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        8 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    3
  4719 ;; This function calls:
  4720 ;;		_FLASH_write
  4721 ;;		_FLASH_erase
  4722 ;; This function is called by:
  4723 ;;		_command_calibrate_dac
  4724 ;;		_command_save_offset
  4725 ;;		_command_save_shuntcalibration
  4726 ;;		_command_set_dac_cal
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _HEFLASH_writeBlock
  4732  0554                     _HEFLASH_writeBlock:	
  4733                           
  4734                           ;incstack = 0
  4735                           ; Regs used in _HEFLASH_writeBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4736                           ;HEFLASH_writeBlock@radd stored from wreg
  4737  0554  0020               	movlb	0	; select bank0
  4738  0555  00DC               	movwf	HEFLASH_writeBlock@radd
  4739                           
  4740                           ;HEFlash.c: 20: unsigned add = radd * 32 + 0x1F80;
  4741  0556  085C               	movf	HEFLASH_writeBlock@radd,w
  4742  0557  00FA               	movwf	??_HEFLASH_writeBlock
  4743  0558  01FB               	clrf	??_HEFLASH_writeBlock+1
  4744  0559  3005               	movlw	5
  4745  055A                     u1875:	
  4746  055A  35FA               	lslf	??_HEFLASH_writeBlock,f
  4747  055B  0DFB               	rlf	??_HEFLASH_writeBlock+1,f
  4748  055C  0B89               	decfsz	9,f
  4749  055D  2D5A               	goto	u1875
  4750  055E  087A               	movf	??_HEFLASH_writeBlock,w
  4751  055F  3E80               	addlw	128
  4752  0560  00DD               	movwf	HEFLASH_writeBlock@add
  4753  0561  301F               	movlw	31
  4754  0562  3D7B               	addwfc	??_HEFLASH_writeBlock+1,w
  4755  0563  00DE               	movwf	HEFLASH_writeBlock@add+1
  4756                           
  4757                           ;HEFlash.c: 23: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  4758  0564  3021               	movlw	33
  4759  0565  0279               	subwf	HEFLASH_writeBlock@count,w
  4760  0566  1803               	skipnc
  4761  0567  0008               	return
  4762  0568  3004               	movlw	4
  4763  0569  025C               	subwf	HEFLASH_writeBlock@radd,w
  4764  056A  1803               	btfsc	3,0
  4765  056B  0008               	return
  4766                           
  4767                           ;HEFlash.c: 27: FLASH_erase( add);
  4768                           
  4769                           ;HEFlash.c: 24: return -1;
  4770                           ;	Return value of _HEFLASH_writeBlock is never used
  4771  056C  085E               	movf	HEFLASH_writeBlock@add+1,w
  4772  056D  01F2               	clrf	?_FLASH_erase+1
  4773  056E  07F2               	addwf	?_FLASH_erase+1,f
  4774  056F  085D               	movf	HEFLASH_writeBlock@add,w
  4775  0570  01F1               	clrf	?_FLASH_erase
  4776  0571  07F1               	addwf	?_FLASH_erase,f
  4777  0572  318F  273B  3185   	fcall	_FLASH_erase
  4778  0575                     l3364:	
  4779                           ;HEFlash.c: 30: while( count > 1)
  4780                           
  4781  0575  3002               	movlw	2
  4782  0576  0279               	subwf	HEFLASH_writeBlock@count,w
  4783  0577  1C03               	btfss	3,0
  4784  0578  2D9C               	goto	l3366
  4785                           
  4786                           ;HEFlash.c: 31: {
  4787                           ;HEFlash.c: 33: FLASH_write( add++, (unsigned) *data++, 1);
  4788  0579  0020               	movlb	0	; select bank0
  4789  057A  085E               	movf	HEFLASH_writeBlock@add+1,w
  4790  057B  01F2               	clrf	?_FLASH_write+1
  4791  057C  07F2               	addwf	?_FLASH_write+1,f
  4792  057D  085D               	movf	HEFLASH_writeBlock@add,w
  4793  057E  01F1               	clrf	?_FLASH_write
  4794  057F  07F1               	addwf	?_FLASH_write,f
  4795  0580  0877               	movf	HEFLASH_writeBlock@data,w
  4796  0581  0084               	movwf	4
  4797  0582  0878               	movf	HEFLASH_writeBlock@data+1,w
  4798  0583  0085               	movwf	5
  4799  0584  0800               	movf	0,w	;code access
  4800  0585  00FA               	movwf	??_HEFLASH_writeBlock
  4801  0586  01FB               	clrf	??_HEFLASH_writeBlock+1
  4802  0587  087A               	movf	??_HEFLASH_writeBlock,w
  4803  0588  00F3               	movwf	?_FLASH_write+2
  4804  0589  087B               	movf	??_HEFLASH_writeBlock+1,w
  4805  058A  00F4               	movwf	?_FLASH_write+3
  4806  058B  01F5               	clrf	?_FLASH_write+4
  4807  058C  0AF5               	incf	?_FLASH_write+4,f
  4808  058D  3182  22DD  3185   	fcall	_FLASH_write
  4809  0590  3001               	movlw	1
  4810  0591  07F7               	addwf	HEFLASH_writeBlock@data,f
  4811  0592  3000               	movlw	0
  4812  0593  3DF8               	addwfc	HEFLASH_writeBlock@data+1,f
  4813  0594  3001               	movlw	1
  4814  0595  0020               	movlb	0	; select bank0
  4815  0596  07DD               	addwf	HEFLASH_writeBlock@add,f
  4816  0597  3000               	movlw	0
  4817  0598  3DDE               	addwfc	HEFLASH_writeBlock@add+1,f
  4818                           
  4819                           ;HEFlash.c: 34: count--;
  4820  0599  3001               	movlw	1
  4821  059A  02F9               	subwf	HEFLASH_writeBlock@count,f
  4822  059B  2D75               	goto	l3364
  4823  059C                     l3366:	
  4824                           
  4825                           ;HEFlash.c: 35: }
  4826                           ;HEFlash.c: 39: FLASH_write( add, (unsigned) *data, 0);
  4827  059C  0020               	movlb	0	; select bank0
  4828  059D  085E               	movf	HEFLASH_writeBlock@add+1,w
  4829  059E  01F2               	clrf	?_FLASH_write+1
  4830  059F  07F2               	addwf	?_FLASH_write+1,f
  4831  05A0  085D               	movf	HEFLASH_writeBlock@add,w
  4832  05A1  01F1               	clrf	?_FLASH_write
  4833  05A2  07F1               	addwf	?_FLASH_write,f
  4834  05A3  0877               	movf	HEFLASH_writeBlock@data,w
  4835  05A4  0084               	movwf	4
  4836  05A5  0878               	movf	HEFLASH_writeBlock@data+1,w
  4837  05A6  0085               	movwf	5
  4838  05A7  0800               	movf	0,w	;code access
  4839  05A8  00FA               	movwf	??_HEFLASH_writeBlock
  4840  05A9  01FB               	clrf	??_HEFLASH_writeBlock+1
  4841  05AA  087A               	movf	??_HEFLASH_writeBlock,w
  4842  05AB  00F3               	movwf	?_FLASH_write+2
  4843  05AC  087B               	movf	??_HEFLASH_writeBlock+1,w
  4844  05AD  00F4               	movwf	?_FLASH_write+3
  4845  05AE  01F5               	clrf	?_FLASH_write+4
  4846  05AF  3182  22DD         	fcall	_FLASH_write
  4847                           
  4848                           ;HEFlash.c: 44: return PMCON1bits.WRERR;
  4849                           ;	Return value of _HEFLASH_writeBlock is never used
  4850  05B1  0023               	movlb	3	; select bank3
  4851  05B2  0815               	movf	21,w	;volatile
  4852  05B3  0008               	return
  4853  05B4                     __end_of_HEFLASH_writeBlock:	
  4854                           
  4855                           	psect	text25
  4856  0F3B                     __ptext25:	
  4857 ;; *************** function _FLASH_erase *****************
  4858 ;; Defined at:
  4859 ;;		line 100 in file "heflash/Flash.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  address         2    1[COMMON] unsigned int 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  temp            1    3[COMMON] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;		None               void
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0, pclath, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;Total ram usage:        3 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    2
  4880 ;; This function calls:
  4881 ;;		__unlock
  4882 ;; This function is called by:
  4883 ;;		_HEFLASH_writeBlock
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _FLASH_erase
  4889  0F3B                     _FLASH_erase:	
  4890                           
  4891                           ;Flash.c: 102: char temp = INTCONbits.GIE;
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _FLASH_erase: [wreg+status,2+status,0+pclath+cstack]
  4895  0F3B  3000               	movlw	0
  4896  0F3C  1B8B               	btfsc	11,7	;volatile
  4897  0F3D  3001               	movlw	1
  4898  0F3E  00F3               	movwf	FLASH_erase@temp
  4899                           
  4900                           ;Flash.c: 103: INTCONbits.GIE = 0;
  4901  0F3F  138B               	bcf	11,7	;volatile
  4902                           
  4903                           ;Flash.c: 107: PMADR = address;
  4904  0F40  0872               	movf	FLASH_erase@address+1,w
  4905  0F41  0023               	movlb	3	; select bank3
  4906  0F42  0192               	clrf	18	;volatile
  4907  0F43  0792               	addwf	18,f	;volatile
  4908  0F44  0871               	movf	FLASH_erase@address,w
  4909  0F45  0191               	clrf	17	;volatile
  4910  0F46  0791               	addwf	17,f	;volatile
  4911                           
  4912                           ;Flash.c: 108: PMCON1bits.CFGS = 0;
  4913  0F47  1315               	bcf	21,6	;volatile
  4914                           
  4915                           ;Flash.c: 109: PMCON1bits.FREE = 1;
  4916  0F48  1615               	bsf	21,4	;volatile
  4917                           
  4918                           ;Flash.c: 110: PMCON1bits.WREN = 1;
  4919  0F49  1515               	bsf	21,2	;volatile
  4920                           
  4921                           ;Flash.c: 113: _unlock();
  4922  0F4A  318E  2643  318F   	fcall	__unlock
  4923                           
  4924                           ;Flash.c: 116: PMCON1bits.WREN = 0;
  4925  0F4D  0023               	movlb	3	; select bank3
  4926  0F4E  1115               	bcf	21,2	;volatile
  4927                           
  4928                           ;Flash.c: 117: if ( temp)
  4929  0F4F  0873               	movf	FLASH_erase@temp,w
  4930  0F50  1903               	btfsc	3,2
  4931  0F51  0008               	return
  4932                           
  4933                           ;Flash.c: 118: INTCONbits.GIE = 1;
  4934  0F52  178B               	bsf	11,7	;volatile
  4935  0F53  0008               	return
  4936  0F54                     __end_of_FLASH_erase:	
  4937                           
  4938                           	psect	text26
  4939  02DD                     __ptext26:	
  4940 ;; *************** function _FLASH_write *****************
  4941 ;; Defined at:
  4942 ;;		line 76 in file "heflash/Flash.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  address         2    1[COMMON] unsigned int 
  4945 ;;  data            2    3[COMMON] unsigned int 
  4946 ;;  latch           1    5[COMMON] unsigned char 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  temp            1    6[COMMON] unsigned char 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;		None               void
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, status,0, pclath, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4958 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;Total ram usage:        6 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:    2
  4965 ;; This function calls:
  4966 ;;		__unlock
  4967 ;; This function is called by:
  4968 ;;		_HEFLASH_writeBlock
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           
  4973                           ;psect for function _FLASH_write
  4974  02DD                     _FLASH_write:	
  4975                           
  4976                           ;Flash.c: 78: char temp = INTCONbits.GIE;
  4977                           
  4978                           ;incstack = 0
  4979                           ; Regs used in _FLASH_write: [wreg+status,2+status,0+pclath+cstack]
  4980  02DD  3000               	movlw	0
  4981  02DE  1B8B               	btfsc	11,7	;volatile
  4982  02DF  3001               	movlw	1
  4983  02E0  00F6               	movwf	FLASH_write@temp
  4984                           
  4985                           ;Flash.c: 79: INTCONbits.GIE = 0;
  4986  02E1  138B               	bcf	11,7	;volatile
  4987                           
  4988                           ;Flash.c: 82: PMADR = address;
  4989  02E2  0872               	movf	FLASH_write@address+1,w
  4990  02E3  0023               	movlb	3	; select bank3
  4991  02E4  0192               	clrf	18	;volatile
  4992  02E5  0792               	addwf	18,f	;volatile
  4993  02E6  0871               	movf	FLASH_write@address,w
  4994  02E7  0191               	clrf	17	;volatile
  4995  02E8  0791               	addwf	17,f	;volatile
  4996                           
  4997                           ;Flash.c: 83: PMDAT = data;
  4998  02E9  0874               	movf	FLASH_write@data+1,w
  4999  02EA  0194               	clrf	20	;volatile
  5000  02EB  0794               	addwf	20,f	;volatile
  5001  02EC  0873               	movf	FLASH_write@data,w
  5002  02ED  0193               	clrf	19	;volatile
  5003  02EE  0793               	addwf	19,f	;volatile
  5004                           
  5005                           ;Flash.c: 84: PMCON1bits.LWLO = latch;
  5006  02EF  0875               	movf	FLASH_write@latch,w
  5007  02F0  1D03               	skipz
  5008  02F1  1695               	bsf	21,5	;volatile
  5009  02F2  1903               	skipnz
  5010  02F3  1295               	bcf	21,5	;volatile
  5011                           
  5012                           ;Flash.c: 85: PMCON1bits.CFGS = 0;
  5013  02F4  1315               	bcf	21,6	;volatile
  5014                           
  5015                           ;Flash.c: 86: PMCON1bits.FREE = 0;
  5016  02F5  1215               	bcf	21,4	;volatile
  5017                           
  5018                           ;Flash.c: 87: PMCON1bits.WREN = 1;
  5019  02F6  1515               	bsf	21,2	;volatile
  5020                           
  5021                           ;Flash.c: 90: _unlock();
  5022  02F7  318E  2643  3182   	fcall	__unlock
  5023                           
  5024                           ;Flash.c: 93: if ( temp)
  5025  02FA  0876               	movf	FLASH_write@temp,w
  5026  02FB  1903               	btfsc	3,2
  5027  02FC  0008               	return
  5028                           
  5029                           ;Flash.c: 94: INTCONbits.GIE = 1;
  5030  02FD  178B               	bsf	11,7	;volatile
  5031  02FE  0008               	return
  5032  02FF                     __end_of_FLASH_write:	
  5033                           
  5034                           	psect	text27
  5035  0E43                     __ptext27:	
  5036 ;; *************** function __unlock *****************
  5037 ;; Defined at:
  5038 ;;		line 59 in file "heflash/Flash.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;		None               void
  5045 ;; Registers used:
  5046 ;;		None
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    1
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_FLASH_write
  5063 ;;		_FLASH_erase
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function __unlock
  5069  0E43                     __unlock:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in __unlock: []
  5073  0E43  0023               	banksel	406	;# 
  5074  0E44  3055               	movlw	85	;# 
  5075  0E45  0096               	movwf	22	;# 
  5076  0E46  30AA               	movlw	170	;# 
  5077  0E47  0096               	movwf	22	;# 
  5078  0E48  1495               	bsf	21,1	; set WR bit ;# 
  5079  0E49  0000               	nop	;# 
  5080  0E4A  0000               	nop	;# 
  5081  0E4B  0008               	return
  5082  0E4C                     __end_of__unlock:	
  5083                           
  5084                           	psect	text28
  5085  0782                     __ptext28:	
  5086 ;; *************** function _command_set_dac *****************
  5087 ;; Defined at:
  5088 ;;		line 178 in file "main.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  dac_data        2   10[COMMON] PTR const unsigned char 
  5091 ;;		 -> ROM(8192), 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;		None
  5094 ;; Return value:  Size  Location     Type
  5095 ;;		None               void
  5096 ;; Registers used:
  5097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5105 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5106 ;;      Totals:         2       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;Total ram usage:        9 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    5
  5110 ;; This function calls:
  5111 ;;		_DAC1220_Write3Bytes
  5112 ;;		_send_OK
  5113 ;; This function is called by:
  5114 ;;		_interpret_command
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function _command_set_dac
  5120  0782                     _command_set_dac:	
  5121                           
  5122                           ;main.c: 179: DAC1220_Write3Bytes(0, dac_data[0], dac_data[1], dac_data[2]);
  5123                           
  5124                           ;incstack = 0
  5125                           ; Regs used in _command_set_dac: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5126  0782  087A               	movf	command_set_dac@dac_data,w
  5127  0783  0084               	movwf	4
  5128  0784  087B               	movf	command_set_dac@dac_data+1,w
  5129  0785  0085               	movwf	5
  5130  0786  0800               	movf	0,w	;code access
  5131  0787  0020               	movlb	0	; select bank0
  5132  0788  00DC               	movwf	??_command_set_dac
  5133  0789  085C               	movf	??_command_set_dac,w
  5134  078A  00F5               	movwf	?_DAC1220_Write3Bytes
  5135  078B  087B               	movf	command_set_dac@dac_data+1,w
  5136  078C  00DE               	movwf	??_command_set_dac+2
  5137  078D  087A               	movf	command_set_dac@dac_data,w
  5138  078E  00DD               	movwf	??_command_set_dac+1
  5139  078F  3001               	movlw	1
  5140  0790  075D               	addwf	??_command_set_dac+1,w
  5141  0791  0084               	movwf	4
  5142  0792  085E               	movf	??_command_set_dac+2,w
  5143  0793  1803               	skipnc
  5144  0794  0A5E               	incf	??_command_set_dac+2,w
  5145  0795  0085               	movwf	5
  5146  0796  0800               	movf	0,w	;code access
  5147  0797  00DF               	movwf	??_command_set_dac+3
  5148  0798  085F               	movf	??_command_set_dac+3,w
  5149  0799  00F6               	movwf	?_DAC1220_Write3Bytes+1
  5150  079A  087B               	movf	command_set_dac@dac_data+1,w
  5151  079B  00E1               	movwf	??_command_set_dac+5
  5152  079C  087A               	movf	command_set_dac@dac_data,w
  5153  079D  00E0               	movwf	??_command_set_dac+4
  5154  079E  3002               	movlw	2
  5155  079F  0760               	addwf	??_command_set_dac+4,w
  5156  07A0  0084               	movwf	4
  5157  07A1  0861               	movf	??_command_set_dac+5,w
  5158  07A2  1803               	skipnc
  5159  07A3  0A61               	incf	??_command_set_dac+5,w
  5160  07A4  0085               	movwf	5
  5161  07A5  0800               	movf	0,w	;code access
  5162  07A6  00E2               	movwf	??_command_set_dac+6
  5163  07A7  0862               	movf	??_command_set_dac+6,w
  5164  07A8  00F7               	movwf	?_DAC1220_Write3Bytes+2
  5165  07A9  3000               	movlw	0
  5166  07AA  3180  20C9  3187   	fcall	_DAC1220_Write3Bytes
  5167                           
  5168                           ;main.c: 180: send_OK();
  5169  07AD  318F  27C2         	fcall	_send_OK
  5170  07AF  0008               	return
  5171  07B0                     __end_of_command_set_dac:	
  5172                           
  5173                           	psect	text29
  5174  0EB2                     __ptext29:	
  5175 ;; *************** function _command_range3 *****************
  5176 ;; Defined at:
  5177 ;;		line 169 in file "main.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;		None               void
  5184 ;; Registers used:
  5185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;Total ram usage:        2 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    4
  5198 ;; This function calls:
  5199 ;;		_send_OK
  5200 ;; This function is called by:
  5201 ;;		_interpret_command
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           
  5206                           ;psect for function _command_range3
  5207  0EB2                     _command_range3:	
  5208                           
  5209                           ;main.c: 170: LATCbits.LATC6 = 1;
  5210                           
  5211                           ;incstack = 0
  5212                           ; Regs used in _command_range3: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5213  0EB2  0022               	movlb	2	; select bank2
  5214  0EB3  170E               	bsf	14,6	;volatile
  5215                           
  5216                           ;main.c: 171: _delay((unsigned long)((10)*(48000000/4000.0)));
  5217  0EB4  309C               	movlw	156
  5218  0EB5  00FB               	movwf	??_command_range3+1
  5219  0EB6  30D7               	movlw	215
  5220  0EB7  00FA               	movwf	??_command_range3
  5221  0EB8                     u4077:	
  5222  0EB8  0BFA               	decfsz	??_command_range3,f
  5223  0EB9  2EB8               	goto	u4077
  5224  0EBA  0BFB               	decfsz	??_command_range3+1,f
  5225  0EBB  2EB8               	goto	u4077
  5226                           
  5227                           ;main.c: 172: LATCbits.LATC4 = 0;
  5228  0EBC  0022               	movlb	2	; select bank2
  5229  0EBD  120E               	bcf	14,4	;volatile
  5230                           
  5231                           ;main.c: 173: LATCbits.LATC5 = 0;
  5232  0EBE  128E               	bcf	14,5	;volatile
  5233                           
  5234                           ;main.c: 174: send_OK();
  5235  0EBF  318F  27C2         	fcall	_send_OK
  5236  0EC1  0008               	return
  5237  0EC2                     __end_of_command_range3:	
  5238                           
  5239                           	psect	text30
  5240  0EA2                     __ptext30:	
  5241 ;; *************** function _command_range2 *****************
  5242 ;; Defined at:
  5243 ;;		line 160 in file "main.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;		None               void
  5250 ;; Registers used:
  5251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5261 ;;Total ram usage:        2 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    4
  5264 ;; This function calls:
  5265 ;;		_send_OK
  5266 ;; This function is called by:
  5267 ;;		_interpret_command
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           
  5272                           ;psect for function _command_range2
  5273  0EA2                     _command_range2:	
  5274                           
  5275                           ;main.c: 161: LATCbits.LATC5 = 1;
  5276                           
  5277                           ;incstack = 0
  5278                           ; Regs used in _command_range2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5279  0EA2  0022               	movlb	2	; select bank2
  5280  0EA3  168E               	bsf	14,5	;volatile
  5281                           
  5282                           ;main.c: 162: _delay((unsigned long)((10)*(48000000/4000.0)));
  5283  0EA4  309C               	movlw	156
  5284  0EA5  00FB               	movwf	??_command_range2+1
  5285  0EA6  30D7               	movlw	215
  5286  0EA7  00FA               	movwf	??_command_range2
  5287  0EA8                     u4087:	
  5288  0EA8  0BFA               	decfsz	??_command_range2,f
  5289  0EA9  2EA8               	goto	u4087
  5290  0EAA  0BFB               	decfsz	??_command_range2+1,f
  5291  0EAB  2EA8               	goto	u4087
  5292                           
  5293                           ;main.c: 163: LATCbits.LATC4 = 0;
  5294  0EAC  0022               	movlb	2	; select bank2
  5295  0EAD  120E               	bcf	14,4	;volatile
  5296                           
  5297                           ;main.c: 164: LATCbits.LATC6 = 0;
  5298  0EAE  130E               	bcf	14,6	;volatile
  5299                           
  5300                           ;main.c: 165: send_OK();
  5301  0EAF  318F  27C2         	fcall	_send_OK
  5302  0EB1  0008               	return
  5303  0EB2                     __end_of_command_range2:	
  5304                           
  5305                           	psect	text31
  5306  0E92                     __ptext31:	
  5307 ;; *************** function _command_range1 *****************
  5308 ;; Defined at:
  5309 ;;		line 151 in file "main.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;		None               void
  5316 ;; Registers used:
  5317 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5318 ;; Tracked objects:
  5319 ;;		On entry : 0/0
  5320 ;;		On exit  : 0/0
  5321 ;;		Unchanged: 0/0
  5322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;Total ram usage:        2 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:    4
  5330 ;; This function calls:
  5331 ;;		_send_OK
  5332 ;; This function is called by:
  5333 ;;		_interpret_command
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _command_range1
  5339  0E92                     _command_range1:	
  5340                           
  5341                           ;main.c: 152: LATCbits.LATC4 = 1;
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _command_range1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5345  0E92  0022               	movlb	2	; select bank2
  5346  0E93  160E               	bsf	14,4	;volatile
  5347                           
  5348                           ;main.c: 153: _delay((unsigned long)((10)*(48000000/4000.0)));
  5349  0E94  309C               	movlw	156
  5350  0E95  00FB               	movwf	??_command_range1+1
  5351  0E96  30D7               	movlw	215
  5352  0E97  00FA               	movwf	??_command_range1
  5353  0E98                     u4097:	
  5354  0E98  0BFA               	decfsz	??_command_range1,f
  5355  0E99  2E98               	goto	u4097
  5356  0E9A  0BFB               	decfsz	??_command_range1+1,f
  5357  0E9B  2E98               	goto	u4097
  5358                           
  5359                           ;main.c: 154: LATCbits.LATC5 = 0;
  5360  0E9C  0022               	movlb	2	; select bank2
  5361  0E9D  128E               	bcf	14,5	;volatile
  5362                           
  5363                           ;main.c: 155: LATCbits.LATC6 = 0;
  5364  0E9E  130E               	bcf	14,6	;volatile
  5365                           
  5366                           ;main.c: 156: send_OK();
  5367  0E9F  318F  27C2         	fcall	_send_OK
  5368  0EA1  0008               	return
  5369  0EA2                     __end_of_command_range1:	
  5370                           
  5371                           	psect	text32
  5372  0E16                     __ptext32:	
  5373 ;; *************** function _command_mode_galvanostatic *****************
  5374 ;; Defined at:
  5375 ;;		line 145 in file "main.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;		None
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;		None
  5380 ;; Return value:  Size  Location     Type
  5381 ;;		None               void
  5382 ;; Registers used:
  5383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;Total ram usage:        0 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    4
  5396 ;; This function calls:
  5397 ;;		_send_OK
  5398 ;; This function is called by:
  5399 ;;		_interpret_command
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           
  5404                           ;psect for function _command_mode_galvanostatic
  5405  0E16                     _command_mode_galvanostatic:	
  5406                           
  5407                           ;main.c: 146: LATAbits.LATA5 = 1;
  5408                           
  5409                           ;incstack = 0
  5410                           ; Regs used in _command_mode_galvanostatic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5411  0E16  0022               	movlb	2	; select bank2
  5412  0E17  168C               	bsf	12,5	;volatile
  5413                           
  5414                           ;main.c: 147: send_OK();
  5415  0E18  318F  27C2         	fcall	_send_OK
  5416  0E1A  0008               	return
  5417  0E1B                     __end_of_command_mode_galvanostatic:	
  5418                           
  5419                           	psect	text33
  5420  0E11                     __ptext33:	
  5421 ;; *************** function _command_mode_potentiostatic *****************
  5422 ;; Defined at:
  5423 ;;		line 139 in file "main.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;		None               void
  5430 ;; Registers used:
  5431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    4
  5444 ;; This function calls:
  5445 ;;		_send_OK
  5446 ;; This function is called by:
  5447 ;;		_interpret_command
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function _command_mode_potentiostatic
  5453  0E11                     _command_mode_potentiostatic:	
  5454                           
  5455                           ;main.c: 140: LATAbits.LATA5 = 0;
  5456                           
  5457                           ;incstack = 0
  5458                           ; Regs used in _command_mode_potentiostatic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5459  0E11  0022               	movlb	2	; select bank2
  5460  0E12  128C               	bcf	12,5	;volatile
  5461                           
  5462                           ;main.c: 141: send_OK();
  5463  0E13  318F  27C2         	fcall	_send_OK
  5464  0E15  0008               	return
  5465  0E16                     __end_of_command_mode_potentiostatic:	
  5466                           
  5467                           	psect	text34
  5468  0E0C                     __ptext34:	
  5469 ;; *************** function _command_cell_off *****************
  5470 ;; Defined at:
  5471 ;;		line 133 in file "main.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;		None
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;Total ram usage:        0 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    4
  5492 ;; This function calls:
  5493 ;;		_send_OK
  5494 ;; This function is called by:
  5495 ;;		_interpret_command
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           
  5500                           ;psect for function _command_cell_off
  5501  0E0C                     _command_cell_off:	
  5502                           
  5503                           ;main.c: 134: LATAbits.LATA4 = 0;
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _command_cell_off: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5507  0E0C  0022               	movlb	2	; select bank2
  5508  0E0D  120C               	bcf	12,4	;volatile
  5509                           
  5510                           ;main.c: 135: send_OK();
  5511  0E0E  318F  27C2         	fcall	_send_OK
  5512  0E10  0008               	return
  5513  0E11                     __end_of_command_cell_off:	
  5514                           
  5515                           	psect	text35
  5516  0E07                     __ptext35:	
  5517 ;; *************** function _command_cell_on *****************
  5518 ;; Defined at:
  5519 ;;		line 127 in file "main.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;		None
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;		None               void
  5526 ;; Registers used:
  5527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;Total ram usage:        0 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    4
  5540 ;; This function calls:
  5541 ;;		_send_OK
  5542 ;; This function is called by:
  5543 ;;		_interpret_command
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _command_cell_on
  5549  0E07                     _command_cell_on:	
  5550                           
  5551                           ;main.c: 128: LATAbits.LATA4 = 1;
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _command_cell_on: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5555  0E07  0022               	movlb	2	; select bank2
  5556  0E08  160C               	bsf	12,4	;volatile
  5557                           
  5558                           ;main.c: 129: send_OK();
  5559  0E09  318F  27C2         	fcall	_send_OK
  5560  0E0B  0008               	return
  5561  0E0C                     __end_of_command_cell_on:	
  5562                           
  5563                           	psect	text36
  5564  0FC2                     __ptext36:	
  5565 ;; *************** function _send_OK *****************
  5566 ;; Defined at:
  5567 ;;		line 113 in file "main.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  reply           2    8[COMMON] PTR const unsigned char 
  5572 ;;		 -> STR_2(4), 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;		None               void
  5575 ;; Registers used:
  5576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;Total ram usage:        3 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    3
  5589 ;; This function calls:
  5590 ;;		_strlen
  5591 ;;		_USART_Send
  5592 ;; This function is called by:
  5593 ;;		_command_cell_on
  5594 ;;		_command_cell_off
  5595 ;;		_command_mode_potentiostatic
  5596 ;;		_command_mode_galvanostatic
  5597 ;;		_command_range1
  5598 ;;		_command_range2
  5599 ;;		_command_range3
  5600 ;;		_command_set_dac
  5601 ;;		_command_calibrate_dac
  5602 ;;		_command_save_offset
  5603 ;;		_command_save_shuntcalibration
  5604 ;;		_command_set_dac_cal
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _send_OK
  5610  0FC2                     _send_OK:	
  5611                           
  5612                           ;main.c: 114: const uint8_t* reply = "OK\n";
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _send_OK: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5616  0FC2  3069               	movlw	low (STR_2| (0+32768))
  5617  0FC3  00F8               	movwf	send_OK@reply
  5618  0FC4  3084               	movlw	high (STR_2| (0+32768))
  5619  0FC5  00F9               	movwf	send_OK@reply+1
  5620                           
  5621                           ;main.c: 115: transmit_data_length = strlen(reply);
  5622  0FC6  0879               	movf	send_OK@reply+1,w
  5623  0FC7  01F2               	clrf	?_strlen+1
  5624  0FC8  07F2               	addwf	?_strlen+1,f
  5625  0FC9  0878               	movf	send_OK@reply,w
  5626  0FCA  01F1               	clrf	?_strlen
  5627  0FCB  07F1               	addwf	?_strlen,f
  5628  0FCC  3180  20A8  318F   	fcall	_strlen
  5629  0FCF  0871               	movf	?_strlen,w
  5630  0FD0  00F7               	movwf	??_send_OK
  5631  0FD1  0877               	movf	??_send_OK,w
  5632  0FD2  0020               	movlb	0	; select bank0
  5633  0FD3  00C5               	movwf	_transmit_data_length
  5634                           
  5635                           ;main.c: 116: USART_Send(reply,transmit_data_length);
  5636  0FD4  0879               	movf	send_OK@reply+1,w
  5637  0FD5  01F3               	clrf	?_USART_Send+1
  5638  0FD6  07F3               	addwf	?_USART_Send+1,f
  5639  0FD7  0878               	movf	send_OK@reply,w
  5640  0FD8  01F2               	clrf	?_USART_Send
  5641  0FD9  07F2               	addwf	?_USART_Send,f
  5642  0FDA  0845               	movf	_transmit_data_length,w
  5643  0FDB  00F7               	movwf	??_send_OK
  5644  0FDC  0877               	movf	??_send_OK,w
  5645  0FDD  00F4               	movwf	?_USART_Send+2
  5646  0FDE  318F  2724         	fcall	_USART_Send
  5647  0FE0  0008               	return
  5648  0FE1                     __end_of_send_OK:	
  5649                           
  5650                           	psect	text37
  5651  0FA3                     __ptext37:	
  5652 ;; *************** function _command_unknown *****************
  5653 ;; Defined at:
  5654 ;;		line 105 in file "main.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;		None
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  reply           2    8[COMMON] PTR const unsigned char 
  5659 ;;		 -> STR_1(3), 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;		None               void
  5662 ;; Registers used:
  5663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5671 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5672 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5673 ;;Total ram usage:        3 bytes
  5674 ;; Hardware stack levels used:    1
  5675 ;; Hardware stack levels required when called:    3
  5676 ;; This function calls:
  5677 ;;		_strlen
  5678 ;;		_USART_Send
  5679 ;; This function is called by:
  5680 ;;		_interpret_command
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           
  5685                           ;psect for function _command_unknown
  5686  0FA3                     _command_unknown:	
  5687                           
  5688                           ;main.c: 106: const uint8_t *reply = "?\n";
  5689                           
  5690                           ;incstack = 0
  5691                           ; Regs used in _command_unknown: [allreg]
  5692  0FA3  306D               	movlw	low (STR_1| (0+32768))
  5693  0FA4  00F8               	movwf	command_unknown@reply
  5694  0FA5  3084               	movlw	high (STR_1| (0+32768))
  5695  0FA6  00F9               	movwf	command_unknown@reply+1
  5696                           
  5697                           ;main.c: 108: transmit_data_length = strlen(reply);
  5698  0FA7  0879               	movf	command_unknown@reply+1,w
  5699  0FA8  01F2               	clrf	?_strlen+1
  5700  0FA9  07F2               	addwf	?_strlen+1,f
  5701  0FAA  0878               	movf	command_unknown@reply,w
  5702  0FAB  01F1               	clrf	?_strlen
  5703  0FAC  07F1               	addwf	?_strlen,f
  5704  0FAD  3180  20A8  318F   	fcall	_strlen
  5705  0FB0  0871               	movf	?_strlen,w
  5706  0FB1  00F7               	movwf	??_command_unknown
  5707  0FB2  0877               	movf	??_command_unknown,w
  5708  0FB3  0020               	movlb	0	; select bank0
  5709  0FB4  00C5               	movwf	_transmit_data_length
  5710                           
  5711                           ;main.c: 109: USART_Send(reply,transmit_data_length);
  5712  0FB5  0879               	movf	command_unknown@reply+1,w
  5713  0FB6  01F3               	clrf	?_USART_Send+1
  5714  0FB7  07F3               	addwf	?_USART_Send+1,f
  5715  0FB8  0878               	movf	command_unknown@reply,w
  5716  0FB9  01F2               	clrf	?_USART_Send
  5717  0FBA  07F2               	addwf	?_USART_Send,f
  5718  0FBB  0845               	movf	_transmit_data_length,w
  5719  0FBC  00F7               	movwf	??_command_unknown
  5720  0FBD  0877               	movf	??_command_unknown,w
  5721  0FBE  00F4               	movwf	?_USART_Send+2
  5722  0FBF  318F  2724         	fcall	_USART_Send
  5723  0FC1  0008               	return
  5724  0FC2                     __end_of_command_unknown:	
  5725                           
  5726                           	psect	text38
  5727  0F24                     __ptext38:	
  5728 ;; *************** function _USART_Send *****************
  5729 ;; Defined at:
  5730 ;;		line 143 in file "eusart.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  dataToSend      2    2[COMMON] PTR const unsigned char 
  5733 ;;		 -> STR_3(6), STR_2(4), STR_1(3), 
  5734 ;;  dataLength      1    4[COMMON] unsigned char 
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;  i               1    6[COMMON] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;		None               void
  5739 ;; Registers used:
  5740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5746 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5750 ;;Total ram usage:        5 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    2
  5753 ;; This function calls:
  5754 ;;		_EUSART_Write
  5755 ;; This function is called by:
  5756 ;;		_command_unknown
  5757 ;;		_send_OK
  5758 ;;		_send_WAIT
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _USART_Send
  5764  0F24                     _USART_Send:	
  5765                           
  5766                           ;eusart.c: 145: if(EUSART_is_tx_ready)
  5767                           
  5768                           ;incstack = 0
  5769                           ; Regs used in _USART_Send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5770  0F24  01F6               	clrf	USART_Send@i
  5771                           
  5772                           ;eusart.c: 146: {
  5773                           ;eusart.c: 148: for(i=0;i<dataLength;i++)
  5774  0F25  01F6               	clrf	USART_Send@i
  5775  0F26                     l4344:	
  5776  0F26  0874               	movf	USART_Send@dataLength,w
  5777  0F27  0276               	subwf	USART_Send@i,w
  5778  0F28  1803               	btfsc	3,0
  5779  0F29  0008               	return
  5780                           
  5781                           ;eusart.c: 149: {
  5782                           ;eusart.c: 150: EUSART_Write(*dataToSend);
  5783  0F2A  0872               	movf	USART_Send@dataToSend,w
  5784  0F2B  0084               	movwf	4
  5785  0F2C  0873               	movf	USART_Send@dataToSend+1,w
  5786  0F2D  0085               	movwf	5
  5787  0F2E  0800               	movf	0,w	;code access
  5788  0F2F  318E  263B  318F   	fcall	_EUSART_Write
  5789                           
  5790                           ;eusart.c: 151: dataToSend++;
  5791  0F32  3001               	movlw	1
  5792  0F33  07F2               	addwf	USART_Send@dataToSend,f
  5793  0F34  3000               	movlw	0
  5794  0F35  3DF3               	addwfc	USART_Send@dataToSend+1,f
  5795  0F36  3001               	movlw	1
  5796  0F37  00F5               	movwf	??_USART_Send
  5797  0F38  0875               	movf	??_USART_Send,w
  5798  0F39  07F6               	addwf	USART_Send@i,f
  5799  0F3A  2F26               	goto	l4344
  5800  0F3B                     __end_of_USART_Send:	
  5801                           
  5802                           	psect	text39
  5803  0E3B                     __ptext39:	
  5804 ;; *************** function _EUSART_Write *****************
  5805 ;; Defined at:
  5806 ;;		line 134 in file "eusart.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;  txData          1    wreg     unsigned char 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  txData          1    1[COMMON] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;		None               void
  5813 ;; Registers used:
  5814 ;;		wreg
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;Total ram usage:        1 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    1
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_USART_Send
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _EUSART_Write
  5836  0E3B                     _EUSART_Write:	
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _EUSART_Write: [wreg]
  5840                           ;EUSART_Write@txData stored from wreg
  5841  0E3B  00F1               	movwf	EUSART_Write@txData
  5842  0E3C                     l782:	
  5843                           ;eusart.c: 136: {
  5844                           
  5845                           ;eusart.c: 135: while(0 == PIR1bits.TXIF)
  5846                           
  5847  0E3C  0020               	movlb	0	; select bank0
  5848  0E3D  1E11               	btfss	17,4	;volatile
  5849  0E3E  2E3C               	goto	l782
  5850                           
  5851                           ;eusart.c: 137: }
  5852                           ;eusart.c: 139: TXREG = txData;
  5853  0E3F  0871               	movf	EUSART_Write@txData,w
  5854  0E40  0023               	movlb	3	; select bank3
  5855  0E41  009A               	movwf	26	;volatile
  5856  0E42  0008               	return
  5857  0E43                     __end_of_EUSART_Write:	
  5858                           
  5859                           	psect	text40
  5860  00A8                     __ptext40:	
  5861 ;; *************** function _strlen *****************
  5862 ;; Defined at:
  5863 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  s               2    1[COMMON] PTR const unsigned char 
  5866 ;;		 -> STR_3(6), STR_2(4), STR_1(3), 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  cp              2    5[COMMON] PTR const unsigned char 
  5869 ;;		 -> STR_3(6), STR_2(4), STR_1(3), 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  2    1[COMMON] unsigned int 
  5872 ;; Registers used:
  5873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5879 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;Total ram usage:        6 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    1
  5886 ;; This function calls:
  5887 ;;		Nothing
  5888 ;; This function is called by:
  5889 ;;		_command_unknown
  5890 ;;		_send_OK
  5891 ;;		_send_WAIT
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           
  5896                           ;psect for function _strlen
  5897  00A8                     _strlen:	
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  5901  00A8  0872               	movf	strlen@s+1,w
  5902  00A9  01F6               	clrf	strlen@cp+1
  5903  00AA  07F6               	addwf	strlen@cp+1,f
  5904  00AB  0871               	movf	strlen@s,w
  5905  00AC  01F5               	clrf	strlen@cp
  5906  00AD  07F5               	addwf	strlen@cp,f
  5907  00AE                     l4330:	
  5908  00AE  0875               	movf	strlen@cp,w
  5909  00AF  0084               	movwf	4
  5910  00B0  0876               	movf	strlen@cp+1,w
  5911  00B1  0085               	movwf	5
  5912  00B2  0800               	movf	0,w	;code access
  5913  00B3  3800               	iorlw	0
  5914  00B4  1903               	btfsc	3,2
  5915  00B5  28BB               	goto	l4332
  5916  00B6  3001               	movlw	1
  5917  00B7  07F5               	addwf	strlen@cp,f
  5918  00B8  3000               	movlw	0
  5919  00B9  3DF6               	addwfc	strlen@cp+1,f
  5920  00BA  28AE               	goto	l4330
  5921  00BB                     l4332:	
  5922  00BB  0971               	comf	strlen@s,w
  5923  00BC  00F3               	movwf	??_strlen
  5924  00BD  0972               	comf	strlen@s+1,w
  5925  00BE  00F4               	movwf	??_strlen+1
  5926  00BF  0AF3               	incf	??_strlen,f
  5927  00C0  1903               	skipnz
  5928  00C1  0AF4               	incf	??_strlen+1,f
  5929  00C2  0875               	movf	strlen@cp,w
  5930  00C3  0773               	addwf	??_strlen,w
  5931  00C4  00F1               	movwf	?_strlen
  5932  00C5  0876               	movf	strlen@cp+1,w
  5933  00C6  3D74               	addwfc	??_strlen+1,w
  5934  00C7  00F2               	movwf	?_strlen+1
  5935  00C8  0008               	return
  5936  00C9                     __end_of_strlen:	
  5937                           
  5938                           	psect	text41
  5939  0470                     __ptext41:	
  5940 ;; *************** function _InitializeIO *****************
  5941 ;; Defined at:
  5942 ;;		line 77 in file "main.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;Total ram usage:        3 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    6
  5963 ;; This function calls:
  5964 ;;		_HEFLASH_readBlock
  5965 ;;		_InitializeSPI
  5966 ;;		_DAC1220_Reset
  5967 ;;		_DAC1220_Write3Bytes
  5968 ;;		_DAC1220_Init
  5969 ;; This function is called by:
  5970 ;;		_main
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function _InitializeIO
  5976  0470                     _InitializeIO:	
  5977                           
  5978                           ;main.c: 78: OSCCONbits.IRCF = 0b1111;
  5979                           
  5980                           ;incstack = 0
  5981                           ; Regs used in _InitializeIO: [allreg]
  5982  0470  303C               	movlw	60
  5983  0471  0021               	movlb	1	; select bank1
  5984  0472  0499               	iorwf	25,f	;volatile
  5985                           
  5986                           ;main.c: 79: ANSELA = 0x00;
  5987  0473  0023               	movlb	3	; select bank3
  5988  0474  018C               	clrf	12	;volatile
  5989                           
  5990                           ;main.c: 80: ANSELB = 0x00;
  5991  0475  018D               	clrf	13	;volatile
  5992                           
  5993                           ;main.c: 81: ANSELC = 0x00;
  5994  0476  018E               	clrf	14	;volatile
  5995                           
  5996                           ;main.c: 82: APFCON = 0x00;
  5997  0477  0022               	movlb	2	; select bank2
  5998  0478  019D               	clrf	29	;volatile
  5999                           
  6000                           ;main.c: 83: TRISAbits.TRISA5 = 0;
  6001  0479  0021               	movlb	1	; select bank1
  6002  047A  128C               	bcf	12,5	;volatile
  6003                           
  6004                           ;main.c: 84: LATAbits.LATA5 = 0;
  6005  047B  0022               	movlb	2	; select bank2
  6006  047C  128C               	bcf	12,5	;volatile
  6007                           
  6008                           ;main.c: 85: TRISAbits.TRISA4 = 0;
  6009  047D  0021               	movlb	1	; select bank1
  6010  047E  120C               	bcf	12,4	;volatile
  6011                           
  6012                           ;main.c: 86: LATAbits.LATA4 = 0;
  6013  047F  0022               	movlb	2	; select bank2
  6014  0480  120C               	bcf	12,4	;volatile
  6015                           
  6016                           ;main.c: 87: TRISCbits.TRISC4 = 0;
  6017  0481  0021               	movlb	1	; select bank1
  6018  0482  120E               	bcf	14,4	;volatile
  6019                           
  6020                           ;main.c: 88: TRISCbits.TRISC5 = 0;
  6021  0483  128E               	bcf	14,5	;volatile
  6022                           
  6023                           ;main.c: 89: TRISCbits.TRISC6 = 0;
  6024  0484  130E               	bcf	14,6	;volatile
  6025                           
  6026                           ;main.c: 90: LATCbits.LATC4 = 1;
  6027  0485  0022               	movlb	2	; select bank2
  6028  0486  160E               	bsf	14,4	;volatile
  6029                           
  6030                           ;main.c: 91: LATCbits.LATC5 = 0;
  6031  0487  128E               	bcf	14,5	;volatile
  6032                           
  6033                           ;main.c: 92: LATCbits.LATC6 = 0;
  6034  0488  130E               	bcf	14,6	;volatile
  6035                           
  6036                           ;main.c: 93: InitializeSPI();
  6037  0489  318E  2685  3184   	fcall	_InitializeSPI
  6038                           
  6039                           ;main.c: 94: _delay((unsigned long)((25)*(48000000/4000.0)));
  6040  048C  3002               	movlw	2
  6041  048D  0020               	movlb	0	; select bank0
  6042  048E  00DE               	movwf	??_InitializeIO+2
  6043  048F  3086               	movlw	134
  6044  0490  00DD               	movwf	??_InitializeIO+1
  6045  0491  3099               	movlw	153
  6046  0492  00DC               	movwf	??_InitializeIO
  6047  0493                     u4107:	
  6048  0493  0BDC               	decfsz	??_InitializeIO,f
  6049  0494  2C93               	goto	u4107
  6050  0495  0BDD               	decfsz	??_InitializeIO+1,f
  6051  0496  2C93               	goto	u4107
  6052  0497  0BDE               	decfsz	??_InitializeIO+2,f
  6053  0498  2C93               	goto	u4107
  6054                           
  6055                           ;main.c: 95: DAC1220_Reset();
  6056  0499  3186  26AF  3184   	fcall	_DAC1220_Reset
  6057                           
  6058                           ;main.c: 96: _delay((unsigned long)((25)*(48000000/4000.0)));
  6059  049C  3002               	movlw	2
  6060  049D  0020               	movlb	0	; select bank0
  6061  049E  00DE               	movwf	??_InitializeIO+2
  6062  049F  3086               	movlw	134
  6063  04A0  00DD               	movwf	??_InitializeIO+1
  6064  04A1  3099               	movlw	153
  6065  04A2  00DC               	movwf	??_InitializeIO
  6066  04A3                     u4117:	
  6067  04A3  0BDC               	decfsz	??_InitializeIO,f
  6068  04A4  2CA3               	goto	u4117
  6069  04A5  0BDD               	decfsz	??_InitializeIO+1,f
  6070  04A6  2CA3               	goto	u4117
  6071  04A7  0BDE               	decfsz	??_InitializeIO+2,f
  6072  04A8  2CA3               	goto	u4117
  6073                           
  6074                           ;main.c: 97: DAC1220_Init();
  6075  04A9  318F  270E  3184   	fcall	_DAC1220_Init
  6076                           
  6077                           ;main.c: 98: HEFLASH_readBlock(heflashbuffer, 2, 32);
  6078  04AC  3002               	movlw	2
  6079  04AD  0020               	movlb	0	; select bank0
  6080  04AE  00DC               	movwf	??_InitializeIO
  6081  04AF  085C               	movf	??_InitializeIO,w
  6082  04B0  00F3               	movwf	?_HEFLASH_readBlock
  6083  04B1  3020               	movlw	32
  6084  04B2  00DD               	movwf	??_InitializeIO+1
  6085  04B3  085D               	movf	??_InitializeIO+1,w
  6086  04B4  00F4               	movwf	?_HEFLASH_readBlock+1
  6087  04B5  30C0               	movlw	_heflashbuffer& (0+255)
  6088  04B6  3186  26E7  3184   	fcall	_HEFLASH_readBlock
  6089                           
  6090                           ;main.c: 99: DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]
      +                          );
  6091  04B9  0023               	movlb	3	; select bank3
  6092  04BA  0840               	movf	_heflashbuffer^(0+384),w
  6093  04BB  0020               	movlb	0	; select bank0
  6094  04BC  00DC               	movwf	??_InitializeIO
  6095  04BD  085C               	movf	??_InitializeIO,w
  6096  04BE  00F5               	movwf	?_DAC1220_Write3Bytes
  6097  04BF  0023               	movlb	3	; select bank3
  6098  04C0  0841               	movf	(_heflashbuffer^(0+384)+1),w
  6099  04C1  0020               	movlb	0	; select bank0
  6100  04C2  00DD               	movwf	??_InitializeIO+1
  6101  04C3  085D               	movf	??_InitializeIO+1,w
  6102  04C4  00F6               	movwf	?_DAC1220_Write3Bytes+1
  6103  04C5  0023               	movlb	3	; select bank3
  6104  04C6  0842               	movf	(_heflashbuffer^(0+384)+2),w
  6105  04C7  0020               	movlb	0	; select bank0
  6106  04C8  00DE               	movwf	??_InitializeIO+2
  6107  04C9  085E               	movf	??_InitializeIO+2,w
  6108  04CA  00F7               	movwf	?_DAC1220_Write3Bytes+2
  6109  04CB  3008               	movlw	8
  6110  04CC  3180  20C9  3184   	fcall	_DAC1220_Write3Bytes
  6111                           
  6112                           ;main.c: 100: DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[
      +                          5]);
  6113  04CF  0023               	movlb	3	; select bank3
  6114  04D0  0843               	movf	(_heflashbuffer^(0+384)+3),w
  6115  04D1  0020               	movlb	0	; select bank0
  6116  04D2  00DC               	movwf	??_InitializeIO
  6117  04D3  085C               	movf	??_InitializeIO,w
  6118  04D4  00F5               	movwf	?_DAC1220_Write3Bytes
  6119  04D5  0023               	movlb	3	; select bank3
  6120  04D6  0844               	movf	(_heflashbuffer^(0+384)+4),w
  6121  04D7  0020               	movlb	0	; select bank0
  6122  04D8  00DD               	movwf	??_InitializeIO+1
  6123  04D9  085D               	movf	??_InitializeIO+1,w
  6124  04DA  00F6               	movwf	?_DAC1220_Write3Bytes+1
  6125  04DB  0023               	movlb	3	; select bank3
  6126  04DC  0845               	movf	(_heflashbuffer^(0+384)+5),w
  6127  04DD  0020               	movlb	0	; select bank0
  6128  04DE  00DE               	movwf	??_InitializeIO+2
  6129  04DF  085E               	movf	??_InitializeIO+2,w
  6130  04E0  00F7               	movwf	?_DAC1220_Write3Bytes+2
  6131  04E1  300C               	movlw	12
  6132  04E2  3180  20C9         	fcall	_DAC1220_Write3Bytes
  6133  04E4  0008               	return
  6134  04E5                     __end_of_InitializeIO:	
  6135                           
  6136                           	psect	text42
  6137  0F0E                     __ptext42:	
  6138 ;; *************** function _DAC1220_Init *****************
  6139 ;; Defined at:
  6140 ;;		line 121 in file "spi/spi_software.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;		None               void
  6147 ;; Registers used:
  6148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:        2 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    5
  6161 ;; This function calls:
  6162 ;;		_DAC1220_Write2Bytes
  6163 ;;		_DAC1220_Write3Bytes
  6164 ;; This function is called by:
  6165 ;;		_InitializeIO
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           
  6170                           ;psect for function _DAC1220_Init
  6171  0F0E                     _DAC1220_Init:	
  6172                           
  6173                           ;spi_software.c: 122: DAC1220_Write2Bytes(4, 32, 160);
  6174                           
  6175                           ;incstack = 0
  6176                           ; Regs used in _DAC1220_Init: [allreg]
  6177  0F0E  3020               	movlw	32
  6178  0F0F  00F9               	movwf	??_DAC1220_Init
  6179  0F10  0879               	movf	??_DAC1220_Init,w
  6180  0F11  00F5               	movwf	?_DAC1220_Write2Bytes
  6181  0F12  30A0               	movlw	160
  6182  0F13  00FA               	movwf	??_DAC1220_Init+1
  6183  0F14  087A               	movf	??_DAC1220_Init+1,w
  6184  0F15  00F6               	movwf	?_DAC1220_Write2Bytes+1
  6185  0F16  3004               	movlw	4
  6186  0F17  318F  2787  318F   	fcall	_DAC1220_Write2Bytes
  6187                           
  6188                           ;spi_software.c: 123: DAC1220_Write3Bytes(0, 128, 0, 0);
  6189  0F1A  3080               	movlw	128
  6190  0F1B  00F9               	movwf	??_DAC1220_Init
  6191  0F1C  0879               	movf	??_DAC1220_Init,w
  6192  0F1D  00F5               	movwf	?_DAC1220_Write3Bytes
  6193  0F1E  01F6               	clrf	?_DAC1220_Write3Bytes+1
  6194  0F1F  01F7               	clrf	?_DAC1220_Write3Bytes+2
  6195  0F20  3000               	movlw	0
  6196  0F21  3180  20C9         	fcall	_DAC1220_Write3Bytes
  6197  0F23  0008               	return
  6198  0F24                     __end_of_DAC1220_Init:	
  6199                           
  6200                           	psect	text43
  6201  00C9                     __ptext43:	
  6202 ;; *************** function _DAC1220_Write3Bytes *****************
  6203 ;; Defined at:
  6204 ;;		line 78 in file "spi/spi_software.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  address         1    wreg     const unsigned char 
  6207 ;;  byte1           1    5[COMMON] const unsigned char 
  6208 ;;  byte2           1    6[COMMON] const unsigned char 
  6209 ;;  byte3           1    7[COMMON] const unsigned char 
  6210 ;; Auto vars:     Size  Location     Type
  6211 ;;  address         1    8[COMMON] const unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;		None               void
  6214 ;; Registers used:
  6215 ;;		wreg, status,2, status,0, pclath, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6221 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;Total ram usage:        4 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    4
  6228 ;; This function calls:
  6229 ;;		_SPIDelay
  6230 ;;		_WriteByteSPI
  6231 ;; This function is called by:
  6232 ;;		_DAC1220_Init
  6233 ;;		_InitializeIO
  6234 ;;		_command_set_dac
  6235 ;;		_command_set_dac_cal
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _DAC1220_Write3Bytes
  6241  00C9                     _DAC1220_Write3Bytes:	
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _DAC1220_Write3Bytes: [wreg+status,2+status,0+pclath+cstack]
  6245                           ;DAC1220_Write3Bytes@address stored from wreg
  6246  00C9  00F8               	movwf	DAC1220_Write3Bytes@address
  6247                           
  6248                           ;spi_software.c: 79: LATBbits.LATB6 = 0;
  6249  00CA  0022               	movlb	2	; select bank2
  6250  00CB  130D               	bcf	13,6	;volatile
  6251                           
  6252                           ;spi_software.c: 80: SPIDelay();
  6253  00CC  318E  2620  3180   	fcall	_SPIDelay
  6254                           
  6255                           ;spi_software.c: 81: TRISBbits.TRISB4 = 0;
  6256  00CF  0021               	movlb	1	; select bank1
  6257  00D0  120D               	bcf	13,4	;volatile
  6258                           
  6259                           ;spi_software.c: 82: WriteByteSPI(64+address);
  6260  00D1  0878               	movf	DAC1220_Write3Bytes@address,w
  6261  00D2  3E40               	addlw	64
  6262  00D3  318F  276D  3180   	fcall	_WriteByteSPI
  6263                           
  6264                           ;spi_software.c: 83: WriteByteSPI(byte1);
  6265  00D6  0875               	movf	DAC1220_Write3Bytes@byte1,w
  6266  00D7  318F  276D  3180   	fcall	_WriteByteSPI
  6267                           
  6268                           ;spi_software.c: 84: WriteByteSPI(byte2);
  6269  00DA  0876               	movf	DAC1220_Write3Bytes@byte2,w
  6270  00DB  318F  276D  3180   	fcall	_WriteByteSPI
  6271                           
  6272                           ;spi_software.c: 85: WriteByteSPI(byte3);
  6273  00DE  0877               	movf	DAC1220_Write3Bytes@byte3,w
  6274  00DF  318F  276D  3180   	fcall	_WriteByteSPI
  6275                           
  6276                           ;spi_software.c: 86: TRISBbits.TRISB4 = 1;
  6277  00E2  0021               	movlb	1	; select bank1
  6278  00E3  160D               	bsf	13,4	;volatile
  6279                           
  6280                           ;spi_software.c: 87: LATBbits.LATB6 = 1;
  6281  00E4  0022               	movlb	2	; select bank2
  6282  00E5  170D               	bsf	13,6	;volatile
  6283                           
  6284                           ;spi_software.c: 88: SPIDelay();
  6285  00E6  318E  2620         	fcall	_SPIDelay
  6286  00E8  0008               	return
  6287  00E9                     __end_of_DAC1220_Write3Bytes:	
  6288                           
  6289                           	psect	text44
  6290  0F87                     __ptext44:	
  6291 ;; *************** function _DAC1220_Write2Bytes *****************
  6292 ;; Defined at:
  6293 ;;		line 65 in file "spi/spi_software.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  address         1    wreg     const unsigned char 
  6296 ;;  byte1           1    5[COMMON] const unsigned char 
  6297 ;;  byte2           1    6[COMMON] const unsigned char 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  address         1    7[COMMON] const unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:        3 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    4
  6316 ;; This function calls:
  6317 ;;		_SPIDelay
  6318 ;;		_WriteByteSPI
  6319 ;; This function is called by:
  6320 ;;		_DAC1220_Init
  6321 ;;		_DAC1220_SelfCal
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _DAC1220_Write2Bytes
  6327  0F87                     _DAC1220_Write2Bytes:	
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _DAC1220_Write2Bytes: [allreg]
  6331                           ;DAC1220_Write2Bytes@address stored from wreg
  6332  0F87  00F7               	movwf	DAC1220_Write2Bytes@address
  6333                           
  6334                           ;spi_software.c: 66: LATBbits.LATB6 = 0;
  6335  0F88  0022               	movlb	2	; select bank2
  6336  0F89  130D               	bcf	13,6	;volatile
  6337                           
  6338                           ;spi_software.c: 67: SPIDelay();
  6339  0F8A  318E  2620  318F   	fcall	_SPIDelay
  6340                           
  6341                           ;spi_software.c: 68: TRISBbits.TRISB4 = 0;
  6342  0F8D  0021               	movlb	1	; select bank1
  6343  0F8E  120D               	bcf	13,4	;volatile
  6344                           
  6345                           ;spi_software.c: 69: WriteByteSPI(32+address);
  6346  0F8F  0877               	movf	DAC1220_Write2Bytes@address,w
  6347  0F90  3E20               	addlw	32
  6348  0F91  318F  276D  318F   	fcall	_WriteByteSPI
  6349                           
  6350                           ;spi_software.c: 70: WriteByteSPI(byte1);
  6351  0F94  0875               	movf	DAC1220_Write2Bytes@byte1,w
  6352  0F95  318F  276D  318F   	fcall	_WriteByteSPI
  6353                           
  6354                           ;spi_software.c: 71: WriteByteSPI(byte2);
  6355  0F98  0876               	movf	DAC1220_Write2Bytes@byte2,w
  6356  0F99  318F  276D  318F   	fcall	_WriteByteSPI
  6357                           
  6358                           ;spi_software.c: 72: TRISBbits.TRISB4 = 1;
  6359  0F9C  0021               	movlb	1	; select bank1
  6360  0F9D  160D               	bsf	13,4	;volatile
  6361                           
  6362                           ;spi_software.c: 73: LATBbits.LATB6 = 1;
  6363  0F9E  0022               	movlb	2	; select bank2
  6364  0F9F  170D               	bsf	13,6	;volatile
  6365                           
  6366                           ;spi_software.c: 74: SPIDelay();
  6367  0FA0  318E  2620         	fcall	_SPIDelay
  6368  0FA2  0008               	return
  6369  0FA3                     __end_of_DAC1220_Write2Bytes:	
  6370                           
  6371                           	psect	text45
  6372  0F6D                     __ptext45:	
  6373 ;; *************** function _WriteByteSPI *****************
  6374 ;; Defined at:
  6375 ;;		line 166 in file "spi/spi_software.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  data_byte       1    wreg     unsigned char 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  data_byte       1    3[COMMON] unsigned char 
  6380 ;;  bit_counter     1    4[COMMON] unsigned char 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;		None               void
  6383 ;; Registers used:
  6384 ;;		wreg, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        3 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    3
  6397 ;; This function calls:
  6398 ;;		_ClockPulse
  6399 ;; This function is called by:
  6400 ;;		_DAC1220_Write2Bytes
  6401 ;;		_DAC1220_Write3Bytes
  6402 ;;		_DAC1220_Read3Bytes
  6403 ;;		_DAC1220_Read2Bytes
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           
  6408                           ;psect for function _WriteByteSPI
  6409  0F6D                     _WriteByteSPI:	
  6410                           
  6411                           ;incstack = 0
  6412                           ; Regs used in _WriteByteSPI: [wreg+status,2+status,0+pclath+cstack]
  6413                           ;WriteByteSPI@data_byte stored from wreg
  6414  0F6D  00F3               	movwf	WriteByteSPI@data_byte
  6415                           
  6416                           ;spi_software.c: 167: uint8_t bit_counter = 8;
  6417  0F6E  3008               	movlw	8
  6418  0F6F  00F2               	movwf	??_WriteByteSPI
  6419  0F70  0872               	movf	??_WriteByteSPI,w
  6420  0F71  00F4               	movwf	WriteByteSPI@bit_counter
  6421  0F72                     l3496:	
  6422                           ;spi_software.c: 168: do
  6423                           
  6424                           
  6425                           ;spi_software.c: 169: {
  6426                           ;spi_software.c: 170: LATBbits.LATB4 = (data_byte&0x80)?1:0;
  6427  0F72  3000               	movlw	0
  6428  0F73  1BF3               	btfsc	WriteByteSPI@data_byte,7
  6429  0F74  3001               	movlw	1
  6430  0F75  00F2               	movwf	??_WriteByteSPI
  6431  0F76  0EF2               	swapf	??_WriteByteSPI,f
  6432  0F77  0022               	movlb	2	; select bank2
  6433  0F78  080D               	movf	13,w	;volatile
  6434  0F79  0672               	xorwf	??_WriteByteSPI,w
  6435  0F7A  39EF               	andlw	-17
  6436  0F7B  0672               	xorwf	??_WriteByteSPI,w
  6437  0F7C  008D               	movwf	13	;volatile
  6438                           
  6439                           ;spi_software.c: 171: ClockPulse();
  6440  0F7D  318E  264C  318F   	fcall	_ClockPulse
  6441                           
  6442                           ;spi_software.c: 172: data_byte <<= 1;
  6443  0F80  1003               	clrc
  6444  0F81  0DF3               	rlf	WriteByteSPI@data_byte,f
  6445                           
  6446                           ;spi_software.c: 173: } while (--bit_counter);
  6447  0F82  3001               	movlw	1
  6448  0F83  02F4               	subwf	WriteByteSPI@bit_counter,f
  6449  0F84  1903               	btfsc	3,2
  6450  0F85  0008               	return
  6451  0F86  2F72               	goto	l3496
  6452  0F87                     __end_of_WriteByteSPI:	
  6453                           
  6454                           	psect	text46
  6455  0E4C                     __ptext46:	
  6456 ;; *************** function _ClockPulse *****************
  6457 ;; Defined at:
  6458 ;;		line 177 in file "spi/spi_software.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;		None               void
  6465 ;; Registers used:
  6466 ;;		wreg, status,2, status,0, pclath, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    2
  6479 ;; This function calls:
  6480 ;;		_SPIDelay
  6481 ;; This function is called by:
  6482 ;;		_Read2BytesSPI
  6483 ;;		_ReadByteSPI
  6484 ;;		_WriteByteSPI
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _ClockPulse
  6490  0E4C                     _ClockPulse:	
  6491                           
  6492                           ;spi_software.c: 179: LATCbits.LATC2 = 1;
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _ClockPulse: [wreg+status,2+status,0+pclath+cstack]
  6496  0E4C  0022               	movlb	2	; select bank2
  6497  0E4D  150E               	bsf	14,2	;volatile
  6498                           
  6499                           ;spi_software.c: 180: SPIDelay();
  6500  0E4E  318E  2620  318E   	fcall	_SPIDelay
  6501                           
  6502                           ;spi_software.c: 181: LATCbits.LATC2 = 0;
  6503  0E51  0022               	movlb	2	; select bank2
  6504  0E52  110E               	bcf	14,2	;volatile
  6505                           
  6506                           ;spi_software.c: 182: SPIDelay();
  6507  0E53  318E  2620         	fcall	_SPIDelay
  6508  0E55  0008               	return
  6509  0E56                     __end_of_ClockPulse:	
  6510                           
  6511                           	psect	text47
  6512  06AF                     __ptext47:	
  6513 ;; *************** function _DAC1220_Reset *****************
  6514 ;; Defined at:
  6515 ;;		line 45 in file "spi/spi_software.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;		None
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;		None
  6520 ;; Return value:  Size  Location     Type
  6521 ;;		None               void
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0, pclath, cstack
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;Total ram usage:        2 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    2
  6536 ;; This function calls:
  6537 ;;		_SPIDelay
  6538 ;; This function is called by:
  6539 ;;		_InitializeIO
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           
  6544                           ;psect for function _DAC1220_Reset
  6545  06AF                     _DAC1220_Reset:	
  6546                           
  6547                           ;spi_software.c: 46: LATBbits.LATB6 = 0;
  6548                           
  6549                           ;incstack = 0
  6550                           ; Regs used in _DAC1220_Reset: [wreg+status,2+status,0+pclath+cstack]
  6551  06AF  0022               	movlb	2	; select bank2
  6552  06B0  130D               	bcf	13,6	;volatile
  6553                           
  6554                           ;spi_software.c: 47: SPIDelay();
  6555  06B1  318E  2620  3186   	fcall	_SPIDelay
  6556                           
  6557                           ;spi_software.c: 48: LATCbits.LATC2 = 1;
  6558  06B4  0022               	movlb	2	; select bank2
  6559  06B5  150E               	bsf	14,2	;volatile
  6560                           
  6561                           ;spi_software.c: 49: _delay((unsigned long)((264)*(48000000/4000000.0)));
  6562  06B6  3005               	movlw	5
  6563  06B7  00F3               	movwf	??_DAC1220_Reset+1
  6564  06B8  301B               	movlw	27
  6565  06B9  00F2               	movwf	??_DAC1220_Reset
  6566  06BA                     u4127:	
  6567  06BA  0BF2               	decfsz	??_DAC1220_Reset,f
  6568  06BB  2EBA               	goto	u4127
  6569  06BC  0BF3               	decfsz	??_DAC1220_Reset+1,f
  6570  06BD  2EBA               	goto	u4127
  6571  06BE  2EBF               	nop2
  6572                           
  6573                           ;spi_software.c: 50: LATCbits.LATC2 = 0;
  6574  06BF  0022               	movlb	2	; select bank2
  6575  06C0  110E               	bcf	14,2	;volatile
  6576                           
  6577                           ;spi_software.c: 51: SPIDelay();
  6578  06C1  318E  2620  3186   	fcall	_SPIDelay
  6579                           
  6580                           ;spi_software.c: 52: LATCbits.LATC2 = 1;
  6581  06C4  0022               	movlb	2	; select bank2
  6582  06C5  150E               	bsf	14,2	;volatile
  6583                           
  6584                           ;spi_software.c: 53: _delay((unsigned long)((570)*(48000000/4000000.0)));
  6585  06C6  3009               	movlw	9
  6586  06C7  00F3               	movwf	??_DAC1220_Reset+1
  6587  06C8  30E1               	movlw	225
  6588  06C9  00F2               	movwf	??_DAC1220_Reset
  6589  06CA                     u4137:	
  6590  06CA  0BF2               	decfsz	??_DAC1220_Reset,f
  6591  06CB  2ECA               	goto	u4137
  6592  06CC  0BF3               	decfsz	??_DAC1220_Reset+1,f
  6593  06CD  2ECA               	goto	u4137
  6594                           
  6595                           ;spi_software.c: 54: LATCbits.LATC2 = 0;
  6596  06CE  0022               	movlb	2	; select bank2
  6597  06CF  110E               	bcf	14,2	;volatile
  6598                           
  6599                           ;spi_software.c: 55: SPIDelay();
  6600  06D0  318E  2620  3186   	fcall	_SPIDelay
  6601                           
  6602                           ;spi_software.c: 56: LATCbits.LATC2 = 1;
  6603  06D3  0022               	movlb	2	; select bank2
  6604  06D4  150E               	bsf	14,2	;volatile
  6605                           
  6606                           ;spi_software.c: 57: _delay((unsigned long)((903)*(48000000/4000000.0)));
  6607  06D5  300F               	movlw	15
  6608  06D6  00F3               	movwf	??_DAC1220_Reset+1
  6609  06D7  3011               	movlw	17
  6610  06D8  00F2               	movwf	??_DAC1220_Reset
  6611  06D9                     u4147:	
  6612  06D9  0BF2               	decfsz	??_DAC1220_Reset,f
  6613  06DA  2ED9               	goto	u4147
  6614  06DB  0BF3               	decfsz	??_DAC1220_Reset+1,f
  6615  06DC  2ED9               	goto	u4147
  6616                           
  6617                           ;spi_software.c: 58: LATCbits.LATC2 = 0;
  6618  06DD  0022               	movlb	2	; select bank2
  6619  06DE  110E               	bcf	14,2	;volatile
  6620                           
  6621                           ;spi_software.c: 59: SPIDelay();
  6622  06DF  318E  2620  3186   	fcall	_SPIDelay
  6623                           
  6624                           ;spi_software.c: 60: LATBbits.LATB6 = 1;
  6625  06E2  0022               	movlb	2	; select bank2
  6626  06E3  170D               	bsf	13,6	;volatile
  6627                           
  6628                           ;spi_software.c: 61: SPIDelay();
  6629  06E4  318E  2620         	fcall	_SPIDelay
  6630  06E6  0008               	return
  6631  06E7                     __end_of_DAC1220_Reset:	
  6632                           
  6633                           	psect	text48
  6634  0E20                     __ptext48:	
  6635 ;; *************** function _SPIDelay *****************
  6636 ;; Defined at:
  6637 ;;		line 186 in file "spi/spi_software.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:        1 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    1
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_MCP3550_Read
  6662 ;;		_DAC1220_Reset
  6663 ;;		_DAC1220_Write2Bytes
  6664 ;;		_DAC1220_Write3Bytes
  6665 ;;		_DAC1220_Read3Bytes
  6666 ;;		_ClockPulse
  6667 ;;		_DAC1220_Read2Bytes
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function _SPIDelay
  6673  0E20                     _SPIDelay:	
  6674                           
  6675                           ;spi_software.c: 187: _delay(200);
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _SPIDelay: [wreg]
  6679  0E20  3042               	movlw	66
  6680  0E21  00F1               	movwf	??_SPIDelay
  6681  0E22                     u4157:	
  6682  0E22  0BF1               	decfsz	??_SPIDelay,f
  6683  0E23  2E22               	goto	u4157
  6684  0E24  0000               	nop
  6685  0E25  0008               	return
  6686  0E26                     __end_of_SPIDelay:	
  6687                           
  6688                           	psect	text49
  6689  0E85                     __ptext49:	
  6690 ;; *************** function _InitializeSPI *****************
  6691 ;; Defined at:
  6692 ;;		line 6 in file "spi/spi_software.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;		None               void
  6699 ;; Registers used:
  6700 ;;		None
  6701 ;; Tracked objects:
  6702 ;;		On entry : 0/0
  6703 ;;		On exit  : 0/0
  6704 ;;		Unchanged: 0/0
  6705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    1
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_InitializeIO
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           
  6721                           ;psect for function _InitializeSPI
  6722  0E85                     _InitializeSPI:	
  6723                           
  6724                           ;spi_software.c: 8: LATBbits.LATB6 = 1;
  6725                           
  6726                           ;incstack = 0
  6727                           ; Regs used in _InitializeSPI: []
  6728  0E85  0022               	movlb	2	; select bank2
  6729  0E86  170D               	bsf	13,6	;volatile
  6730                           
  6731                           ;spi_software.c: 9: LATCbits.LATC3 = 1;
  6732  0E87  158E               	bsf	14,3	;volatile
  6733                           
  6734                           ;spi_software.c: 11: TRISBbits.TRISB6 = 0;
  6735  0E88  0021               	movlb	1	; select bank1
  6736  0E89  130D               	bcf	13,6	;volatile
  6737                           
  6738                           ;spi_software.c: 12: TRISCbits.TRISC3 = 0;
  6739  0E8A  118E               	bcf	14,3	;volatile
  6740                           
  6741                           ;spi_software.c: 14: TRISCbits.TRISC2 = 0;
  6742  0E8B  110E               	bcf	14,2	;volatile
  6743                           
  6744                           ;spi_software.c: 15: LATCbits.LATC2 = 0;
  6745  0E8C  0022               	movlb	2	; select bank2
  6746  0E8D  110E               	bcf	14,2	;volatile
  6747                           
  6748                           ;spi_software.c: 17: TRISBbits.TRISB4 = 1;
  6749  0E8E  0021               	movlb	1	; select bank1
  6750  0E8F  160D               	bsf	13,4	;volatile
  6751                           
  6752                           ;spi_software.c: 18: TRISCbits.TRISC7 = 1;
  6753  0E90  178E               	bsf	14,7	;volatile
  6754  0E91  0008               	return
  6755  0E92                     __end_of_InitializeSPI:	
  6756                           
  6757                           	psect	text50
  6758  06E7                     __ptext50:	
  6759 ;; *************** function _HEFLASH_readBlock *****************
  6760 ;; Defined at:
  6761 ;;		line 50 in file "heflash/HEFlash.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  buffer          1    wreg     PTR unsigned char 
  6764 ;;		 -> heflashbuffer(32), 
  6765 ;;  radd            1    3[COMMON] unsigned char 
  6766 ;;  count           1    4[COMMON] unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  buffer          1    9[COMMON] PTR unsigned char 
  6769 ;;		 -> heflashbuffer(32), 
  6770 ;;  add             2    7[COMMON] unsigned int 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  1    wreg      unsigned char 
  6773 ;; Registers used:
  6774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        7 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    2
  6787 ;; This function calls:
  6788 ;;		_FLASH_read
  6789 ;; This function is called by:
  6790 ;;		_InitializeIO
  6791 ;;		_command_read_offset
  6792 ;;		_command_read_shuntcalibration
  6793 ;;		_command_read_dac_cal
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _HEFLASH_readBlock
  6799  06E7                     _HEFLASH_readBlock:	
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in _HEFLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6803                           ;HEFLASH_readBlock@buffer stored from wreg
  6804  06E7  00F9               	movwf	HEFLASH_readBlock@buffer
  6805                           
  6806                           ;HEFlash.c: 52: unsigned add = radd * 32 + 0x1F80;
  6807  06E8  0873               	movf	HEFLASH_readBlock@radd,w
  6808  06E9  00F5               	movwf	??_HEFLASH_readBlock
  6809  06EA  01F6               	clrf	??_HEFLASH_readBlock+1
  6810  06EB  3005               	movlw	5
  6811  06EC                     u1915:	
  6812  06EC  35F5               	lslf	??_HEFLASH_readBlock,f
  6813  06ED  0DF6               	rlf	??_HEFLASH_readBlock+1,f
  6814  06EE  0B89               	decfsz	9,f
  6815  06EF  2EEC               	goto	u1915
  6816  06F0  0875               	movf	??_HEFLASH_readBlock,w
  6817  06F1  3E80               	addlw	128
  6818  06F2  00F7               	movwf	HEFLASH_readBlock@add
  6819  06F3  301F               	movlw	31
  6820  06F4  3D76               	addwfc	??_HEFLASH_readBlock+1,w
  6821  06F5  00F8               	movwf	HEFLASH_readBlock@add+1
  6822                           
  6823                           ;HEFlash.c: 55: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  6824  06F6  3021               	movlw	33
  6825  06F7  0274               	subwf	HEFLASH_readBlock@count,w
  6826  06F8  1803               	skipnc
  6827  06F9  0008               	return
  6828  06FA  3004               	movlw	4
  6829  06FB  0273               	subwf	HEFLASH_readBlock@radd,w
  6830  06FC  1803               	btfsc	3,0
  6831  06FD  0008               	return
  6832  06FE                     l3386:	
  6833  06FE  08F4               	movf	HEFLASH_readBlock@count,f
  6834  06FF  1903               	btfsc	3,2
  6835  0700  0008               	return
  6836                           
  6837                           ;HEFlash.c: 60: {
  6838                           ;HEFlash.c: 61: *buffer++ = (char) FLASH_read( add++);
  6839                           
  6840                           ;HEFlash.c: 59: while ( count > 0)
  6841                           
  6842                           ;HEFlash.c: 56: return -1;
  6843                           ;	Return value of _HEFLASH_readBlock is never used
  6844  0701  0878               	movf	HEFLASH_readBlock@add+1,w
  6845  0702  01F2               	clrf	?_FLASH_read+1
  6846  0703  07F2               	addwf	?_FLASH_read+1,f
  6847  0704  0877               	movf	HEFLASH_readBlock@add,w
  6848  0705  01F1               	clrf	?_FLASH_read
  6849  0706  07F1               	addwf	?_FLASH_read,f
  6850  0707  318E  26E6  3186   	fcall	_FLASH_read
  6851  070A  0871               	movf	?_FLASH_read,w
  6852  070B  00F5               	movwf	??_HEFLASH_readBlock
  6853  070C  0879               	movf	HEFLASH_readBlock@buffer,w
  6854  070D  0086               	movwf	6
  6855  070E  3001               	movlw	1	; select bank2/3
  6856  070F  0087               	movwf	7
  6857  0710  0875               	movf	??_HEFLASH_readBlock,w
  6858  0711  0081               	movwf	1
  6859  0712  3001               	movlw	1
  6860  0713  07F7               	addwf	HEFLASH_readBlock@add,f
  6861  0714  3000               	movlw	0
  6862  0715  3DF8               	addwfc	HEFLASH_readBlock@add+1,f
  6863  0716  3001               	movlw	1
  6864  0717  00F5               	movwf	??_HEFLASH_readBlock
  6865  0718  0875               	movf	??_HEFLASH_readBlock,w
  6866  0719  07F9               	addwf	HEFLASH_readBlock@buffer,f
  6867                           
  6868                           ;HEFlash.c: 62: count--;
  6869  071A  3001               	movlw	1
  6870  071B  02F4               	subwf	HEFLASH_readBlock@count,f
  6871  071C  2EFE               	goto	l3386
  6872  071D                     __end_of_HEFLASH_readBlock:	
  6873                           ;HEFlash.c: 63: }
  6874                           ;HEFlash.c: 66: return 0;
  6875                           ;	Return value of _HEFLASH_readBlock is never used
  6876                           
  6877                           
  6878                           	psect	text51
  6879  0EE6                     __ptext51:	
  6880 ;; *************** function _FLASH_read *****************
  6881 ;; Defined at:
  6882 ;;		line 32 in file "heflash/Flash.c"
  6883 ;; Parameters:    Size  Location     Type
  6884 ;;  address         2    1[COMMON] unsigned int 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;		None
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  2    1[COMMON] unsigned int 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6896 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;Total ram usage:        2 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    1
  6903 ;; This function calls:
  6904 ;;		Nothing
  6905 ;; This function is called by:
  6906 ;;		_HEFLASH_readBlock
  6907 ;;		_FLASH_readBlock
  6908 ;;		_HEFLASH_readByte
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function _FLASH_read
  6914  0EE6                     _FLASH_read:	
  6915                           
  6916                           ;Flash.c: 34: PMADR = address;
  6917                           
  6918                           ;incstack = 0
  6919                           ; Regs used in _FLASH_read: [wreg+status,2+status,0]
  6920  0EE6  0872               	movf	FLASH_read@address+1,w
  6921  0EE7  0023               	movlb	3	; select bank3
  6922  0EE8  0192               	clrf	18	;volatile
  6923  0EE9  0792               	addwf	18,f	;volatile
  6924  0EEA  0871               	movf	FLASH_read@address,w
  6925  0EEB  0191               	clrf	17	;volatile
  6926  0EEC  0791               	addwf	17,f	;volatile
  6927                           
  6928                           ;Flash.c: 35: PMCON1bits.CFGS = 0;
  6929  0EED  1315               	bcf	21,6	;volatile
  6930                           
  6931                           ;Flash.c: 36: PMCON1bits.RD = 1;
  6932  0EEE  1415               	bsf	21,0	;volatile
  6933                           
  6934                           ;Flash.c: 37: _nop();
  6935  0EEF  0000               	nop
  6936                           
  6937                           ;Flash.c: 38: _nop();
  6938  0EF0  0000               	nop
  6939                           
  6940                           ;Flash.c: 41: return PMDAT;
  6941  0EF1  0023               	movlb	3	; select bank3
  6942  0EF2  0814               	movf	20,w	;volatile
  6943  0EF3  01F2               	clrf	?_FLASH_read+1
  6944  0EF4  07F2               	addwf	?_FLASH_read+1,f
  6945  0EF5  0813               	movf	19,w	;volatile
  6946  0EF6  01F1               	clrf	?_FLASH_read
  6947  0EF7  07F1               	addwf	?_FLASH_read,f
  6948  0EF8  0008               	return
  6949  0EF9                     __end_of_FLASH_read:	
  6950                           
  6951                           	psect	intentry
  6952  0004                     __pintentry:	
  6953 ;; *************** function _isr *****************
  6954 ;; Defined at:
  6955 ;;		line 336 in file "main.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;		None               void
  6962 ;; Registers used:
  6963 ;;		None
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;Total ram usage:        1 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		Interrupt level 1
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982  0004                     _isr:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _isr: []
  6986  0004  3180               	pagesel	$
  6987  0005  0020               	movlb	0	; select bank0
  6988  0006  087F               	movf	127,w
  6989  0007  00F0               	movwf	??_isr
  6990  0008  0870               	movf	??_isr,w
  6991  0009  00FF               	movwf	127
  6992  000A  0009               	retfie
  6993  000B                     __end_of_isr:	
  6994  0003                     
  6995                           	psect	functab
  6996  0100                     __pfunctab:	
  6997  0100                     __fptable:	
  6998  0100                     fptable:	
  6999  0100  3181               	movlp	high fptable
  7000  0101  0782               	addwf	2,f
  7001  0102                     fpbase:	
  7002  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7003  0103                     __end_of__fptable:	
  7004  007E                     btemp	set	126	;btemp
  7005  007E                     wtemp0	set	126


Data Sizes:
    Strings     177
    Constant    190
    Data        21
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            64     17      61
    BANK1            48      0      20
    BANK2             0      0       0
    BANK3            48      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Absolute function$1	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_strncmp	int  size(1) Largest target is 0

    ?_strlen	unsigned int  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[3]), 

    USB_HID_REPORT_DESCRIPTOR_FUNC$1	PTR PTR const void  size(1) Largest target is 2
		 -> process_hid_setup_request@desc(COMMON[1]), 

    USB_HID_DESCRIPTOR_FUNC$1	PTR PTR const void  size(1) Largest target is 2
		 -> process_hid_setup_request@desc(COMMON[1]), 

    ep0_data_stage_callback$1	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_memcpy	PTR void  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    ?_FLASH_read	unsigned int  size(1) Largest target is 0

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_19(CODE[14]), STR_18(CODE[13]), STR_17(CODE[11]), STR_16(CODE[10]), 
		 -> STR_15(CODE[12]), STR_14(CODE[11]), STR_13(CODE[8]), STR_12(CODE[7]), 
		 -> STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), STR_8(CODE[8]), 
		 -> STR_7(CODE[14]), STR_6(CODE[15]), STR_5(CODE[9]), STR_4(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 8192
		 -> uart_command(BANK1[20]), ROM(CODE[8192]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[3]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[3]), 

    memcpy@d1	PTR void  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    memcpy@s1	PTR const void  size(2) Largest target is 144
		 -> serial_string(CODE[10]), product_string(CODE[58]), vendor_string(CODE[44]), str00(CODE[4]), 
		 -> configuration_1(CODE[32]), command_read_adc@adc_data(BANK0[6]), heflashbuffer(BANK3[32]), handle_standard_control_request@ret_863(COMMON[1]), 
		 -> handle_standard_control_request@ret_861(COMMON[2]), handle_standard_control_request@ret(COMMON[2]), this_device_descriptor(CODE[18]), g_configuration(BANK0[1]), 
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 144
		 -> serial_string(CODE[10]), product_string(CODE[58]), vendor_string(CODE[44]), str00(CODE[4]), 
		 -> configuration_1(CODE[32]), command_read_adc@adc_data(BANK0[6]), heflashbuffer(BANK3[32]), handle_standard_control_request@ret_863(COMMON[1]), 
		 -> handle_standard_control_request@ret_861(COMMON[2]), handle_standard_control_request@ret(COMMON[2]), this_device_descriptor(CODE[18]), g_configuration(BANK0[1]), 
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    USART_Send@dataToSend	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[3]), 

    received_data	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_set_dac_cal@dac_cal_data	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_save_shuntcalibration@shuntcalibration_data	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_save_offset@offset_data	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    transmit_data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    command_set_dac@dac_data	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    send_WAIT@reply	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    send_OK@reply	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_2(CODE[4]), 

    command_unknown@reply	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sp__usb_get_in_buffer	PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    ep0_data_stage_context	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    usb_application_config_descs	PTR const struct configuration_descriptor[1] size(2) Largest target is 32
		 -> configuration_1(CODE[32]), 

    sp__memcpy	PTR void  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    sp__memset	PTR void  size(2) Largest target is 16
		 -> UEP0(SFR29[1]), bds(BANK0[16]), 

    ep0_data_stage_callback	PTR FTN(unsigned char ,PTR void ,)void  size(1) Largest target is 0
		 -> Absolute function(), 

    ep0_data_stage_out_buffer	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ep0_data_stage_in_buffer	PTR unsigned char  size(2) Largest target is 58
		 -> serial_string(CODE[10]), product_string(CODE[58]), vendor_string(CODE[44]), str00(CODE[4]), 
		 -> configuration_1(CODE[32]), handle_standard_control_request@ret_863(COMMON[1]), handle_standard_control_request@ret_861(COMMON[2]), handle_standard_control_request@ret(COMMON[2]), 
		 -> this_device_descriptor(CODE[18]), g_configuration(BANK0[1]), NULL(NULL[0]), 

    S388ep_buf$in	const PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    ep_buf.in	const PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    S388ep_buf$out	const PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    ep_buf.out	const PTR unsigned char  size(2) Largest target is 144
		 -> NULL(NULL[0]), ep_buffers(BIGRAM[144]), 

    S382ep0_buf$in	const PTR unsigned char  size(2) Largest target is 144
		 -> ep_buffers(BIGRAM[144]), 

    ep0_buf.in	const PTR unsigned char  size(2) Largest target is 144
		 -> ep_buffers(BIGRAM[144]), 

    S382ep0_buf$out	const PTR unsigned char  size(2) Largest target is 144
		 -> ep_buffers(BIGRAM[144]), 

    ep0_buf.out	const PTR unsigned char  size(2) Largest target is 144
		 -> ep_buffers(BIGRAM[144]), 

    Read2BytesSPI@data2_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    Read2BytesSPI@data1_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    DAC1220_Read3Bytes@byte3	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte2	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte1	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    MCP3550_Read@adc_data	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    HEFLASH_readBlock@buffer	PTR unsigned char  size(1) Largest target is 32
		 -> heflashbuffer(BANK3[32]), 

    HEFLASH_writeBlock@data	PTR const unsigned char  size(2) Largest target is 8192
		 -> command_calibrate_dac@data(BANK0[6]), ROM(CODE[8192]), 


Critical Paths under _main in COMMON

    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _interpret_command->_command_range1
    _interpret_command->_command_range2
    _interpret_command->_command_range3
    _interpret_command->_command_set_dac
    _command_set_dac_cal->_HEFLASH_writeBlock
    _command_read_dac_cal->_memcpy
    _command_save_shuntcalibration->_HEFLASH_writeBlock
    _command_read_shuntcalibration->_memcpy
    _command_save_offset->_HEFLASH_writeBlock
    _command_read_offset->_memcpy
    _command_read_adc->_memcpy
    _send_WAIT->_strlen
    _send_WAIT->_USART_Send
    _MCP3550_Read->_Read2BytesSPI
    _command_calibrate_dac->_HEFLASH_writeBlock
    _DAC1220_SelfCal->_DAC1220_Write2Bytes
    _DAC1220_Read3Bytes->_WriteByteSPI
    _DAC1220_Read3Bytes->_ReadByteSPI
    _HEFLASH_writeBlock->_FLASH_write
    _command_set_dac->_send_OK
    _command_range3->_send_OK
    _command_range2->_send_OK
    _command_range1->_send_OK
    _command_mode_galvanostatic->_send_OK
    _command_mode_potentiostatic->_send_OK
    _command_cell_off->_send_OK
    _command_cell_on->_send_OK
    _send_OK->_strlen
    _send_OK->_USART_Send
    _command_unknown->_strlen
    _command_unknown->_USART_Send
    _USART_Send->_EUSART_Write
    _InitializeIO->_DAC1220_Init
    _DAC1220_Init->_DAC1220_Write3Bytes
    _DAC1220_Write3Bytes->_WriteByteSPI
    _DAC1220_Write2Bytes->_WriteByteSPI
    _ClockPulse->_SPIDelay
    _DAC1220_Reset->_SPIDelay
    _HEFLASH_readBlock->_FLASH_read

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _interpret_command->_command_set_dac_cal
    _command_set_dac_cal->_HEFLASH_writeBlock
    _command_save_shuntcalibration->_HEFLASH_writeBlock
    _command_save_offset->_HEFLASH_writeBlock
    _command_calibrate_dac->_HEFLASH_writeBlock

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    7739
                                             14 BANK0      3     3      0
                       _InitializeIO
                  _interpret_command
                  _EUSART_Initialize
                 _EUSART_is_rx_ready
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    0     0      0      66
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
             _EUSART_SetErrorHandler
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetErrorHandler                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetOverrunErrorHandler                        2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetFramingErrorHandler                        2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _interpret_command                                    0     0      0    7033
                    _command_unknown
                    _command_cell_on
                   _command_cell_off
        _command_mode_potentiostatic
         _command_mode_galvanostatic
                     _command_range1
                     _command_range2
                     _command_range3
                    _command_set_dac
              _command_calibrate_dac
                   _command_read_adc
                _command_read_offset
                _command_save_offset
      _command_read_shuntcalibration
      _command_save_shuntcalibration
               _command_read_dac_cal
                _command_set_dac_cal
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              8     2      6     134
                                              1 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (2) _command_set_dac_cal                                 11     9      2     851
                                              3 BANK0     11     9      2
                 _HEFLASH_writeBlock
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_dac_cal                                 2     2      0     278
                                              0 BANK0      2     2      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _command_save_shuntcalibration                        3     1      2     594
                                              3 BANK0      3     1      2
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_shuntcalibration                        2     2      0     278
                                              0 BANK0      2     2      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _command_save_offset                                  3     1      2     594
                                              3 BANK0      3     1      2
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_offset                                  2     2      0     278
                                              0 BANK0      2     2      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _command_read_adc                                     8     8      0     763
                                              0 BANK0      8     8      0
                       _MCP3550_Read
                             _memcpy
                          _send_WAIT
 ---------------------------------------------------------------------------------
 (3) _send_WAIT                                            3     3      0     227
                                              7 COMMON     3     3      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     120
                                              1 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 (3) _MCP3550_Read                                         3     3      0     355
                                              6 COMMON     3     3      0
                           _SPIDelay
                      _Read2BytesSPI
 ---------------------------------------------------------------------------------
 (4) _Read2BytesSPI                                        4     3      1     199
                                              2 COMMON     4     3      1
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (2) _command_calibrate_dac                                9     9      0    1020
                                              3 BANK0      9     9      0
                 _HEFLASH_writeBlock
                 _DAC1220_Read3Bytes
                    _DAC1220_SelfCal
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _DAC1220_SelfCal                                      2     2      0     112
                                              8 COMMON     2     2      0
                _DAC1220_Write2Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Read3Bytes                                   5     2      3     183
                                              5 COMMON     5     2      3
                           _SPIDelay
                       _WriteByteSPI
                        _ReadByteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadByteSPI                                          3     3      0      49
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_writeBlock                                   8     5      3     336
                                              7 COMMON     5     2      3
                                              0 BANK0      3     3      0
                        _FLASH_write
                        _FLASH_erase
 ---------------------------------------------------------------------------------
 (4) _FLASH_erase                                          3     1      2      45
                                              1 COMMON     3     1      2
                            __unlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_write                                          6     1      5      89
                                              1 COMMON     6     1      5
                            __unlock
 ---------------------------------------------------------------------------------
 (5) __unlock                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _command_set_dac                                      9     7      2     427
                                             10 COMMON     2     0      2
                                              0 BANK0      7     7      0
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range3                                       2     2      0     227
                                             10 COMMON     2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range2                                       2     2      0     227
                                             10 COMMON     2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range1                                       2     2      0     227
                                             10 COMMON     2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_galvanostatic                           0     0      0     227
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_potentiostatic                          0     0      0     227
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_off                                     0     0      0     227
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_on                                      0     0      0     227
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _send_OK                                              3     3      0     227
                                              7 COMMON     3     3      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (2) _command_unknown                                      3     3      0     227
                                              7 COMMON     3     3      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (4) _USART_Send                                           5     2      3      92
                                              2 COMMON     5     2      3
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2      90
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _InitializeIO                                         3     3      0     538
                                              0 BANK0      3     3      0
                  _HEFLASH_readBlock
                      _InitializeSPI
                      _DAC1220_Reset
                _DAC1220_Write3Bytes
                       _DAC1220_Init
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Init                                         2     2      0     246
                                              9 COMMON     2     2      0
                _DAC1220_Write2Bytes
                _DAC1220_Write3Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Write3Bytes                                  4     1      3     134
                                              5 COMMON     4     1      3
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _DAC1220_Write2Bytes                                  3     1      2     112
                                              5 COMMON     3     1      2
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteByteSPI                                         3     3      0      46
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (5) _ClockPulse                                           0     0      0       0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Reset                                        2     2      0       0
                                              2 COMMON     2     2      0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (6) _SPIDelay                                             1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitializeSPI                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_readBlock                                    7     5      2     158
                                              3 COMMON     7     5      2
                         _FLASH_read
 ---------------------------------------------------------------------------------
 (4) _FLASH_read                                           2     0      2      22
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeIO
     _HEFLASH_readBlock
       _FLASH_read
     _InitializeSPI
     _DAC1220_Reset
       _SPIDelay
     _DAC1220_Write3Bytes
       _SPIDelay
       _WriteByteSPI
         _ClockPulse
           _SPIDelay
     _DAC1220_Init
       _DAC1220_Write2Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
   _interpret_command
     _command_unknown
       _strlen
       _USART_Send
         _EUSART_Write
     _command_cell_on
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_cell_off
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_mode_potentiostatic
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_mode_galvanostatic
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_range1
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_range2
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_range3
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_set_dac
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_calibrate_dac
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Read3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
         _ReadByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_SelfCal
         _DAC1220_Write2Bytes
           _SPIDelay
           _WriteByteSPI
             _ClockPulse
               _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_read_adc
       _MCP3550_Read
         _SPIDelay
         _Read2BytesSPI
           _ClockPulse
             _SPIDelay
       _memcpy
       _send_WAIT
         _strlen
         _USART_Send
           _EUSART_Write
     _command_read_offset
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_save_offset
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_read_shuntcalibration
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_save_shuntcalibration
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _command_read_dac_cal
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_set_dac_cal
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _EUSART_Write
     _strncmp
   _EUSART_Initialize
     _EUSART_SetFramingErrorHandler
     _EUSART_SetOverrunErrorHandler
     _EUSART_SetErrorHandler
   _EUSART_is_rx_ready
   _EUSART_Read

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       7       3        0.0%
BITBANK0            40      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               40     11      3D       5       95.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               30      0      14       7       41.7%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2                0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               30      0      20      11       66.7%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      85      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Nov 18 19:00:39 2020

                                                 pc 0002                                         __CFG_CP$OFF 0000  
                                               l782 0E3C                                                 l775 0E56  
                                               _UIE 0E92                                                 _UIR 0E90  
                                   ?_command_range1 0070                                     ?_command_range2 0070  
                                   ?_command_range3 0070                                                 _bds 0020  
                                               _isr 0004                      ?_EUSART_SetFramingErrorHandler 0070  
                                      __CFG_BORV$LO 0000                                                 wreg 0009  
                          Read2BytesSPI@bit_counter 0074                                        ?_EUSART_Read 0070  
                                 FLASH_read@address 0071                                        __CFG_LVP$OFF 0000  
                                  ?_command_cell_on 0070                               __size_of_WriteByteSPI 001A  
                                              l1168 05B4                                                l3430 064A  
                                              l3416 06A9                                                l4330 00AE  
                                              l4332 00BB                                                l3364 0575  
                                              l3532 00EE                                                l3444 066C  
                                              l3366 059C                                                l4344 0F26  
                                              l3448 0672                                                l4424 00A5  
                                              l3386 06FE                                                l4610 0E5F  
                                              l4710 01FA                                                l3496 0F72  
                                              l4560 05F7                                                l4704 01DD  
                                              l4554 05D6                                                l4722 0234  
                                              l4740 0299                                                l4716 0217  
                                              l4558 05EE                                                l4734 0275  
                                              l4662 011D                                                l3784 07BC  
                                              l4752 02DA                                                l4728 0258  
                                              l4680 016B                                                l4746 02B6  
                                              l4674 0151                                                l4692 019F  
                                              l4668 0137                                                l4686 0185  
                                              l4774 0730                                                l4766 0728  
                                              l4776 0748                                                l4698 01B9  
                                              ?_isr 0070                                                STR_1 046D  
                                              STR_2 0469                                                STR_3 0463  
                                              STR_4 0454                                                STR_5 0423  
                                              STR_6 03BF                                                STR_7 03DC  
                                              STR_8 0434                                                STR_9 043C  
                                              u4107 0493                                                u2275 07C6  
                                              u4117 04A3                                                u4127 06BA  
                                              u4137 06CA                                _ep0_data_stage_direc 003E  
                                              u1915 06EC                                                u4147 06D9  
                                              u4067 0604                                                u4157 0E22  
                                              u4077 0EB8                                                u3605 05BE  
                                              u4087 0EA8                                                u4097 0E98  
                                              u1875 055A                                                _UEP0 0E98  
                        __end_of_HEFLASH_writeBlock 05B4                                                _UEIE 0E97  
                                      __CFG_WRT$OFF 0000                                                _addr 0039  
                                              _main 071D                                                fsr0h 0005  
                                              fsr1h 0007                                                fsr0l 0004  
                                              indf0 0000                                                indf1 0001  
                                              fsr1l 0006                                                btemp 007E  
                         command_calibrate_dac@data 0062                                    ?_command_set_dac 007A  
                                     __CFG_BOREN$ON 0000                                                start 000B  
                                     __CFG_IESO$OFF 0000                                    ?_command_unknown 0070  
                                     ??_ReadByteSPI 0072                              __size_of_InitializeSPI 000D  
                                     _transfer_data 0042                                __end_of_MCP3550_Read 06AF  
                               __size_of_FLASH_read 0013                                               ??_isr 0070  
                                 ?_command_cell_off 0070                                          _ClockPulse 0E4C  
                     __size_of_command_read_dac_cal 0024                      command_save_offset@offset_data 005F  
                                     ?_EUSART_Write 0070                                               PMCON1 0195  
                                             PMCON2 0196                                  ??_command_cell_off 007A  
                   ??_command_save_shuntcalibration 0061                                 _DAC1220_Write2Bytes 0F87  
                                             ?_main 0070                                 _DAC1220_Write3Bytes 00C9  
                                             STR_10 0444                                               STR_11 042C  
                                             STR_12 045C                                               STR_13 044C  
                                             STR_14 040E                                               STR_15 03F7  
                                             STR_16 0419                                               STR_17 0403  
                                     __CFG_WDTE$OFF 0000                                               STR_18 03EA  
                                             STR_19 03CE                                        _WriteByteSPI 0F6D  
                                             _UADDR 0E96                                               _PMADR 0191  
                                             _PMDAT 0193                                               _RCREG 0199  
                                             _RCSTA 019D                                       _transmit_data 0044  
                                             _TXREG 019A                                               _TXSTA 019E  
                                    __CFG_FCMEN$OFF 0000                                   ?_command_read_adc 0070  
                                   __end_of__unlock 0E4C                             command_set_dac@dac_data 007A  
                                  __end_of_SPIDelay 0E26                                     ??_Read2BytesSPI 0073  
                                             _str00 03BB                                  ??_command_read_adc 005C  
                                             main@c 006B                                               main@i 006C  
                                             fpbase 0102                                     __end_of_send_OK 0FE1  
                                     ?_InitializeIO 0070                              HEFLASH_writeBlock@data 0077  
                            HEFLASH_writeBlock@radd 005C                                ?_DAC1220_Write2Bytes 0075  
                              ?_DAC1220_Write3Bytes 0075                                               status 0003  
                                             wtemp0 007E                                     __end_of_strncmp 05FA  
command_save_shuntcalibration@shuntcalibration_data 005F                                         ?_USART_Send 0072  
                                    __CFG_MCLRE$OFF 0000                        ??_command_mode_galvanostatic 007A  
                                   __initialization 000D                                        __end_of_main 0750  
                                    ??_EUSART_Write 0071                                      __CFG_LPBOR$OFF 0000  
                              __size_of_FLASH_erase 0019                                 __end_of_ReadByteSPI 0100  
                                            ??_main 006A                                __size_of_FLASH_write 0022  
                               __CFG_USBLSCLK$48MHz 0000                                HEFLASH_readBlock@add 0077  
                                     _InitializeSPI 0E85                                        _addr_pending 003A  
              fp__EUSART_DefaultFramingErrorHandler 0000                   _EUSART_DefaultFramingErrorHandler 0000  
                        _EUSART_OverrunErrorHandler 0038                                              _APFCON 011D  
                                            _ANSELA 018C                                              _ANSELB 018D  
                                            _ANSELC 018E                          __end_of_EUSART_is_rx_ready 0E20  
                                    ??_InitializeIO 005C                 __size_of_command_mode_galvanostatic 0005  
                             ??_DAC1220_Write2Bytes 0077                               ??_DAC1220_Write3Bytes 0078  
                                            _SPBRGH 019C                                              _SPBRGL 019B  
                            _ep0_data_stage_context 003D                        _ep0_data_stage_buf_remaining 0030  
                         _ep0_data_stage_out_buffer 003F                                    __end_of__fptable 0103  
                                    __CFG_PWRTE$OFF 0000                         __end_of_command_read_offset 07FF  
                         DAC1220_Read3Bytes@address 0079                                      __CFG_STVREN$ON 0000  
                                FLASH_write@address 0071                                              _ep_buf 0047  
                                       ?_ClockPulse 0070                                              _memcpy 07B0  
                             __end_of_DAC1220_Reset 06E7                                           ??__unlock 0071  
                                            _strlen 00A8                             WriteByteSPI@bit_counter 0074  
                                            fptable 0100                               _command_calibrate_dac 05FA  
                                            fptotal 0003                                           ??_send_OK 0077  
                                    ?_InitializeSPI 0070                                 __size_of_USART_Send 0017  
                           HEFLASH_writeBlock@count 0079                                        ??_FLASH_read 0073  
                                         ??_strncmp 0077                                __size_of_EUSART_Read 000B  
                   ??_command_read_shuntcalibration 005C                             __end_of__initialization 003C  
                    __end_of_this_device_descriptor 03B1                               __size_of_MCP3550_Read 0038  
                                    __pcstackCOMMON 0070                                         _ReadByteSPI 00E9  
                       __end_of_command_save_offset 0ED4                                        __pidataBANK0 0EF9  
                              _received_data_length 007C                                    ??_command_range1 007A  
                                  ??_command_range2 007A                                    ??_command_range3 007A  
                                     __end_of_str00 03BF                               __end_of_serial_string 03BB  
                       __end_of_command_set_dac_cal 0554                                           ?_SPIDelay 0070  
                       __size_of_DAC1220_Read3Bytes 0032                                  __end_of_FLASH_read 0EF9  
                   ??_EUSART_SetOverrunErrorHandler 0071                                        _MCP3550_Read 0677  
                                   _g_configuration 0046                                          __pbssBANK0 0030  
                                        __pbssBANK1 00A0                                          __pbssBANK3 01C0  
                              __end_of_EUSART_Write 0E43                                USART_Send@dataLength 0074  
                               __size_of_ClockPulse 000A                                USART_Send@dataToSend 0072  
                __end_of_command_mode_galvanostatic 0E1B                          _command_mode_galvanostatic 0E16  
                   command_set_dac_cal@dac_cal_data 005F                             HEFLASH_readBlock@buffer 0079  
                             HEFLASH_readBlock@radd 0073                                          __pmaintext 071D  
                                _HEFLASH_writeBlock 0554                                  __size_of_send_WAIT 001F  
                                   __CFG_PLLMULT$3x 0000                                          __pintentry 0004  
                                        ??_SPIDelay 0071                                             ?_memcpy 0071  
                                           _BAUDCON 019F                                __end_of_InitializeIO 04E5  
                          __size_of_DAC1220_SelfCal 000C                             _ep0_data_stage_callback 003C  
                            ?_command_calibrate_dac 0070                                             ?_strlen 0071  
                               ?_HEFLASH_writeBlock 0077                                     ??_InitializeSPI 0071  
                                        _ep_buffers 2080                            ??_EUSART_SetErrorHandler 0071  
                                     ?_DAC1220_Init 0070                           __size_of_command_cell_off 0005  
                                           _UIEbits 0E92                        __end_of_command_read_dac_cal 0063  
                                        __stringtab 0300                                             _UIRbits 0E90  
                              ??_HEFLASH_writeBlock 007A                            __size_of_command_cell_on 0005  
                                      ??_USART_Send 0075                                    _interface_string 0301  
                         __size_of_command_read_adc 0021                                  _transfer_interface 0043  
                                           _ep0_buf 0055                            __size_of_command_set_dac 002E  
                                   __size_of_memcpy 002D                            __size_of_command_unknown 001F  
                                           __ptext1 0E56                                             __ptext2 0E1B  
                                           __ptext3 0F54                                             __ptext4 0E34  
                                           __ptext5 0E2D                                             __ptext6 0E26  
                                           __ptext7 0103                                             __ptext8 05B4  
                                           __ptext9 04E5                                             __unlock 0E43  
                                   __size_of_strlen 0021                                        __size_of_isr 0007  
                                           _send_OK 0FC2                                      ??_DAC1220_Init 0079  
                                __end_of_USART_Send 0F3B                                       _received_data 0034  
                                 __end_of_send_WAIT 1000                                             clrloop0 0E7A  
                                           _strncmp 05B4                                end_of_initialization 003C  
                             __end_of_vendor_string 037F                               __end_of_Read2BytesSPI 0677  
             __end_of_EUSART_SetOverrunErrorHandler 0E34              __size_of_EUSART_SetOverrunErrorHandler 0007  
                     _EUSART_SetOverrunErrorHandler 0E2D                                             memcpy@d 0078  
                                           memcpy@n 0075                                             memcpy@s 007A  
                                           init_ram 0E6D                                             initloop 0E6E  
                            ReadByteSPI@bit_counter 0073                                   _EUSART_Initialize 0F54  
                      ?_command_mode_potentiostatic 0070                                  ?_EUSART_Initialize 0070  
                                         _RCSTAbits 019D                                  _EUSART_is_rx_ready 0E1B  
                                     ??_FLASH_erase 0073                            command_read_adc@adc_data 005E  
                                      __pstringtext 0300                                        ??_ClockPulse 0072  
                                     ??_FLASH_write 0076                                   _interpret_command 0103  
                                           strlen@s 0071                                 ??_EUSART_Initialize 0073  
                                         _PORTBbits 000D                                 ?_EUSART_is_rx_ready 0070  
                                         _PORTCbits 000E                                  ?_interpret_command 0070  
                                  __CFG_FOSC$INTOSC 0000                                           _TRISAbits 008C  
                                         _TRISBbits 008D                                   ??_DAC1220_SelfCal 0078  
                                         _TRISCbits 008E                               __size_of_EUSART_Write 0008  
                       __end_of_DAC1220_Write2Bytes 0FA3                         __end_of_DAC1220_Write3Bytes 00E9  
                               ??_interpret_command 007C                     __size_of_EUSART_SetErrorHandler 0007  
                                         _USTATbits 0E8F                           __end_of_EUSART_Initialize 0F6D  
                              ??_EUSART_is_rx_ready 0071                                  __end_of_ClockPulse 0E56  
                                         _TXSTAbits 019E                                  __CFG_PLLEN$ENABLED 0000  
                             __size_of_InitializeIO 0075                       ??_command_mode_potentiostatic 007A  
                                      ?_ReadByteSPI 0070                                command_unknown@reply 0078  
                         __end_of_interpret_command 02DD                                   ??_command_cell_on 007A  
                        _EUSART_DefaultErrorHandler 0000                                _command_read_dac_cal 003F  
                      __size_of_command_read_offset 0022                                        _EUSART_Write 0E3B  
                                    __end_of_memcpy 07DD                                         USART_Send@i 0076  
                                 __size_of_SPIDelay 0006                               HEFLASH_writeBlock@add 005D  
                               __end_of_FLASH_erase 0F54                                   ??_command_set_dac 005C  
                                    __end_of_strlen 00C9                                 start_initialization 000D  
                               __end_of_FLASH_write 02FF                                   ??_command_unknown 0077  
                                       __end_of_isr 000B                                       ??_EUSART_Read 0071  
                                  _command_cell_off 0E0C                                        _InitializeIO 0470  
                                   _returning_short 0041                              __size_of_DAC1220_Reset 0038  
                       ?_command_mode_galvanostatic 0070                                    _command_read_adc 0087  
                    ?_EUSART_SetOverrunErrorHandler 0070                                   _HEFLASH_readBlock 06E7  
                        _EUSART_FramingErrorHandler 0037                          __end_of_DAC1220_Read3Bytes 0782  
                            _EUSART_SetErrorHandler 0E34                                __end_of_DAC1220_Init 0F24  
                                ?_HEFLASH_readBlock 0073                             ??_command_calibrate_dac 005F  
                                       __pdataBANK0 0047                               ?_command_read_dac_cal 0070  
                                    send_WAIT@reply 0078                                            ??_memcpy 0077  
                                          ??_strlen 0073                                       ?_WriteByteSPI 0070  
                      __size_of_command_save_offset 0012                                 ??_HEFLASH_readBlock 0075  
                          DAC1220_Write2Bytes@byte1 0075                            DAC1220_Write2Bytes@byte2 0076  
                                       __pbssCOMMON 007C                __size_of_command_mode_potentiostatic 0005  
                      __size_of_command_set_dac_cal 006F                            __end_of_interface_string 0319  
                                     __pcstackBANK0 005C                                 __end_of__stringdata 0470  
                                 __size_of__fptable 0003               __end_of_command_save_shuntcalibration 0EE6  
            __size_of_command_save_shuntcalibration 0012                       _command_save_shuntcalibration 0ED4  
                        __size_of_EUSART_Initialize 0019                                        send_OK@reply 0078  
                               __end_of_EUSART_Read 0E61                            DAC1220_Write3Bytes@byte1 0075  
                          DAC1220_Write3Bytes@byte2 0076                            DAC1220_Write3Bytes@byte3 0077  
                         __end_of_HEFLASH_readBlock 071D                              HEFLASH_readBlock@count 0074  
                        DAC1220_Write2Bytes@address 0077                                           __pfunctab 0100  
                        __size_of_interpret_command 01DA                                         _FLASH_erase 0F3B  
                                       _FLASH_write 02DD                                      ??_WriteByteSPI 0072  
                                     _DAC1220_Reset 06AF                                            ?__unlock 0070  
                             __end_of_InitializeSPI 0E92                                            ?_send_OK 0070  
                           __size_of_command_range1 0010                             __size_of_command_range2 0010  
                           __size_of_command_range3 0010                                MCP3550_Read@adc_data 0078  
                                          ?_strncmp 0071                                           _send_WAIT 0FE1  
                                          _LATAbits 010C              EUSART_SetErrorHandler@interruptHandler 0072  
                                          _LATBbits 010D                                            _LATCbits 010E  
                       __size_of_HEFLASH_writeBlock 0060                                           clear_ram0 0E79  
                                          _PIE2bits 0092                                   _eusartRxLastError 0040  
                      _usb_application_config_descs 005A                                            _PIR1bits 0011  
                   ??_EUSART_SetFramingErrorHandler 0071                                            _PIR2bits 0012  
                                   FLASH_erase@temp 0073                                            _UCFGbits 0E91  
                            ??_command_read_dac_cal 005C                            _ep0_data_stage_in_buffer 0032  
              fp__EUSART_DefaultOverrunErrorHandler 0000                   _EUSART_DefaultOverrunErrorHandler 0000  
                                          _UCONbits 0E8E                                     _DAC1220_SelfCal 0E61  
                              __size_of_ReadByteSPI 0017                                            _SPIDelay 0E20  
                                     _serial_string 03B1                                      ?_DAC1220_Reset 0070  
                                       __stringdata 03BF                                         _EUSART_Read 0E56  
                                        _ACTCONbits 039B                                 _command_read_offset 07DD  
                                        ?_send_WAIT 0070                                     _command_cell_on 0E07  
                    ?_command_save_shuntcalibration 005F                          __size_of_HEFLASH_readBlock 0036  
                             __size_of_DAC1220_Init 0016                               WriteByteSPI@data_byte 0073  
                        DAC1220_Write3Bytes@address 0078                                     _command_set_dac 0782  
                                  FLASH_write@latch 0075               __end_of_command_read_shuntcalibration 0087  
            __size_of_command_read_shuntcalibration 0024                       _command_read_shuntcalibration 0063  
                          __end_of_command_cell_off 0E11                                 _EUSART_ErrorHandler 0036  
                                   _configuration_1 037F                                     _command_unknown 0FA3  
                              ?_command_read_offset 0070                                  __end_of__stringtab 0301  
                            __size_of_Read2BytesSPI 003A                                    __size_of__unlock 0009  
                                          __fptable 0100                            __end_of_command_read_adc 00A8  
                                  __size_of_send_OK 001F                                            __ptext10 003F  
                                          __ptext11 0ED4                                            __ptext20 05FA  
                                          __ptext12 0063                                            __ptext21 0E61  
                                          __ptext13 0EC2                                            __ptext30 0EA2  
                                          __ptext22 0750                                            __ptext14 07DD  
                                          __ptext31 0E92                                            __ptext23 00E9  
                                          __ptext15 0087                                            __ptext40 00A8  
                                          __ptext32 0E16                                            __ptext24 0554  
                                          __ptext16 0FE1                                            __ptext41 0470  
                                          __ptext33 0E11                                            __ptext25 0F3B  
                                          __ptext17 07B0                                            __ptext50 06E7  
                                          __ptext42 0F0E                                            __ptext34 0E0C  
                                          __ptext26 02DD                                            __ptext18 0677  
                                          __ptext51 0EE6                                            __ptext43 00C9  
                                          __ptext35 0E07                                            __ptext27 0E43  
                                          __ptext19 063D                                            __ptext44 0F87  
                                          __ptext36 0FC2                                            __ptext28 0782  
                                          __ptext45 0F6D                                            __ptext37 0FA3  
                                          __ptext29 0EB2                                            __ptext46 0E4C  
                                          __ptext38 0F24                                            __ptext47 06AF  
                                          __ptext39 0E3B                                            __ptext48 0E20  
                                          __ptext49 0E85                                          _FLASH_read 0EE6  
                                     _heflashbuffer 01C0                                       ?_MCP3550_Read 0070  
                                      _DAC1220_Init 0F0E                                  FLASH_erase@address 0071  
                                  __size_of_strncmp 0046                        __size_of_DAC1220_Write2Bytes 001C  
                       __size_of_EUSART_is_rx_ready 0005                        __size_of_DAC1220_Write3Bytes 0020  
                                     __size_of_main 0033                                __end_of_WriteByteSPI 0F87  
                              ReadByteSPI@data_byte 0074                                 _command_save_offset 0EC2  
                                        strncmp@len 0075                             __end_of_DAC1220_SelfCal 0E6D  
                           ?_EUSART_SetErrorHandler 0070                                    _control_need_zlp 003B  
                               _command_set_dac_cal 04E5       EUSART_SetOverrunErrorHandler@interruptHandler 0072  
                                   ??_DAC1220_Reset 0072                               ??_command_read_offset 005C  
             __end_of_EUSART_SetFramingErrorHandler 0E2D              __size_of_EUSART_SetFramingErrorHandler 0007  
                     _EUSART_SetFramingErrorHandler 0E26                      __size_of_command_calibrate_dac 0043  
                     __end_of_command_calibrate_dac 063D                              MCP3550_Read@data_ready 0077  
                              ?_command_save_offset 005F                                          _INTCONbits 000B  
                                _DAC1220_Read3Bytes 0750                                ?_command_set_dac_cal 005F  
                                          memcpy@d1 0071                                            memcpy@s1 0073  
                                    _command_range1 0E92                                      _command_range2 0EA2  
                                    _command_range3 0EB2                                     FLASH_write@data 0073  
                                    ??_MCP3550_Read 0076                                     FLASH_write@temp 0076  
                           __end_of_command_cell_on 0E0C                             DAC1220_Read3Bytes@byte1 0075  
                           DAC1220_Read3Bytes@byte2 0076                             DAC1220_Read3Bytes@byte3 0077  
                                          intlevel1 0100                                 ?_DAC1220_Read3Bytes 0075  
                                      _uart_command 00A0                                       _vendor_string 0353  
                                        _PMCON1bits 0195                                       _Read2BytesSPI 063D  
                                       ??_send_WAIT 0077                             __end_of_command_set_dac 07B0  
                    __end_of_EUSART_SetErrorHandler 0E3B                                   __CFG_CLKOUTEN$OFF 0000  
               __end_of_command_mode_potentiostatic 0E16                         _command_mode_potentiostatic 0E11  
                           __end_of_configuration_1 039F                                           strncmp@s1 0071  
                                         strncmp@s2 0073                             __end_of_command_unknown 0FC2  
                                        _OSCCONbits 0099                              _this_device_descriptor 039F  
                              __CFG_CPUDIV$NOCLKDIV 0000       EUSART_SetFramingErrorHandler@interruptHandler 0072  
                                    _product_string 0319                                        ?_FLASH_erase 0071  
                              ??_DAC1220_Read3Bytes 0078                                        ?_FLASH_write 0071  
                             ??_command_save_offset 0061                      ?_command_read_shuntcalibration 0070  
                            __end_of_command_range1 0EA2                              __end_of_command_range2 0EB2  
                            __end_of_command_range3 0EC2                               ??_command_set_dac_cal 0061  
                     fp__EUSART_DefaultErrorHandler 0000                                            strlen@cp 0075  
                              _transmit_data_length 0045                             Read2BytesSPI@data1_byte 0075  
                           Read2BytesSPI@data2_byte 0072                                         ?_FLASH_read 0071  
                                EUSART_Write@txData 0071                                      ?_Read2BytesSPI 0072  
                                  ?_DAC1220_SelfCal 0070                                          _USART_Send 0F24  
                            __end_of_product_string 0353  
