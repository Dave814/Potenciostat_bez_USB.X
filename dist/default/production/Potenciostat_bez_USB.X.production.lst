

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 19 16:22:32 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	text41,local,class=CODE,merge=1,delta=2
    53                           	psect	text42,local,class=CODE,merge=1,delta=2
    54                           	psect	text43,local,class=CODE,merge=1,delta=2
    55                           	psect	text44,local,class=CODE,merge=1,delta=2
    56                           	psect	text45,local,class=CODE,merge=1,delta=2
    57                           	psect	text46,local,class=CODE,merge=1,delta=2
    58                           	psect	text47,local,class=CODE,merge=1,delta=2
    59                           	psect	text48,local,class=CODE,merge=1,delta=2
    60                           	psect	text49,local,class=CODE,merge=1,delta=2
    61                           	psect	text50,local,class=CODE,merge=1,delta=2
    62                           	psect	text51,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	functab,global,reloc=256,class=CODE,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  0111                     	;# 
   113  0112                     	;# 
   114  0113                     	;# 
   115  0114                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011D                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  018E                     	;# 
   125  0191                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0194                     	;# 
   131  0195                     	;# 
   132  0196                     	;# 
   133  0197                     	;# 
   134  0199                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0391                     	;# 
   160  0392                     	;# 
   161  0393                     	;# 
   162  0394                     	;# 
   163  0395                     	;# 
   164  0396                     	;# 
   165  039A                     	;# 
   166  039B                     	;# 
   167  0611                     	;# 
   168  0612                     	;# 
   169  0613                     	;# 
   170  0613                     	;# 
   171  0614                     	;# 
   172  0615                     	;# 
   173  0616                     	;# 
   174  0616                     	;# 
   175  0691                     	;# 
   176  0692                     	;# 
   177  0693                     	;# 
   178  0694                     	;# 
   179  0695                     	;# 
   180  0E8E                     	;# 
   181  0E8F                     	;# 
   182  0E90                     	;# 
   183  0E91                     	;# 
   184  0E92                     	;# 
   185  0E93                     	;# 
   186  0E94                     	;# 
   187  0E94                     	;# 
   188  0E95                     	;# 
   189  0E96                     	;# 
   190  0E97                     	;# 
   191  0E98                     	;# 
   192  0E99                     	;# 
   193  0E9A                     	;# 
   194  0E9B                     	;# 
   195  0E9C                     	;# 
   196  0E9D                     	;# 
   197  0E9E                     	;# 
   198  0E9F                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0016                     	;# 
   230  0017                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  0111                     	;# 
   257  0112                     	;# 
   258  0113                     	;# 
   259  0114                     	;# 
   260  0115                     	;# 
   261  0116                     	;# 
   262  0117                     	;# 
   263  0118                     	;# 
   264  0119                     	;# 
   265  011D                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  018E                     	;# 
   269  0191                     	;# 
   270  0191                     	;# 
   271  0192                     	;# 
   272  0193                     	;# 
   273  0193                     	;# 
   274  0194                     	;# 
   275  0195                     	;# 
   276  0196                     	;# 
   277  0197                     	;# 
   278  0199                     	;# 
   279  019A                     	;# 
   280  019B                     	;# 
   281  019B                     	;# 
   282  019C                     	;# 
   283  019D                     	;# 
   284  019E                     	;# 
   285  019F                     	;# 
   286  020C                     	;# 
   287  020D                     	;# 
   288  0211                     	;# 
   289  0211                     	;# 
   290  0212                     	;# 
   291  0212                     	;# 
   292  0213                     	;# 
   293  0213                     	;# 
   294  0214                     	;# 
   295  0214                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0216                     	;# 
   300  0216                     	;# 
   301  0217                     	;# 
   302  0217                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0394                     	;# 
   307  0395                     	;# 
   308  0396                     	;# 
   309  039A                     	;# 
   310  039B                     	;# 
   311  0611                     	;# 
   312  0612                     	;# 
   313  0613                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0615                     	;# 
   317  0616                     	;# 
   318  0616                     	;# 
   319  0691                     	;# 
   320  0692                     	;# 
   321  0693                     	;# 
   322  0694                     	;# 
   323  0695                     	;# 
   324  0E8E                     	;# 
   325  0E8F                     	;# 
   326  0E90                     	;# 
   327  0E91                     	;# 
   328  0E92                     	;# 
   329  0E93                     	;# 
   330  0E94                     	;# 
   331  0E94                     	;# 
   332  0E95                     	;# 
   333  0E96                     	;# 
   334  0E97                     	;# 
   335  0E98                     	;# 
   336  0E99                     	;# 
   337  0E9A                     	;# 
   338  0E9B                     	;# 
   339  0E9C                     	;# 
   340  0E9D                     	;# 
   341  0E9E                     	;# 
   342  0E9F                     	;# 
   343  0FE4                     	;# 
   344  0FE5                     	;# 
   345  0FE6                     	;# 
   346  0FE7                     	;# 
   347  0FE8                     	;# 
   348  0FE9                     	;# 
   349  0FEA                     	;# 
   350  0FEB                     	;# 
   351  0FED                     	;# 
   352  0FEE                     	;# 
   353  0FEF                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0008                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  0011                     	;# 
   370  0012                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0016                     	;# 
   374  0017                     	;# 
   375  0018                     	;# 
   376  0019                     	;# 
   377  001A                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0095                     	;# 
   386  0096                     	;# 
   387  0097                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009A                     	;# 
   391  009B                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  010D                     	;# 
   399  010E                     	;# 
   400  0111                     	;# 
   401  0112                     	;# 
   402  0113                     	;# 
   403  0114                     	;# 
   404  0115                     	;# 
   405  0116                     	;# 
   406  0117                     	;# 
   407  0118                     	;# 
   408  0119                     	;# 
   409  011D                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  018E                     	;# 
   413  0191                     	;# 
   414  0191                     	;# 
   415  0192                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0194                     	;# 
   419  0195                     	;# 
   420  0196                     	;# 
   421  0197                     	;# 
   422  0199                     	;# 
   423  019A                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020D                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0391                     	;# 
   448  0392                     	;# 
   449  0393                     	;# 
   450  0394                     	;# 
   451  0395                     	;# 
   452  0396                     	;# 
   453  039A                     	;# 
   454  039B                     	;# 
   455  0611                     	;# 
   456  0612                     	;# 
   457  0613                     	;# 
   458  0613                     	;# 
   459  0614                     	;# 
   460  0615                     	;# 
   461  0616                     	;# 
   462  0616                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0E8E                     	;# 
   469  0E8F                     	;# 
   470  0E90                     	;# 
   471  0E91                     	;# 
   472  0E92                     	;# 
   473  0E93                     	;# 
   474  0E94                     	;# 
   475  0E94                     	;# 
   476  0E95                     	;# 
   477  0E96                     	;# 
   478  0E97                     	;# 
   479  0E98                     	;# 
   480  0E99                     	;# 
   481  0E9A                     	;# 
   482  0E9B                     	;# 
   483  0E9C                     	;# 
   484  0E9D                     	;# 
   485  0E9E                     	;# 
   486  0E9F                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  009F                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0111                     	;# 
   545  0112                     	;# 
   546  0113                     	;# 
   547  0114                     	;# 
   548  0115                     	;# 
   549  0116                     	;# 
   550  0117                     	;# 
   551  0118                     	;# 
   552  0119                     	;# 
   553  011D                     	;# 
   554  018C                     	;# 
   555  018D                     	;# 
   556  018E                     	;# 
   557  0191                     	;# 
   558  0191                     	;# 
   559  0192                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0194                     	;# 
   563  0195                     	;# 
   564  0196                     	;# 
   565  0197                     	;# 
   566  0199                     	;# 
   567  019A                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019D                     	;# 
   572  019E                     	;# 
   573  019F                     	;# 
   574  020C                     	;# 
   575  020D                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0391                     	;# 
   592  0392                     	;# 
   593  0393                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  039A                     	;# 
   598  039B                     	;# 
   599  0611                     	;# 
   600  0612                     	;# 
   601  0613                     	;# 
   602  0613                     	;# 
   603  0614                     	;# 
   604  0615                     	;# 
   605  0616                     	;# 
   606  0616                     	;# 
   607  0691                     	;# 
   608  0692                     	;# 
   609  0693                     	;# 
   610  0694                     	;# 
   611  0695                     	;# 
   612  0E8E                     	;# 
   613  0E8F                     	;# 
   614  0E90                     	;# 
   615  0E91                     	;# 
   616  0E92                     	;# 
   617  0E93                     	;# 
   618  0E94                     	;# 
   619  0E94                     	;# 
   620  0E95                     	;# 
   621  0E96                     	;# 
   622  0E97                     	;# 
   623  0E98                     	;# 
   624  0E99                     	;# 
   625  0E9A                     	;# 
   626  0E9B                     	;# 
   627  0E9C                     	;# 
   628  0E9D                     	;# 
   629  0E9E                     	;# 
   630  0E9F                     	;# 
   631  0FE4                     	;# 
   632  0FE5                     	;# 
   633  0FE6                     	;# 
   634  0FE7                     	;# 
   635  0FE8                     	;# 
   636  0FE9                     	;# 
   637  0FEA                     	;# 
   638  0FEB                     	;# 
   639  0FED                     	;# 
   640  0FEE                     	;# 
   641  0FEF                     	;# 
   642  0000                     	;# 
   643  0001                     	;# 
   644  0002                     	;# 
   645  0003                     	;# 
   646  0004                     	;# 
   647  0005                     	;# 
   648  0006                     	;# 
   649  0007                     	;# 
   650  0008                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  0011                     	;# 
   658  0012                     	;# 
   659  0015                     	;# 
   660  0016                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  0019                     	;# 
   665  001A                     	;# 
   666  001B                     	;# 
   667  001C                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0095                     	;# 
   674  0096                     	;# 
   675  0097                     	;# 
   676  0098                     	;# 
   677  0099                     	;# 
   678  009A                     	;# 
   679  009B                     	;# 
   680  009B                     	;# 
   681  009C                     	;# 
   682  009D                     	;# 
   683  009E                     	;# 
   684  009F                     	;# 
   685  010C                     	;# 
   686  010D                     	;# 
   687  010E                     	;# 
   688  0111                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0115                     	;# 
   693  0116                     	;# 
   694  0117                     	;# 
   695  0118                     	;# 
   696  0119                     	;# 
   697  011D                     	;# 
   698  018C                     	;# 
   699  018D                     	;# 
   700  018E                     	;# 
   701  0191                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  0193                     	;# 
   705  0193                     	;# 
   706  0194                     	;# 
   707  0195                     	;# 
   708  0196                     	;# 
   709  0197                     	;# 
   710  0199                     	;# 
   711  019A                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019C                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019F                     	;# 
   718  020C                     	;# 
   719  020D                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0394                     	;# 
   739  0395                     	;# 
   740  0396                     	;# 
   741  039A                     	;# 
   742  039B                     	;# 
   743  0611                     	;# 
   744  0612                     	;# 
   745  0613                     	;# 
   746  0613                     	;# 
   747  0614                     	;# 
   748  0615                     	;# 
   749  0616                     	;# 
   750  0616                     	;# 
   751  0691                     	;# 
   752  0692                     	;# 
   753  0693                     	;# 
   754  0694                     	;# 
   755  0695                     	;# 
   756  0E8E                     	;# 
   757  0E8F                     	;# 
   758  0E90                     	;# 
   759  0E91                     	;# 
   760  0E92                     	;# 
   761  0E93                     	;# 
   762  0E94                     	;# 
   763  0E94                     	;# 
   764  0E95                     	;# 
   765  0E96                     	;# 
   766  0E97                     	;# 
   767  0E98                     	;# 
   768  0E99                     	;# 
   769  0E9A                     	;# 
   770  0E9B                     	;# 
   771  0E9C                     	;# 
   772  0E9D                     	;# 
   773  0E9E                     	;# 
   774  0E9F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786                           
   787 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
   788  0000                     
   789 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
   790  0000                     
   791 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
   792  000B                     _INTCONbits	set	11
   793  0011                     _PIR1bits	set	17
   794  000D                     _PORTBbits	set	13
   795  000E                     _PORTCbits	set	14
   796  0099                     _OSCCONbits	set	153
   797  008C                     _TRISAbits	set	140
   798  008D                     _TRISBbits	set	141
   799  008E                     _TRISCbits	set	142
   800  011D                     _APFCON	set	285
   801  010C                     _LATAbits	set	268
   802  010D                     _LATBbits	set	269
   803  010E                     _LATCbits	set	270
   804  0191                     _PMADR	set	401
   805  0193                     _PMDAT	set	403
   806  018C                     _ANSELA	set	396
   807  018D                     _ANSELB	set	397
   808  018E                     _ANSELC	set	398
   809  019F                     _BAUDCON	set	415
   810  0195                     _PMCON1bits	set	405
   811  0199                     _RCREG	set	409
   812  019D                     _RCSTA	set	413
   813  019D                     _RCSTAbits	set	413
   814  019C                     _SPBRGH	set	412
   815  019B                     _SPBRGL	set	411
   816  019A                     _TXREG	set	410
   817  019E                     _TXSTA	set	414
   818  019E                     _TXSTAbits	set	414
   819  039B                     _ACTCONbits	set	923
   820                           
   821                           	psect	strings
   822  0018                     __pstrings:	
   823  0018                     __stringtab:	
   824  0018  3400               	retlw	0
   825  0019                     __end_of__stringtab:	
   826  0019                     __stringdata:	
   827  0019                     STR_7:	
   828  0019  3450               	retlw	80	;'P'
   829  001A  344F               	retlw	79	;'O'
   830  001B  3454               	retlw	84	;'T'
   831  001C  3445               	retlw	69	;'E'
   832  001D  344E               	retlw	78	;'N'
   833  001E  3454               	retlw	84	;'T'
   834  001F  3449               	retlw	73	;'I'
   835  0020  344F               	retlw	79	;'O'
   836  0021  3453               	retlw	83	;'S'
   837  0022  3454               	retlw	84	;'T'
   838  0023  3441               	retlw	65	;'A'
   839  0024  3454               	retlw	84	;'T'
   840  0025  3449               	retlw	73	;'I'
   841  0026  3443               	retlw	67	;'C'
   842  0027  3400               	retlw	0
   843  0028                     STR_20:	
   844  0028  3453               	retlw	83	;'S'
   845  0029  3448               	retlw	72	;'H'
   846  002A  3455               	retlw	85	;'U'
   847  002B  344E               	retlw	78	;'N'
   848  002C  3454               	retlw	84	;'T'
   849  002D  3443               	retlw	67	;'C'
   850  002E  3441               	retlw	65	;'A'
   851  002F  344C               	retlw	76	;'L'
   852  0030  3453               	retlw	83	;'S'
   853  0031  3441               	retlw	65	;'A'
   854  0032  3456               	retlw	86	;'V'
   855  0033  3445               	retlw	69	;'E'
   856  0034  3420               	retlw	32	;' '
   857  0035  3400               	retlw	0
   858  0036                     STR_8:	
   859  0036  3447               	retlw	71	;'G'
   860  0037  3441               	retlw	65	;'A'
   861  0038  344C               	retlw	76	;'L'
   862  0039  3456               	retlw	86	;'V'
   863  003A  3441               	retlw	65	;'A'
   864  003B  344E               	retlw	78	;'N'
   865  003C  344F               	retlw	79	;'O'
   866  003D  3453               	retlw	83	;'S'
   867  003E  3454               	retlw	84	;'T'
   868  003F  3441               	retlw	65	;'A'
   869  0040  3454               	retlw	84	;'T'
   870  0041  3449               	retlw	73	;'I'
   871  0042  3443               	retlw	67	;'C'
   872  0043  3400               	retlw	0
   873  0044                     STR_19:	
   874  0044  3453               	retlw	83	;'S'
   875  0045  3448               	retlw	72	;'H'
   876  0046  3455               	retlw	85	;'U'
   877  0047  344E               	retlw	78	;'N'
   878  0048  3454               	retlw	84	;'T'
   879  0049  3443               	retlw	67	;'C'
   880  004A  3441               	retlw	65	;'A'
   881  004B  344C               	retlw	76	;'L'
   882  004C  3452               	retlw	82	;'R'
   883  004D  3445               	retlw	69	;'E'
   884  004E  3441               	retlw	65	;'A'
   885  004F  3444               	retlw	68	;'D'
   886  0050  3400               	retlw	0
   887  0051                     STR_16:	
   888  0051  344F               	retlw	79	;'O'
   889  0052  3446               	retlw	70	;'F'
   890  0053  3446               	retlw	70	;'F'
   891  0054  3453               	retlw	83	;'S'
   892  0055  3445               	retlw	69	;'E'
   893  0056  3454               	retlw	84	;'T'
   894  0057  3453               	retlw	83	;'S'
   895  0058  3441               	retlw	65	;'A'
   896  0059  3456               	retlw	86	;'V'
   897  005A  3445               	retlw	69	;'E'
   898  005B  3420               	retlw	32	;' '
   899  005C  3400               	retlw	0
   900  005D                     STR_18:	
   901  005D  3444               	retlw	68	;'D'
   902  005E  3441               	retlw	65	;'A'
   903  005F  3443               	retlw	67	;'C'
   904  0060  3443               	retlw	67	;'C'
   905  0061  3441               	retlw	65	;'A'
   906  0062  344C               	retlw	76	;'L'
   907  0063  3453               	retlw	83	;'S'
   908  0064  3445               	retlw	69	;'E'
   909  0065  3454               	retlw	84	;'T'
   910  0066  3420               	retlw	32	;' '
   911  0067  3400               	retlw	0
   912  0068                     STR_15:	
   913  0068  344F               	retlw	79	;'O'
   914  0069  3446               	retlw	70	;'F'
   915  006A  3446               	retlw	70	;'F'
   916  006B  3453               	retlw	83	;'S'
   917  006C  3445               	retlw	69	;'E'
   918  006D  3454               	retlw	84	;'T'
   919  006E  3452               	retlw	82	;'R'
   920  006F  3445               	retlw	69	;'E'
   921  0070  3441               	retlw	65	;'A'
   922  0071  3444               	retlw	68	;'D'
   923  0072  3400               	retlw	0
   924  0073                     STR_17:	
   925  0073  3444               	retlw	68	;'D'
   926  0074  3441               	retlw	65	;'A'
   927  0075  3443               	retlw	67	;'C'
   928  0076  3443               	retlw	67	;'C'
   929  0077  3441               	retlw	65	;'A'
   930  0078  344C               	retlw	76	;'L'
   931  0079  3447               	retlw	71	;'G'
   932  007A  3445               	retlw	69	;'E'
   933  007B  3454               	retlw	84	;'T'
   934  007C  3400               	retlw	0
   935  007D                     STR_6:	
   936  007D  3443               	retlw	67	;'C'
   937  007E  3445               	retlw	69	;'E'
   938  007F  344C               	retlw	76	;'L'
   939  0080  344C               	retlw	76	;'L'
   940  0081  3420               	retlw	32	;' '
   941  0082  344F               	retlw	79	;'O'
   942  0083  3446               	retlw	70	;'F'
   943  0084  3446               	retlw	70	;'F'
   944  0085  3400               	retlw	0
   945  0086                     STR_1:	
   946  0086  3452               	retlw	82	;'R'
   947  0087  3465               	retlw	101	;'e'
   948  0088  3461               	retlw	97	;'a'
   949  0089  3464               	retlw	100	;'d'
   950  008A  3479               	retlw	121	;'y'
   951  008B  3421               	retlw	33	;'!'
   952  008C  340A               	retlw	10
   953  008D  3400               	retlw	0
   954  008E                     STR_12:	
   955  008E  3444               	retlw	68	;'D'
   956  008F  3441               	retlw	65	;'A'
   957  0090  3443               	retlw	67	;'C'
   958  0091  3453               	retlw	83	;'S'
   959  0092  3445               	retlw	69	;'E'
   960  0093  3454               	retlw	84	;'T'
   961  0094  3420               	retlw	32	;' '
   962  0095  3400               	retlw	0
   963  0096                     STR_9:	
   964  0096  3452               	retlw	82	;'R'
   965  0097  3441               	retlw	65	;'A'
   966  0098  344E               	retlw	78	;'N'
   967  0099  3447               	retlw	71	;'G'
   968  009A  3445               	retlw	69	;'E'
   969  009B  3420               	retlw	32	;' '
   970  009C  3431               	retlw	49	;'1'
   971  009D  3400               	retlw	0
   972  009E                     STR_10:	
   973  009E  3452               	retlw	82	;'R'
   974  009F  3441               	retlw	65	;'A'
   975  00A0  344E               	retlw	78	;'N'
   976  00A1  3447               	retlw	71	;'G'
   977  00A2  3445               	retlw	69	;'E'
   978  00A3  3420               	retlw	32	;' '
   979  00A4  3432               	retlw	50	;'2'
   980  00A5  3400               	retlw	0
   981  00A6                     STR_11:	
   982  00A6  3452               	retlw	82	;'R'
   983  00A7  3441               	retlw	65	;'A'
   984  00A8  344E               	retlw	78	;'N'
   985  00A9  3447               	retlw	71	;'G'
   986  00AA  3445               	retlw	69	;'E'
   987  00AB  3420               	retlw	32	;' '
   988  00AC  3433               	retlw	51	;'3'
   989  00AD  3400               	retlw	0
   990  00AE                     STR_14:	
   991  00AE  3441               	retlw	65	;'A'
   992  00AF  3444               	retlw	68	;'D'
   993  00B0  3443               	retlw	67	;'C'
   994  00B1  3452               	retlw	82	;'R'
   995  00B2  3445               	retlw	69	;'E'
   996  00B3  3441               	retlw	65	;'A'
   997  00B4  3444               	retlw	68	;'D'
   998  00B5  3400               	retlw	0
   999  00B6                     STR_5:	
  1000  00B6  3443               	retlw	67	;'C'
  1001  00B7  3445               	retlw	69	;'E'
  1002  00B8  344C               	retlw	76	;'L'
  1003  00B9  344C               	retlw	76	;'L'
  1004  00BA  3420               	retlw	32	;' '
  1005  00BB  344F               	retlw	79	;'O'
  1006  00BC  344E               	retlw	78	;'N'
  1007  00BD  3400               	retlw	0
  1008  00BE                     STR_13:	
  1009  00BE  3444               	retlw	68	;'D'
  1010  00BF  3441               	retlw	65	;'A'
  1011  00C0  3443               	retlw	67	;'C'
  1012  00C1  3443               	retlw	67	;'C'
  1013  00C2  3441               	retlw	65	;'A'
  1014  00C3  344C               	retlw	76	;'L'
  1015  00C4  3400               	retlw	0
  1016  00C5                     STR_4:	
  1017  00C5  3457               	retlw	87	;'W'
  1018  00C6  3441               	retlw	65	;'A'
  1019  00C7  3449               	retlw	73	;'I'
  1020  00C8  3454               	retlw	84	;'T'
  1021  00C9  340A               	retlw	10
  1022  00CA  3400               	retlw	0
  1023  00CB                     STR_3:	
  1024  00CB  344F               	retlw	79	;'O'
  1025  00CC  344B               	retlw	75	;'K'
  1026  00CD  340A               	retlw	10
  1027  00CE  3400               	retlw	0
  1028  00CF                     STR_2:	
  1029  00CF  343F               	retlw	63	;'?'
  1030  00D0  340A               	retlw	10
  1031  00D1  3400               	retlw	0
  1032  00D2                     __end_of__stringdata:	
  1033                           
  1034                           ; #config settings
  1035  0000                     
  1036                           	psect	cinit
  1037  000D                     start_initialization:	
  1038  000D                     __initialization:	
  1039                           
  1040                           ; Clear objects allocated to COMMON
  1041  000D  01FC               	clrf	__pbssCOMMON& (0+127)
  1042                           
  1043                           ; Clear objects allocated to BANK0
  1044  000E  3020               	movlw	low __pbssBANK0
  1045  000F  0084               	movwf	4
  1046  0010  3000               	movlw	high __pbssBANK0
  1047  0011  0085               	movwf	5
  1048  0012  3039               	movlw	57
  1049  0013  3187  27EC         	fcall	clear_ram0
  1050  0015                     end_of_initialization:	
  1051                           ;End of C runtime variable initialization code
  1052                           
  1053  0015                     __end_of__initialization:	
  1054  0015  0020               	movlb	0
  1055  0016  3185  2D07         	ljmp	_main	;jump to C main() function
  1056                           
  1057                           	psect	bssCOMMON
  1058  007C                     __pbssCOMMON:	
  1059  007C                     _received_data_length:	
  1060  007C                     	ds	1
  1061                           
  1062                           	psect	bssBANK0
  1063  0020                     __pbssBANK0:	
  1064  0020                     _EUSART_ErrorHandler:	
  1065  0020                     	ds	1
  1066  0021                     _EUSART_FramingErrorHandler:	
  1067  0021                     	ds	1
  1068  0022                     _EUSART_OverrunErrorHandler:	
  1069  0022                     	ds	1
  1070  0023                     _eusartRxLastError:	
  1071  0023                     	ds	1
  1072  0024                     _transmit_data_length:	
  1073  0024                     	ds	1
  1074  0025                     _heflashbuffer:	
  1075  0025                     	ds	32
  1076  0045                     _uart_command:	
  1077  0045                     	ds	20
  1078                           
  1079                           	psect	clrtext
  1080  07EC                     clear_ram0:	
  1081                           ;	Called with FSR0 containing the base address, and
  1082                           ;	WREG with the size to clear
  1083                           
  1084  07EC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1085  07ED                     clrloop0:	
  1086  07ED  0180               	clrf	0	;clear RAM location pointed to by FSR
  1087  07EE  3101               	addfsr 0,1
  1088  07EF  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1089  07F0  2FED               	goto	clrloop0	;have we reached the end yet?
  1090  07F1  3400               	retlw	0	;all done for this memory range, return
  1091                           
  1092                           	psect	cstackCOMMON
  1093  0070                     __pcstackCOMMON:	
  1094  0070                     ?_SPIDelay:	
  1095  0070                     ?_WriteByteSPI:	
  1096                           ; 0 bytes @ 0x0
  1097                           
  1098  0070                     ?_ClockPulse:	
  1099                           ; 0 bytes @ 0x0
  1100                           
  1101  0070                     ?_EUSART_Initialize:	
  1102                           ; 0 bytes @ 0x0
  1103                           
  1104  0070                     ?_USART_Send_6bytes:	
  1105                           ; 0 bytes @ 0x0
  1106                           
  1107  0070                     ?_EUSART_SetFramingErrorHandler:	
  1108                           ; 0 bytes @ 0x0
  1109                           
  1110  0070                     ?_EUSART_SetOverrunErrorHandler:	
  1111                           ; 0 bytes @ 0x0
  1112                           
  1113  0070                     ?_EUSART_SetErrorHandler:	
  1114                           ; 0 bytes @ 0x0
  1115                           
  1116  0070                     ?__unlock:	
  1117                           ; 0 bytes @ 0x0
  1118                           
  1119  0070                     ?_InitializeSPI:	
  1120                           ; 0 bytes @ 0x0
  1121                           
  1122  0070                     ?_DAC1220_Reset:	
  1123                           ; 0 bytes @ 0x0
  1124                           
  1125  0070                     ?_DAC1220_Init:	
  1126                           ; 0 bytes @ 0x0
  1127                           
  1128  0070                     ?_DAC1220_SelfCal:	
  1129                           ; 0 bytes @ 0x0
  1130                           
  1131  0070                     ?_InitializeIO:	
  1132                           ; 0 bytes @ 0x0
  1133                           
  1134  0070                     ?_command_unknown:	
  1135                           ; 0 bytes @ 0x0
  1136                           
  1137  0070                     ?_send_OK:	
  1138                           ; 0 bytes @ 0x0
  1139                           
  1140  0070                     ?_send_WAIT:	
  1141                           ; 0 bytes @ 0x0
  1142                           
  1143  0070                     ?_command_cell_on:	
  1144                           ; 0 bytes @ 0x0
  1145                           
  1146  0070                     ?_command_cell_off:	
  1147                           ; 0 bytes @ 0x0
  1148                           
  1149  0070                     ?_command_mode_potentiostatic:	
  1150                           ; 0 bytes @ 0x0
  1151                           
  1152  0070                     ?_command_mode_galvanostatic:	
  1153                           ; 0 bytes @ 0x0
  1154                           
  1155  0070                     ?_command_range1:	
  1156                           ; 0 bytes @ 0x0
  1157                           
  1158  0070                     ?_command_range2:	
  1159                           ; 0 bytes @ 0x0
  1160                           
  1161  0070                     ?_command_range3:	
  1162                           ; 0 bytes @ 0x0
  1163                           
  1164  0070                     ?_command_set_dac:	
  1165                           ; 0 bytes @ 0x0
  1166                           
  1167  0070                     ?_command_calibrate_dac:	
  1168                           ; 0 bytes @ 0x0
  1169                           
  1170  0070                     ?_command_read_adc:	
  1171                           ; 0 bytes @ 0x0
  1172                           
  1173  0070                     ?_command_read_offset:	
  1174                           ; 0 bytes @ 0x0
  1175                           
  1176  0070                     ?_command_save_offset:	
  1177                           ; 0 bytes @ 0x0
  1178                           
  1179  0070                     ?_command_read_shuntcalibration:	
  1180                           ; 0 bytes @ 0x0
  1181                           
  1182  0070                     ?_command_save_shuntcalibration:	
  1183                           ; 0 bytes @ 0x0
  1184                           
  1185  0070                     ?_command_read_dac_cal:	
  1186                           ; 0 bytes @ 0x0
  1187                           
  1188  0070                     ?_command_set_dac_cal:	
  1189                           ; 0 bytes @ 0x0
  1190                           
  1191  0070                     ?_interpret_command:	
  1192                           ; 0 bytes @ 0x0
  1193                           
  1194  0070                     ?_isr:	
  1195                           ; 0 bytes @ 0x0
  1196                           
  1197  0070                     ??_isr:	
  1198                           ; 0 bytes @ 0x0
  1199                           
  1200  0070                     ?_EUSART_Write:	
  1201                           ; 0 bytes @ 0x0
  1202                           
  1203  0070                     ?_ReadByteSPI:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0070                     ?_EUSART_is_rx_ready:	
  1207                           ; 1 bytes @ 0x0
  1208                           
  1209  0070                     ?_EUSART_Read:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0070                     ?_MCP3550_Read:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     ?_main:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218                           
  1219                           ; 2 bytes @ 0x0
  1220  0070                     	ds	1
  1221  0071                     ??_SPIDelay:	
  1222  0071                     ??_EUSART_is_rx_ready:	
  1223                           ; 0 bytes @ 0x1
  1224                           
  1225  0071                     ??_EUSART_Read:	
  1226                           ; 0 bytes @ 0x1
  1227                           
  1228  0071                     ??_EUSART_SetFramingErrorHandler:	
  1229                           ; 0 bytes @ 0x1
  1230                           
  1231  0071                     ??_EUSART_SetOverrunErrorHandler:	
  1232                           ; 0 bytes @ 0x1
  1233                           
  1234  0071                     ??_EUSART_SetErrorHandler:	
  1235                           ; 0 bytes @ 0x1
  1236                           
  1237  0071                     ??__unlock:	
  1238                           ; 0 bytes @ 0x1
  1239                           
  1240  0071                     ?_FLASH_write:	
  1241                           ; 0 bytes @ 0x1
  1242                           
  1243  0071                     ?_FLASH_erase:	
  1244                           ; 0 bytes @ 0x1
  1245                           
  1246  0071                     ??_InitializeSPI:	
  1247                           ; 0 bytes @ 0x1
  1248                           
  1249  0071                     ??_EUSART_Write:	
  1250                           ; 0 bytes @ 0x1
  1251                           
  1252  0071                     ?_strlen:	
  1253                           ; 0 bytes @ 0x1
  1254                           
  1255  0071                     ?_strncmp:	
  1256                           ; 2 bytes @ 0x1
  1257                           
  1258  0071                     ?_FLASH_read:	
  1259                           ; 2 bytes @ 0x1
  1260                           
  1261  0071                     EUSART_Write@txData:	
  1262                           ; 2 bytes @ 0x1
  1263                           
  1264  0071                     strncmp@s2:	
  1265                           ; 1 bytes @ 0x1
  1266                           
  1267  0071                     FLASH_read@address:	
  1268                           ; 1 bytes @ 0x1
  1269                           
  1270  0071                     FLASH_write@address:	
  1271                           ; 2 bytes @ 0x1
  1272                           
  1273  0071                     FLASH_erase@address:	
  1274                           ; 2 bytes @ 0x1
  1275                           
  1276                           
  1277                           ; 2 bytes @ 0x1
  1278  0071                     	ds	1
  1279  0072                     ?_Read2BytesSPI:	
  1280  0072                     ??_WriteByteSPI:	
  1281                           ; 0 bytes @ 0x2
  1282                           
  1283  0072                     ??_ReadByteSPI:	
  1284                           ; 0 bytes @ 0x2
  1285                           
  1286  0072                     ??_ClockPulse:	
  1287                           ; 0 bytes @ 0x2
  1288                           
  1289  0072                     ??_USART_Send_6bytes:	
  1290                           ; 0 bytes @ 0x2
  1291                           
  1292  0072                     ??_DAC1220_Reset:	
  1293                           ; 0 bytes @ 0x2
  1294                           
  1295  0072                     Read2BytesSPI@data2_byte:	
  1296                           ; 0 bytes @ 0x2
  1297                           
  1298  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1299                           ; 1 bytes @ 0x2
  1300                           
  1301  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1302                           ; 1 bytes @ 0x2
  1303                           
  1304  0072                     EUSART_SetErrorHandler@interruptHandler:	
  1305                           ; 1 bytes @ 0x2
  1306                           
  1307  0072                     strncmp@len:	
  1308                           ; 1 bytes @ 0x2
  1309                           
  1310                           
  1311                           ; 2 bytes @ 0x2
  1312  0072                     	ds	1
  1313  0073                     ??_Read2BytesSPI:	
  1314  0073                     ??_EUSART_Initialize:	
  1315                           ; 0 bytes @ 0x3
  1316                           
  1317  0073                     ??_strlen:	
  1318                           ; 0 bytes @ 0x3
  1319                           
  1320  0073                     ??_FLASH_read:	
  1321                           ; 0 bytes @ 0x3
  1322                           
  1323  0073                     ??_FLASH_erase:	
  1324                           ; 0 bytes @ 0x3
  1325                           
  1326  0073                     ?_HEFLASH_readBlock:	
  1327                           ; 0 bytes @ 0x3
  1328                           
  1329  0073                     FLASH_erase@temp:	
  1330                           ; 1 bytes @ 0x3
  1331                           
  1332  0073                     HEFLASH_readBlock@radd:	
  1333                           ; 1 bytes @ 0x3
  1334                           
  1335  0073                     ReadByteSPI@bit_counter:	
  1336                           ; 1 bytes @ 0x3
  1337                           
  1338  0073                     WriteByteSPI@data_byte:	
  1339                           ; 1 bytes @ 0x3
  1340                           
  1341  0073                     USART_Send_6bytes@dataToSend:	
  1342                           ; 1 bytes @ 0x3
  1343                           
  1344  0073                     FLASH_write@data:	
  1345                           ; 1 bytes @ 0x3
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x3
  1349  0073                     	ds	1
  1350  0074                     ??_strncmp:	
  1351  0074                     HEFLASH_readBlock@count:	
  1352                           ; 0 bytes @ 0x4
  1353                           
  1354  0074                     Read2BytesSPI@bit_counter:	
  1355                           ; 1 bytes @ 0x4
  1356                           
  1357  0074                     ReadByteSPI@data_byte:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360  0074                     WriteByteSPI@bit_counter:	
  1361                           ; 1 bytes @ 0x4
  1362                           
  1363  0074                     USART_Send_6bytes@i:	
  1364                           ; 1 bytes @ 0x4
  1365                           
  1366                           
  1367                           ; 1 bytes @ 0x4
  1368  0074                     	ds	1
  1369  0075                     ??_HEFLASH_readBlock:	
  1370  0075                     ?_DAC1220_Write2Bytes:	
  1371                           ; 0 bytes @ 0x5
  1372                           
  1373  0075                     ?_DAC1220_Write3Bytes:	
  1374                           ; 0 bytes @ 0x5
  1375                           
  1376  0075                     ?_DAC1220_Read3Bytes:	
  1377                           ; 0 bytes @ 0x5
  1378                           
  1379  0075                     FLASH_write@latch:	
  1380                           ; 0 bytes @ 0x5
  1381                           
  1382  0075                     DAC1220_Write2Bytes@byte1:	
  1383                           ; 1 bytes @ 0x5
  1384                           
  1385  0075                     DAC1220_Write3Bytes@byte1:	
  1386                           ; 1 bytes @ 0x5
  1387                           
  1388  0075                     DAC1220_Read3Bytes@byte1:	
  1389                           ; 1 bytes @ 0x5
  1390                           
  1391  0075                     Read2BytesSPI@data1_byte:	
  1392                           ; 1 bytes @ 0x5
  1393                           
  1394                           
  1395                           ; 1 bytes @ 0x5
  1396  0075                     	ds	1
  1397  0076                     ??_FLASH_write:	
  1398  0076                     ??_MCP3550_Read:	
  1399                           ; 0 bytes @ 0x6
  1400                           
  1401  0076                     FLASH_write@temp:	
  1402                           ; 0 bytes @ 0x6
  1403                           
  1404  0076                     DAC1220_Write2Bytes@byte2:	
  1405                           ; 1 bytes @ 0x6
  1406                           
  1407  0076                     DAC1220_Write3Bytes@byte2:	
  1408                           ; 1 bytes @ 0x6
  1409                           
  1410  0076                     DAC1220_Read3Bytes@byte2:	
  1411                           ; 1 bytes @ 0x6
  1412                           
  1413  0076                     strncmp@s1:	
  1414                           ; 1 bytes @ 0x6
  1415                           
  1416                           
  1417                           ; 1 bytes @ 0x6
  1418  0076                     	ds	1
  1419  0077                     ??_DAC1220_Write2Bytes:	
  1420  0077                     ?_HEFLASH_writeBlock:	
  1421                           ; 0 bytes @ 0x7
  1422                           
  1423  0077                     HEFLASH_writeBlock@data:	
  1424                           ; 1 bytes @ 0x7
  1425                           
  1426  0077                     HEFLASH_readBlock@buffer:	
  1427                           ; 1 bytes @ 0x7
  1428                           
  1429  0077                     MCP3550_Read@data_ready:	
  1430                           ; 1 bytes @ 0x7
  1431                           
  1432  0077                     DAC1220_Write2Bytes@address:	
  1433                           ; 1 bytes @ 0x7
  1434                           
  1435  0077                     DAC1220_Write3Bytes@byte3:	
  1436                           ; 1 bytes @ 0x7
  1437                           
  1438  0077                     DAC1220_Read3Bytes@byte3:	
  1439                           ; 1 bytes @ 0x7
  1440                           
  1441  0077                     strlen@s:	
  1442                           ; 1 bytes @ 0x7
  1443                           
  1444                           
  1445                           ; 1 bytes @ 0x7
  1446  0077                     	ds	1
  1447  0078                     ??_DAC1220_Write3Bytes:	
  1448  0078                     ??_DAC1220_Read3Bytes:	
  1449                           ; 0 bytes @ 0x8
  1450                           
  1451  0078                     ??_DAC1220_SelfCal:	
  1452                           ; 0 bytes @ 0x8
  1453                           
  1454  0078                     HEFLASH_writeBlock@count:	
  1455                           ; 0 bytes @ 0x8
  1456                           
  1457  0078                     MCP3550_Read@adc_data:	
  1458                           ; 1 bytes @ 0x8
  1459                           
  1460  0078                     DAC1220_Write3Bytes@address:	
  1461                           ; 1 bytes @ 0x8
  1462                           
  1463  0078                     strlen@cp:	
  1464                           ; 1 bytes @ 0x8
  1465                           
  1466  0078                     HEFLASH_readBlock@add:	
  1467                           ; 1 bytes @ 0x8
  1468                           
  1469                           
  1470                           ; 2 bytes @ 0x8
  1471  0078                     	ds	1
  1472  0079                     ?_USART_Send:	
  1473  0079                     ??_HEFLASH_writeBlock:	
  1474                           ; 0 bytes @ 0x9
  1475                           
  1476  0079                     ??_DAC1220_Init:	
  1477                           ; 0 bytes @ 0x9
  1478                           
  1479  0079                     DAC1220_Read3Bytes@address:	
  1480                           ; 0 bytes @ 0x9
  1481                           
  1482  0079                     USART_Send@dataLength:	
  1483                           ; 1 bytes @ 0x9
  1484                           
  1485                           
  1486                           ; 1 bytes @ 0x9
  1487  0079                     	ds	1
  1488  007A                     ??_USART_Send:	
  1489  007A                     ??_command_read_offset:	
  1490                           ; 0 bytes @ 0xA
  1491                           
  1492  007A                     ??_command_read_shuntcalibration:	
  1493                           ; 0 bytes @ 0xA
  1494                           
  1495  007A                     ??_command_read_dac_cal:	
  1496                           ; 0 bytes @ 0xA
  1497                           
  1498                           
  1499                           ; 0 bytes @ 0xA
  1500  007A                     	ds	1
  1501  007B                     ??_command_unknown:	
  1502  007B                     ??_send_OK:	
  1503                           ; 0 bytes @ 0xB
  1504                           
  1505  007B                     ??_send_WAIT:	
  1506                           ; 0 bytes @ 0xB
  1507                           
  1508  007B                     InitializeIO@startReply:	
  1509                           ; 0 bytes @ 0xB
  1510                           
  1511                           
  1512                           ; 1 bytes @ 0xB
  1513  007B                     	ds	1
  1514  007C                     ??_command_cell_on:	
  1515  007C                     ??_command_cell_off:	
  1516                           ; 0 bytes @ 0xC
  1517                           
  1518  007C                     ??_command_mode_potentiostatic:	
  1519                           ; 0 bytes @ 0xC
  1520                           
  1521  007C                     ??_command_mode_galvanostatic:	
  1522                           ; 0 bytes @ 0xC
  1523                           
  1524  007C                     ??_command_read_adc:	
  1525                           ; 0 bytes @ 0xC
  1526                           
  1527                           
  1528                           	psect	cstackBANK0
  1529  0059                     __pcstackBANK0:	
  1530                           ; 0 bytes @ 0xC
  1531                           
  1532  0059                     HEFLASH_writeBlock@radd:	
  1533  0059                     USART_Send@dataToSend:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536                           
  1537                           ; 1 bytes @ 0x0
  1538  0059                     	ds	1
  1539  005A                     USART_Send@i:	
  1540  005A                     HEFLASH_writeBlock@add:	
  1541                           ; 1 bytes @ 0x1
  1542                           
  1543                           
  1544                           ; 2 bytes @ 0x1
  1545  005A                     	ds	1
  1546  005B                     ??_InitializeIO:	
  1547  005B                     command_unknown@reply:	
  1548                           ; 0 bytes @ 0x2
  1549                           
  1550  005B                     send_OK@reply:	
  1551                           ; 1 bytes @ 0x2
  1552                           
  1553  005B                     send_WAIT@reply:	
  1554                           ; 1 bytes @ 0x2
  1555                           
  1556                           
  1557                           ; 1 bytes @ 0x2
  1558  005B                     	ds	1
  1559  005C                     ??_command_range1:	
  1560  005C                     ??_command_range2:	
  1561                           ; 0 bytes @ 0x3
  1562                           
  1563  005C                     ??_command_range3:	
  1564                           ; 0 bytes @ 0x3
  1565                           
  1566  005C                     ??_command_set_dac:	
  1567                           ; 0 bytes @ 0x3
  1568                           
  1569  005C                     ??_command_calibrate_dac:	
  1570                           ; 0 bytes @ 0x3
  1571                           
  1572  005C                     ??_command_save_offset:	
  1573                           ; 0 bytes @ 0x3
  1574                           
  1575  005C                     ??_command_save_shuntcalibration:	
  1576                           ; 0 bytes @ 0x3
  1577                           
  1578  005C                     ??_command_set_dac_cal:	
  1579                           ; 0 bytes @ 0x3
  1580                           
  1581  005C                     command_read_adc@adc_data:	
  1582                           ; 0 bytes @ 0x3
  1583                           
  1584                           
  1585                           ; 6 bytes @ 0x3
  1586  005C                     	ds	1
  1587  005D                     command_set_dac@dac_data:	
  1588                           
  1589                           ; 1 bytes @ 0x4
  1590  005D                     	ds	1
  1591  005E                     command_save_offset@offset_data:	
  1592  005E                     command_save_shuntcalibration@shuntcalibration_data:	
  1593                           ; 1 bytes @ 0x5
  1594                           
  1595  005E                     command_set_dac_cal@dac_cal_data:	
  1596                           ; 1 bytes @ 0x5
  1597                           
  1598                           
  1599                           ; 1 bytes @ 0x5
  1600  005E                     	ds	1
  1601  005F                     command_calibrate_dac@data:	
  1602                           
  1603                           ; 6 bytes @ 0x6
  1604  005F                     	ds	6
  1605  0065                     ??_interpret_command:	
  1606                           
  1607                           ; 0 bytes @ 0xC
  1608  0065                     	ds	1
  1609  0066                     ??_main:	
  1610                           
  1611                           ; 0 bytes @ 0xD
  1612  0066                     	ds	1
  1613  0067                     main@i:	
  1614                           
  1615                           ; 1 bytes @ 0xE
  1616  0067                     	ds	1
  1617  0068                     main@c:	
  1618                           
  1619                           ; 1 bytes @ 0xF
  1620  0068                     	ds	1
  1621                           
  1622                           	psect	maintext
  1623  0507                     __pmaintext:	
  1624 ;;
  1625 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1626 ;;
  1627 ;; *************** function _main *****************
  1628 ;; Defined at:
  1629 ;;		line 290 in file "main.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;		None
  1632 ;; Auto vars:     Size  Location     Type
  1633 ;;  c               1   15[BANK0 ] unsigned char 
  1634 ;;  i               1   14[BANK0 ] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  2  301[COMMON] int 
  1637 ;; Registers used:
  1638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 17F/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1645 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1647 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1648 ;;Total ram usage:        3 bytes
  1649 ;; Hardware stack levels required when called:    8
  1650 ;; This function calls:
  1651 ;;		_InitializeIO
  1652 ;;		_interpret_command
  1653 ;;		_EUSART_is_rx_ready
  1654 ;;		_EUSART_Read
  1655 ;; This function is called by:
  1656 ;;		Startup code after reset
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           
  1661                           ;psect for function _main
  1662  0507                     _main:	
  1663                           
  1664                           ;main.c: 291: InitializeIO();
  1665                           
  1666                           ;incstack = 0
  1667                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1668  0507  3182  228A  3185   	fcall	_InitializeIO
  1669                           
  1670                           ;main.c: 295: ACTCONbits.ACTSRC = 1;
  1671  050A  0027               	movlb	7	; select bank7
  1672  050B  161B               	bsf	27,4	;volatile
  1673                           
  1674                           ;main.c: 296: ACTCONbits.ACTEN = 1;
  1675  050C  179B               	bsf	27,7	;volatile
  1676                           
  1677                           ;main.c: 299: INTCONbits.PEIE = 1;
  1678  050D  170B               	bsf	11,6	;volatile
  1679                           
  1680                           ;main.c: 300: INTCONbits.GIE = 1;
  1681  050E  178B               	bsf	11,7	;volatile
  1682  050F                     l2708:	
  1683                           ;main.c: 305: while (1)
  1684                           
  1685                           
  1686                           ;main.c: 306: {
  1687                           ;main.c: 321: if(EUSART_is_rx_ready()){
  1688  050F  3187  27F8  3185   	fcall	_EUSART_is_rx_ready
  1689  0512  3A00               	xorlw	0
  1690  0513  1903               	skipnz
  1691  0514  2D0F               	goto	l2708
  1692                           
  1693                           ;main.c: 322: uint8_t i=0;
  1694  0515  0020               	movlb	0	; select bank0
  1695  0516  01E7               	clrf	main@i
  1696  0517  2D24               	goto	L2
  1697  0518                     l2714:	
  1698                           ;main.c: 325: while((c!='\r') && (c!='\n')){
  1699                           
  1700                           ;main.c: 323: uint8_t c;
  1701                           ;main.c: 324: c=EUSART_Read();
  1702                           
  1703                           
  1704                           ;main.c: 326: uart_command[i]=c;
  1705  0518  0868               	movf	main@c,w
  1706  0519  00E6               	movwf	??_main
  1707  051A  0867               	movf	main@i,w
  1708  051B  3E45               	addlw	_uart_command& (0+255)
  1709  051C  0086               	movwf	6
  1710  051D  0187               	clrf	7
  1711  051E  0866               	movf	??_main,w
  1712  051F  0081               	movwf	1
  1713                           
  1714                           ;main.c: 327: i++;
  1715  0520  3001               	movlw	1
  1716  0521  00E6               	movwf	??_main
  1717  0522  0866               	movf	??_main,w
  1718  0523  07E7               	addwf	main@i,f
  1719  0524                     L2:	
  1720                           
  1721                           ;main.c: 328: c=EUSART_Read();
  1722  0524  3187  27B1  3185   	fcall	_EUSART_Read
  1723  0527  0020               	movlb	0	; select bank0
  1724  0528  00E6               	movwf	??_main
  1725  0529  0866               	movf	??_main,w
  1726  052A  00E8               	movwf	main@c
  1727  052B  0868               	movf	main@c,w
  1728  052C  3A0D               	xorlw	13
  1729  052D  1903               	skipnz
  1730  052E  2D33               	goto	l2724
  1731  052F  0868               	movf	main@c,w
  1732  0530  3A0A               	xorlw	10
  1733  0531  1D03               	skipz
  1734  0532  2D18               	goto	l2714
  1735  0533                     l2724:	
  1736                           
  1737                           ;main.c: 329: }
  1738                           ;main.c: 330: received_data_length=i;
  1739  0533  0867               	movf	main@i,w
  1740  0534  00E6               	movwf	??_main
  1741  0535  0866               	movf	??_main,w
  1742  0536  00FC               	movwf	_received_data_length
  1743                           
  1744                           ;main.c: 331: interpret_command();
  1745  0537  3181  2103  3185   	fcall	_interpret_command
  1746  053A  2D0F               	goto	l2708
  1747  053B                     __end_of_main:	
  1748                           ;main.c: 332: }
  1749                           ;main.c: 334: }
  1750                           ;main.c: 336: return 0;
  1751                           ;	Return value of _main is never used
  1752                           
  1753                           
  1754                           	psect	text1
  1755  07B1                     __ptext1:	
  1756 ;; *************** function _EUSART_Read *****************
  1757 ;; Defined at:
  1758 ;;		line 114 in file "eusart.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;		None
  1761 ;; Auto vars:     Size  Location     Type
  1762 ;;		None
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  1    wreg      unsigned char 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1776 ;;Total ram usage:        0 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    1
  1779 ;; This function calls:
  1780 ;;		Nothing
  1781 ;; This function is called by:
  1782 ;;		_main
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           
  1787                           ;psect for function _EUSART_Read
  1788  07B1                     _EUSART_Read:	
  1789  07B1                     l374:	
  1790                           ;eusart.c: 116: {
  1791                           
  1792                           ;eusart.c: 115: while(!PIR1bits.RCIF)
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _EUSART_Read: [wreg+status,2]
  1796                           
  1797  07B1  0020               	movlb	0	; select bank0
  1798  07B2  1E91               	btfss	17,5	;volatile
  1799  07B3  2FB1               	goto	l374
  1800                           
  1801                           ;eusart.c: 117: }
  1802                           ;eusart.c: 119: eusartRxLastError.status = 0;
  1803  07B4  01A3               	clrf	_eusartRxLastError	;volatile
  1804                           
  1805                           ;eusart.c: 121: if(1 == RCSTAbits.OERR)
  1806  07B5  0023               	movlb	3	; select bank3
  1807  07B6  1C9D               	btfss	29,1	;volatile
  1808  07B7  2FBA               	goto	l2166
  1809                           
  1810                           ;eusart.c: 122: {
  1811                           ;eusart.c: 125: RCSTAbits.CREN = 0;
  1812  07B8  121D               	bcf	29,4	;volatile
  1813                           
  1814                           ;eusart.c: 126: RCSTAbits.CREN = 1;
  1815  07B9  161D               	bsf	29,4	;volatile
  1816  07BA                     l2166:	
  1817                           
  1818                           ;eusart.c: 127: }
  1819                           ;eusart.c: 129: return RCREG;
  1820  07BA  0819               	movf	25,w	;volatile
  1821  07BB  0008               	return
  1822  07BC                     __end_of_EUSART_Read:	
  1823                           
  1824                           	psect	text2
  1825  07F8                     __ptext2:	
  1826 ;; *************** function _EUSART_is_rx_ready *****************
  1827 ;; Defined at:
  1828 ;;		line 100 in file "eusart.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      unsigned char 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1846 ;;Total ram usage:        0 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    1
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           
  1857                           ;psect for function _EUSART_is_rx_ready
  1858  07F8                     _EUSART_is_rx_ready:	
  1859                           
  1860                           ;eusart.c: 101: return (bool)(PIR1bits.RCIF);
  1861                           
  1862                           ;incstack = 0
  1863                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  1864  07F8  0020               	movlb	0	; select bank0
  1865  07F9  0E11               	swapf	17,w	;volatile
  1866  07FA  0C89               	rrf	9,f
  1867  07FB  3901               	andlw	1
  1868  07FC  0008               	return
  1869  07FD                     __end_of_EUSART_is_rx_ready:	
  1870                           
  1871                           	psect	text3
  1872  0103                     __ptext3:	
  1873 ;; *************** function _interpret_command *****************
  1874 ;; Defined at:
  1875 ;;		line 251 in file "main.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;		None               void
  1882 ;; Registers used:
  1883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1893 ;;Total ram usage:        1 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    7
  1896 ;; This function calls:
  1897 ;;		_command_unknown
  1898 ;;		_command_cell_on
  1899 ;;		_command_cell_off
  1900 ;;		_command_mode_potentiostatic
  1901 ;;		_command_mode_galvanostatic
  1902 ;;		_command_range1
  1903 ;;		_command_range2
  1904 ;;		_command_range3
  1905 ;;		_command_set_dac
  1906 ;;		_command_calibrate_dac
  1907 ;;		_command_read_adc
  1908 ;;		_command_read_offset
  1909 ;;		_command_save_offset
  1910 ;;		_command_read_shuntcalibration
  1911 ;;		_command_save_shuntcalibration
  1912 ;;		_command_read_dac_cal
  1913 ;;		_command_set_dac_cal
  1914 ;;		_strncmp
  1915 ;; This function is called by:
  1916 ;;		_main
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           
  1921                           ;psect for function _interpret_command
  1922  0103                     _interpret_command:	
  1923                           
  1924                           ;main.c: 252: if (received_data_length == 7 && strncmp(uart_command,"CELL ON",7) == 0)
  1925                           
  1926                           ;incstack = 0
  1927                           ; Regs used in _interpret_command: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1928  0103  087C               	movf	_received_data_length,w
  1929  0104  3A07               	xorlw	7
  1930  0105  1D03               	skipz
  1931  0106  291B               	goto	l2606
  1932  0107  30B6               	movlw	(STR_5| (0+32768))& (0+255)
  1933  0108  0020               	movlb	0	; select bank0
  1934  0109  00E5               	movwf	??_interpret_command
  1935  010A  0865               	movf	??_interpret_command,w
  1936  010B  00F1               	movwf	?_strncmp
  1937  010C  3007               	movlw	7
  1938  010D  00F2               	movwf	?_strncmp+1
  1939  010E  3000               	movlw	0
  1940  010F  00F3               	movwf	?_strncmp+2
  1941  0110  3045               	movlw	_uart_command& (0+255)
  1942  0111  3183  23AB  3181   	fcall	_strncmp
  1943  0114  0872               	movf	?_strncmp+1,w
  1944  0115  0471               	iorwf	?_strncmp,w
  1945  0116  1D03               	skipz
  1946  0117  291B               	goto	l2606
  1947                           
  1948                           ;main.c: 253: command_cell_on();
  1949  0118  3180  20E1         	fcall	_command_cell_on
  1950  011A  0008               	return
  1951  011B                     l2606:	
  1952                           
  1953                           ;main.c: 254: else if (received_data_length == 8 && strncmp(uart_command,"CELL OFF",8) =
      +                          = 0)
  1954  011B  087C               	movf	_received_data_length,w
  1955  011C  3A08               	xorlw	8
  1956  011D  1D03               	skipz
  1957  011E  2933               	goto	l2612
  1958  011F  307D               	movlw	(STR_6| (0+32768))& (0+255)
  1959  0120  0020               	movlb	0	; select bank0
  1960  0121  00E5               	movwf	??_interpret_command
  1961  0122  0865               	movf	??_interpret_command,w
  1962  0123  00F1               	movwf	?_strncmp
  1963  0124  3008               	movlw	8
  1964  0125  00F2               	movwf	?_strncmp+1
  1965  0126  3000               	movlw	0
  1966  0127  00F3               	movwf	?_strncmp+2
  1967  0128  3045               	movlw	_uart_command& (0+255)
  1968  0129  3183  23AB  3181   	fcall	_strncmp
  1969  012C  0872               	movf	?_strncmp+1,w
  1970  012D  0471               	iorwf	?_strncmp,w
  1971  012E  1D03               	skipz
  1972  012F  2933               	goto	l2612
  1973                           
  1974                           ;main.c: 255: command_cell_off();
  1975  0130  3180  20DC         	fcall	_command_cell_off
  1976  0132  0008               	return
  1977  0133                     l2612:	
  1978                           
  1979                           ;main.c: 256: else if (received_data_length == 14 && strncmp(uart_command,"POTENTIOSTATI
      +                          C",14) == 0)
  1980  0133  087C               	movf	_received_data_length,w
  1981  0134  3A0E               	xorlw	14
  1982  0135  1D03               	skipz
  1983  0136  294B               	goto	l2618
  1984  0137  3019               	movlw	(STR_7| (0+32768))& (0+255)
  1985  0138  0020               	movlb	0	; select bank0
  1986  0139  00E5               	movwf	??_interpret_command
  1987  013A  0865               	movf	??_interpret_command,w
  1988  013B  00F1               	movwf	?_strncmp
  1989  013C  300E               	movlw	14
  1990  013D  00F2               	movwf	?_strncmp+1
  1991  013E  3000               	movlw	0
  1992  013F  00F3               	movwf	?_strncmp+2
  1993  0140  3045               	movlw	_uart_command& (0+255)
  1994  0141  3183  23AB  3181   	fcall	_strncmp
  1995  0144  0872               	movf	?_strncmp+1,w
  1996  0145  0471               	iorwf	?_strncmp,w
  1997  0146  1D03               	skipz
  1998  0147  294B               	goto	l2618
  1999                           
  2000                           ;main.c: 257: command_mode_potentiostatic();
  2001  0148  3180  20D7         	fcall	_command_mode_potentiostatic
  2002  014A  0008               	return
  2003  014B                     l2618:	
  2004                           
  2005                           ;main.c: 258: else if (received_data_length == 13 && strncmp(uart_command,"GALVANOSTATIC
      +                          ",13) == 0)
  2006  014B  087C               	movf	_received_data_length,w
  2007  014C  3A0D               	xorlw	13
  2008  014D  1D03               	skipz
  2009  014E  2963               	goto	l2624
  2010  014F  3036               	movlw	(STR_8| (0+32768))& (0+255)
  2011  0150  0020               	movlb	0	; select bank0
  2012  0151  00E5               	movwf	??_interpret_command
  2013  0152  0865               	movf	??_interpret_command,w
  2014  0153  00F1               	movwf	?_strncmp
  2015  0154  300D               	movlw	13
  2016  0155  00F2               	movwf	?_strncmp+1
  2017  0156  3000               	movlw	0
  2018  0157  00F3               	movwf	?_strncmp+2
  2019  0158  3045               	movlw	_uart_command& (0+255)
  2020  0159  3183  23AB  3181   	fcall	_strncmp
  2021  015C  0872               	movf	?_strncmp+1,w
  2022  015D  0471               	iorwf	?_strncmp,w
  2023  015E  1D03               	skipz
  2024  015F  2963               	goto	l2624
  2025                           
  2026                           ;main.c: 259: command_mode_galvanostatic();
  2027  0160  3180  20D2         	fcall	_command_mode_galvanostatic
  2028  0162  0008               	return
  2029  0163                     l2624:	
  2030                           
  2031                           ;main.c: 260: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 1",7) ==
      +                           0)
  2032  0163  087C               	movf	_received_data_length,w
  2033  0164  3A07               	xorlw	7
  2034  0165  1D03               	skipz
  2035  0166  297B               	goto	l2630
  2036  0167  3096               	movlw	(STR_9| (0+32768))& (0+255)
  2037  0168  0020               	movlb	0	; select bank0
  2038  0169  00E5               	movwf	??_interpret_command
  2039  016A  0865               	movf	??_interpret_command,w
  2040  016B  00F1               	movwf	?_strncmp
  2041  016C  3007               	movlw	7
  2042  016D  00F2               	movwf	?_strncmp+1
  2043  016E  3000               	movlw	0
  2044  016F  00F3               	movwf	?_strncmp+2
  2045  0170  3045               	movlw	_uart_command& (0+255)
  2046  0171  3183  23AB  3181   	fcall	_strncmp
  2047  0174  0872               	movf	?_strncmp+1,w
  2048  0175  0471               	iorwf	?_strncmp,w
  2049  0176  1D03               	skipz
  2050  0177  297B               	goto	l2630
  2051                           
  2052                           ;main.c: 261: command_range1();
  2053  0178  3187  274B         	fcall	_command_range1
  2054  017A  0008               	return
  2055  017B                     l2630:	
  2056                           
  2057                           ;main.c: 262: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 2",7) ==
      +                           0)
  2058  017B  087C               	movf	_received_data_length,w
  2059  017C  3A07               	xorlw	7
  2060  017D  1D03               	skipz
  2061  017E  2993               	goto	l2636
  2062  017F  309E               	movlw	(STR_10| (0+32768))& (0+255)
  2063  0180  0020               	movlb	0	; select bank0
  2064  0181  00E5               	movwf	??_interpret_command
  2065  0182  0865               	movf	??_interpret_command,w
  2066  0183  00F1               	movwf	?_strncmp
  2067  0184  3007               	movlw	7
  2068  0185  00F2               	movwf	?_strncmp+1
  2069  0186  3000               	movlw	0
  2070  0187  00F3               	movwf	?_strncmp+2
  2071  0188  3045               	movlw	_uart_command& (0+255)
  2072  0189  3183  23AB  3181   	fcall	_strncmp
  2073  018C  0872               	movf	?_strncmp+1,w
  2074  018D  0471               	iorwf	?_strncmp,w
  2075  018E  1D03               	skipz
  2076  018F  2993               	goto	l2636
  2077                           
  2078                           ;main.c: 263: command_range2();
  2079  0190  3187  273A         	fcall	_command_range2
  2080  0192  0008               	return
  2081  0193                     l2636:	
  2082                           
  2083                           ;main.c: 264: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 3",7) ==
      +                           0)
  2084  0193  087C               	movf	_received_data_length,w
  2085  0194  3A07               	xorlw	7
  2086  0195  1D03               	skipz
  2087  0196  29AB               	goto	l2642
  2088  0197  30A6               	movlw	(STR_11| (0+32768))& (0+255)
  2089  0198  0020               	movlb	0	; select bank0
  2090  0199  00E5               	movwf	??_interpret_command
  2091  019A  0865               	movf	??_interpret_command,w
  2092  019B  00F1               	movwf	?_strncmp
  2093  019C  3007               	movlw	7
  2094  019D  00F2               	movwf	?_strncmp+1
  2095  019E  3000               	movlw	0
  2096  019F  00F3               	movwf	?_strncmp+2
  2097  01A0  3045               	movlw	_uart_command& (0+255)
  2098  01A1  3183  23AB  3181   	fcall	_strncmp
  2099  01A4  0872               	movf	?_strncmp+1,w
  2100  01A5  0471               	iorwf	?_strncmp,w
  2101  01A6  1D03               	skipz
  2102  01A7  29AB               	goto	l2642
  2103                           
  2104                           ;main.c: 265: command_range3();
  2105  01A8  3187  2729         	fcall	_command_range3
  2106  01AA  0008               	return
  2107  01AB                     l2642:	
  2108                           
  2109                           ;main.c: 266: else if (received_data_length == 10 && strncmp(uart_command,"DACSET ",7) =
      +                          = 0)
  2110  01AB  087C               	movf	_received_data_length,w
  2111  01AC  3A0A               	xorlw	10
  2112  01AD  1D03               	skipz
  2113  01AE  29C4               	goto	l2648
  2114  01AF  308E               	movlw	(STR_12| (0+32768))& (0+255)
  2115  01B0  0020               	movlb	0	; select bank0
  2116  01B1  00E5               	movwf	??_interpret_command
  2117  01B2  0865               	movf	??_interpret_command,w
  2118  01B3  00F1               	movwf	?_strncmp
  2119  01B4  3007               	movlw	7
  2120  01B5  00F2               	movwf	?_strncmp+1
  2121  01B6  3000               	movlw	0
  2122  01B7  00F3               	movwf	?_strncmp+2
  2123  01B8  3045               	movlw	_uart_command& (0+255)
  2124  01B9  3183  23AB  3181   	fcall	_strncmp
  2125  01BC  0872               	movf	?_strncmp+1,w
  2126  01BD  0471               	iorwf	?_strncmp,w
  2127  01BE  1D03               	skipz
  2128  01BF  29C4               	goto	l2648
  2129                           
  2130                           ;main.c: 267: command_set_dac(uart_command+7);
  2131  01C0  304C               	movlw	(_uart_command+7)& (0+255)
  2132  01C1  3185  25F0         	fcall	_command_set_dac
  2133  01C3  0008               	return
  2134  01C4                     l2648:	
  2135                           
  2136                           ;main.c: 268: else if (received_data_length == 6 && strncmp(uart_command,"DACCAL",6) == 
      +                          0)
  2137  01C4  087C               	movf	_received_data_length,w
  2138  01C5  3A06               	xorlw	6
  2139  01C6  1D03               	skipz
  2140  01C7  29DC               	goto	l2654
  2141  01C8  30BE               	movlw	(STR_13| (0+32768))& (0+255)
  2142  01C9  0020               	movlb	0	; select bank0
  2143  01CA  00E5               	movwf	??_interpret_command
  2144  01CB  0865               	movf	??_interpret_command,w
  2145  01CC  00F1               	movwf	?_strncmp
  2146  01CD  3006               	movlw	6
  2147  01CE  00F2               	movwf	?_strncmp+1
  2148  01CF  3000               	movlw	0
  2149  01D0  00F3               	movwf	?_strncmp+2
  2150  01D1  3045               	movlw	_uart_command& (0+255)
  2151  01D2  3183  23AB  3181   	fcall	_strncmp
  2152  01D5  0872               	movf	?_strncmp+1,w
  2153  01D6  0471               	iorwf	?_strncmp,w
  2154  01D7  1D03               	skipz
  2155  01D8  29DC               	goto	l2654
  2156                           
  2157                           ;main.c: 269: command_calibrate_dac();
  2158  01D9  3183  2368         	fcall	_command_calibrate_dac
  2159  01DB  0008               	return
  2160  01DC                     l2654:	
  2161                           
  2162                           ;main.c: 270: else if (received_data_length == 7 && strncmp(uart_command,"ADCREAD",7) ==
      +                           0)
  2163  01DC  087C               	movf	_received_data_length,w
  2164  01DD  3A07               	xorlw	7
  2165  01DE  1D03               	skipz
  2166  01DF  29F4               	goto	l2660
  2167  01E0  30AE               	movlw	(STR_14| (0+32768))& (0+255)
  2168  01E1  0020               	movlb	0	; select bank0
  2169  01E2  00E5               	movwf	??_interpret_command
  2170  01E3  0865               	movf	??_interpret_command,w
  2171  01E4  00F1               	movwf	?_strncmp
  2172  01E5  3007               	movlw	7
  2173  01E6  00F2               	movwf	?_strncmp+1
  2174  01E7  3000               	movlw	0
  2175  01E8  00F3               	movwf	?_strncmp+2
  2176  01E9  3045               	movlw	_uart_command& (0+255)
  2177  01EA  3183  23AB  3181   	fcall	_strncmp
  2178  01ED  0872               	movf	?_strncmp+1,w
  2179  01EE  0471               	iorwf	?_strncmp,w
  2180  01EF  1D03               	skipz
  2181  01F0  29F4               	goto	l2660
  2182                           
  2183                           ;main.c: 271: command_read_adc();
  2184  01F1  3187  278A         	fcall	_command_read_adc
  2185  01F3  0008               	return
  2186  01F4                     l2660:	
  2187                           
  2188                           ;main.c: 272: else if (received_data_length == 10 && strncmp(uart_command,"OFFSETREAD",1
      +                          0) == 0)
  2189  01F4  087C               	movf	_received_data_length,w
  2190  01F5  3A0A               	xorlw	10
  2191  01F6  1D03               	skipz
  2192  01F7  2A0C               	goto	l2666
  2193  01F8  3068               	movlw	(STR_15| (0+32768))& (0+255)
  2194  01F9  0020               	movlb	0	; select bank0
  2195  01FA  00E5               	movwf	??_interpret_command
  2196  01FB  0865               	movf	??_interpret_command,w
  2197  01FC  00F1               	movwf	?_strncmp
  2198  01FD  300A               	movlw	10
  2199  01FE  00F2               	movwf	?_strncmp+1
  2200  01FF  3000               	movlw	0
  2201  0200  00F3               	movwf	?_strncmp+2
  2202  0201  3045               	movlw	_uart_command& (0+255)
  2203  0202  3183  23AB  3181   	fcall	_strncmp
  2204  0205  0872               	movf	?_strncmp+1,w
  2205  0206  0471               	iorwf	?_strncmp,w
  2206  0207  1D03               	skipz
  2207  0208  2A0C               	goto	l2666
  2208                           
  2209                           ;main.c: 273: command_read_offset();
  2210  0209  3187  277C         	fcall	_command_read_offset
  2211  020B  0008               	return
  2212  020C                     l2666:	
  2213                           
  2214                           ;main.c: 274: else if (received_data_length == 17 && strncmp(uart_command,"OFFSETSAVE ",
      +                          11) == 0)
  2215  020C  087C               	movf	_received_data_length,w
  2216  020D  3A11               	xorlw	17
  2217  020E  1D03               	skipz
  2218  020F  2A25               	goto	l2672
  2219  0210  3051               	movlw	(STR_16| (0+32768))& (0+255)
  2220  0211  0020               	movlb	0	; select bank0
  2221  0212  00E5               	movwf	??_interpret_command
  2222  0213  0865               	movf	??_interpret_command,w
  2223  0214  00F1               	movwf	?_strncmp
  2224  0215  300B               	movlw	11
  2225  0216  00F2               	movwf	?_strncmp+1
  2226  0217  3000               	movlw	0
  2227  0218  00F3               	movwf	?_strncmp+2
  2228  0219  3045               	movlw	_uart_command& (0+255)
  2229  021A  3183  23AB  3181   	fcall	_strncmp
  2230  021D  0872               	movf	?_strncmp+1,w
  2231  021E  0471               	iorwf	?_strncmp,w
  2232  021F  1D03               	skipz
  2233  0220  2A25               	goto	l2672
  2234                           
  2235                           ;main.c: 275: command_save_offset(uart_command+11);
  2236  0221  3050               	movlw	(_uart_command+11)& (0+255)
  2237  0222  3187  2718         	fcall	_command_save_offset
  2238  0224  0008               	return
  2239  0225                     l2672:	
  2240                           
  2241                           ;main.c: 276: else if (received_data_length == 9 && strncmp(uart_command,"DACCALGET",9) 
      +                          == 0)
  2242  0225  087C               	movf	_received_data_length,w
  2243  0226  3A09               	xorlw	9
  2244  0227  1D03               	skipz
  2245  0228  2A3D               	goto	l2678
  2246  0229  3073               	movlw	(STR_17| (0+32768))& (0+255)
  2247  022A  0020               	movlb	0	; select bank0
  2248  022B  00E5               	movwf	??_interpret_command
  2249  022C  0865               	movf	??_interpret_command,w
  2250  022D  00F1               	movwf	?_strncmp
  2251  022E  3009               	movlw	9
  2252  022F  00F2               	movwf	?_strncmp+1
  2253  0230  3000               	movlw	0
  2254  0231  00F3               	movwf	?_strncmp+2
  2255  0232  3045               	movlw	_uart_command& (0+255)
  2256  0233  3183  23AB  3181   	fcall	_strncmp
  2257  0236  0872               	movf	?_strncmp+1,w
  2258  0237  0471               	iorwf	?_strncmp,w
  2259  0238  1D03               	skipz
  2260  0239  2A3D               	goto	l2678
  2261                           
  2262                           ;main.c: 277: command_read_dac_cal();
  2263  023A  3187  275C         	fcall	_command_read_dac_cal
  2264  023C  0008               	return
  2265  023D                     l2678:	
  2266                           
  2267                           ;main.c: 278: else if (received_data_length == 16 && strncmp(uart_command,"DACCALSET ",1
      +                          0) == 0)
  2268  023D  087C               	movf	_received_data_length,w
  2269  023E  3A10               	xorlw	16
  2270  023F  1D03               	skipz
  2271  0240  2A56               	goto	l2684
  2272  0241  305D               	movlw	(STR_18| (0+32768))& (0+255)
  2273  0242  0020               	movlb	0	; select bank0
  2274  0243  00E5               	movwf	??_interpret_command
  2275  0244  0865               	movf	??_interpret_command,w
  2276  0245  00F1               	movwf	?_strncmp
  2277  0246  300A               	movlw	10
  2278  0247  00F2               	movwf	?_strncmp+1
  2279  0248  3000               	movlw	0
  2280  0249  00F3               	movwf	?_strncmp+2
  2281  024A  3045               	movlw	_uart_command& (0+255)
  2282  024B  3183  23AB  3181   	fcall	_strncmp
  2283  024E  0872               	movf	?_strncmp+1,w
  2284  024F  0471               	iorwf	?_strncmp,w
  2285  0250  1D03               	skipz
  2286  0251  2A56               	goto	l2684
  2287                           
  2288                           ;main.c: 279: command_set_dac_cal(uart_command+10);
  2289  0252  304F               	movlw	(_uart_command+10)& (0+255)
  2290  0253  3183  23ED         	fcall	_command_set_dac_cal
  2291  0255  0008               	return
  2292  0256                     l2684:	
  2293                           
  2294                           ;main.c: 280: else if (received_data_length == 12 && strncmp(uart_command,"SHUNTCALREAD"
      +                          ,12) == 0)
  2295  0256  087C               	movf	_received_data_length,w
  2296  0257  3A0C               	xorlw	12
  2297  0258  1D03               	skipz
  2298  0259  2A6E               	goto	l2690
  2299  025A  3044               	movlw	(STR_19| (0+32768))& (0+255)
  2300  025B  0020               	movlb	0	; select bank0
  2301  025C  00E5               	movwf	??_interpret_command
  2302  025D  0865               	movf	??_interpret_command,w
  2303  025E  00F1               	movwf	?_strncmp
  2304  025F  300C               	movlw	12
  2305  0260  00F2               	movwf	?_strncmp+1
  2306  0261  3000               	movlw	0
  2307  0262  00F3               	movwf	?_strncmp+2
  2308  0263  3045               	movlw	_uart_command& (0+255)
  2309  0264  3183  23AB  3181   	fcall	_strncmp
  2310  0267  0872               	movf	?_strncmp+1,w
  2311  0268  0471               	iorwf	?_strncmp,w
  2312  0269  1D03               	skipz
  2313  026A  2A6E               	goto	l2690
  2314                           
  2315                           ;main.c: 281: command_read_shuntcalibration();
  2316  026B  3187  276C         	fcall	_command_read_shuntcalibration
  2317  026D  0008               	return
  2318  026E                     l2690:	
  2319                           
  2320                           ;main.c: 282: else if (received_data_length == 19 && strncmp(uart_command,"SHUNTCALSAVE 
      +                          ",13) == 0)
  2321  026E  087C               	movf	_received_data_length,w
  2322  026F  3A13               	xorlw	19
  2323  0270  1D03               	skipz
  2324  0271  2A87               	goto	l2696
  2325  0272  3028               	movlw	(STR_20| (0+32768))& (0+255)
  2326  0273  0020               	movlb	0	; select bank0
  2327  0274  00E5               	movwf	??_interpret_command
  2328  0275  0865               	movf	??_interpret_command,w
  2329  0276  00F1               	movwf	?_strncmp
  2330  0277  300D               	movlw	13
  2331  0278  00F2               	movwf	?_strncmp+1
  2332  0279  3000               	movlw	0
  2333  027A  00F3               	movwf	?_strncmp+2
  2334  027B  3045               	movlw	_uart_command& (0+255)
  2335  027C  3183  23AB  3181   	fcall	_strncmp
  2336  027F  0872               	movf	?_strncmp+1,w
  2337  0280  0471               	iorwf	?_strncmp,w
  2338  0281  1D03               	skipz
  2339  0282  2A87               	goto	l2696
  2340                           
  2341                           ;main.c: 283: command_save_shuntcalibration(uart_command+13);
  2342  0283  3052               	movlw	(_uart_command+13)& (0+255)
  2343  0284  3187  2707         	fcall	_command_save_shuntcalibration
  2344  0286  0008               	return
  2345  0287                     l2696:	
  2346                           
  2347                           ;main.c: 285: else
  2348                           ;main.c: 286: command_unknown();
  2349  0287  3186  26C8         	fcall	_command_unknown
  2350  0289  0008               	return
  2351  028A                     __end_of_interpret_command:	
  2352                           
  2353                           	psect	text4
  2354  03AB                     __ptext4:	
  2355 ;; *************** function _strncmp *****************
  2356 ;; Defined at:
  2357 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strncmp.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  s1              1    wreg     PTR const unsigned char 
  2360 ;;		 -> uart_command(20), 
  2361 ;;  s2              1    1[COMMON] PTR const unsigned char 
  2362 ;;		 -> STR_20(14), STR_19(13), STR_18(11), STR_17(10), 
  2363 ;;		 -> STR_16(12), STR_15(11), STR_14(8), STR_13(7), 
  2364 ;;		 -> STR_12(8), STR_11(8), STR_10(8), STR_9(8), 
  2365 ;;		 -> STR_8(14), STR_7(15), STR_6(9), STR_5(8), 
  2366 ;;  len             2    2[COMMON] unsigned int 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  s1              1    6[COMMON] PTR const unsigned char 
  2369 ;;		 -> uart_command(20), 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2    1[COMMON] int 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2379 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2381 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2383 ;;Total ram usage:        6 bytes
  2384 ;; Hardware stack levels used:    2
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_interpret_command
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _strncmp
  2395  03AB                     _strncmp:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _strncmp: [wreg+fsr1l+fsr1h+status,2+status,0]
  2399                           ;strncmp@s1 stored from wreg
  2400  03AB  00F6               	movwf	strncmp@s1
  2401  03AC                     l2118:	
  2402  03AC  3001               	movlw	1
  2403  03AD  02F2               	subwf	strncmp@len,f
  2404  03AE  3000               	movlw	0
  2405  03AF  3BF3               	subwfb	strncmp@len+1,f
  2406  03B0  30FF               	movlw	255
  2407  03B1  0673               	xorwf	strncmp@len+1,w
  2408  03B2  1D03               	skipz
  2409  03B3  2BB6               	goto	u1265
  2410  03B4  30FF               	movlw	255
  2411  03B5  0672               	xorwf	strncmp@len,w
  2412  03B6                     u1265:	
  2413  03B6  1903               	btfsc	3,2
  2414  03B7  2BEA               	goto	l2120
  2415  03B8  0876               	movf	strncmp@s1,w
  2416  03B9  0086               	movwf	6
  2417  03BA  0187               	clrf	7
  2418  03BB  0801               	movf	1,w
  2419  03BC  3A00               	xorlw	0
  2420  03BD  1903               	skipnz
  2421  03BE  2BCB               	goto	l2112
  2422  03BF  0871               	movf	strncmp@s2,w
  2423  03C0  3180               	movlp	high __stringtab
  2424  03C1  000A               	callw
  2425  03C2  3183               	pagesel	$	;select current page
  2426  03C3  00F4               	movwf	??_strncmp
  2427  03C4  0876               	movf	strncmp@s1,w
  2428  03C5  0086               	movwf	6
  2429  03C6  0187               	clrf	7
  2430  03C7  0801               	movf	1,w
  2431  03C8  0674               	xorwf	??_strncmp,w
  2432  03C9  1903               	skipnz
  2433  03CA  2BE1               	goto	l2116
  2434  03CB                     l2112:	
  2435  03CB  0871               	movf	strncmp@s2,w
  2436  03CC  3180               	movlp	high __stringtab
  2437  03CD  000A               	callw
  2438  03CE  3183               	pagesel	$	;select current page
  2439  03CF  00F4               	movwf	??_strncmp
  2440  03D0  01F5               	clrf	??_strncmp+1
  2441  03D1  09F4               	comf	??_strncmp,f
  2442  03D2  09F5               	comf	??_strncmp+1,f
  2443  03D3  0AF4               	incf	??_strncmp,f
  2444  03D4  1903               	skipnz
  2445  03D5  0AF5               	incf	??_strncmp+1,f
  2446  03D6  0876               	movf	strncmp@s1,w
  2447  03D7  0086               	movwf	6
  2448  03D8  0187               	clrf	7
  2449  03D9  0801               	movf	1,w
  2450  03DA  0774               	addwf	??_strncmp,w
  2451  03DB  00F1               	movwf	?_strncmp
  2452  03DC  0875               	movf	??_strncmp+1,w
  2453  03DD  1803               	skipnc
  2454  03DE  0A75               	incf	??_strncmp+1,w
  2455  03DF  00F2               	movwf	?_strncmp+1
  2456  03E0  0008               	return
  2457  03E1                     l2116:	
  2458  03E1  3001               	movlw	1
  2459  03E2  00F4               	movwf	??_strncmp
  2460  03E3  0874               	movf	??_strncmp,w
  2461  03E4  07F6               	addwf	strncmp@s1,f
  2462  03E5  3001               	movlw	1
  2463  03E6  00F4               	movwf	??_strncmp
  2464  03E7  0874               	movf	??_strncmp,w
  2465  03E8  07F1               	addwf	strncmp@s2,f
  2466  03E9  2BAC               	goto	l2118
  2467  03EA                     l2120:	
  2468  03EA  01F1               	clrf	?_strncmp
  2469  03EB  01F2               	clrf	?_strncmp+1
  2470  03EC  0008               	return
  2471  03ED                     __end_of_strncmp:	
  2472                           
  2473                           	psect	text5
  2474  03ED                     __ptext5:	
  2475 ;; *************** function _command_set_dac_cal *****************
  2476 ;; Defined at:
  2477 ;;		line 244 in file "main.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  dac_cal_data    1    wreg     PTR const unsigned char 
  2480 ;;		 -> uart_command(20), 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  dac_cal_data    1    5[BANK0 ] PTR const unsigned char 
  2483 ;;		 -> uart_command(20), 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;		None               void
  2486 ;; Registers used:
  2487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2495 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2497 ;;Total ram usage:        3 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    5
  2500 ;; This function calls:
  2501 ;;		_HEFLASH_writeBlock
  2502 ;;		_DAC1220_Write3Bytes
  2503 ;;		_send_OK
  2504 ;; This function is called by:
  2505 ;;		_interpret_command
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           
  2510                           ;psect for function _command_set_dac_cal
  2511  03ED                     _command_set_dac_cal:	
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in _command_set_dac_cal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2515                           ;command_set_dac_cal@dac_cal_data stored from wreg
  2516  03ED  0020               	movlb	0	; select bank0
  2517  03EE  00DE               	movwf	command_set_dac_cal@dac_cal_data
  2518                           
  2519                           ;main.c: 245: HEFLASH_writeBlock(2, dac_cal_data, 6);
  2520  03EF  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2521  03F0  00DC               	movwf	??_command_set_dac_cal
  2522  03F1  085C               	movf	??_command_set_dac_cal,w
  2523  03F2  00F7               	movwf	?_HEFLASH_writeBlock
  2524  03F3  3006               	movlw	6
  2525  03F4  00DD               	movwf	??_command_set_dac_cal+1
  2526  03F5  085D               	movf	??_command_set_dac_cal+1,w
  2527  03F6  00F8               	movwf	?_HEFLASH_writeBlock+1
  2528  03F7  3002               	movlw	2
  2529  03F8  3183  230A  3183   	fcall	_HEFLASH_writeBlock
  2530                           
  2531                           ;main.c: 246: DAC1220_Write3Bytes(8, dac_cal_data[0], dac_cal_data[1], dac_cal_data[2]);
  2532  03FB  0020               	movlb	0	; select bank0
  2533  03FC  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2534  03FD  0086               	movwf	6
  2535  03FE  0187               	clrf	7
  2536  03FF  0801               	movf	1,w
  2537  0400  00DC               	movwf	??_command_set_dac_cal
  2538  0401  085C               	movf	??_command_set_dac_cal,w
  2539  0402  00F5               	movwf	?_DAC1220_Write3Bytes
  2540  0403  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2541  0404  0086               	movwf	6
  2542  0405  0187               	clrf	7
  2543  0406  3F41               	moviw [1]fsr1
  2544  0407  00F6               	movwf	?_DAC1220_Write3Bytes+1
  2545  0408  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2546  0409  0086               	movwf	6
  2547  040A  0187               	clrf	7
  2548  040B  3F42               	moviw [2]fsr1
  2549  040C  00F7               	movwf	?_DAC1220_Write3Bytes+2
  2550  040D  3008               	movlw	8
  2551  040E  3185  25B4  3183   	fcall	_DAC1220_Write3Bytes
  2552                           
  2553                           ;main.c: 247: DAC1220_Write3Bytes(12, dac_cal_data[3], dac_cal_data[4], dac_cal_data[5]);
  2554  0411  0020               	movlb	0	; select bank0
  2555  0412  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2556  0413  0086               	movwf	6
  2557  0414  0187               	clrf	7
  2558  0415  3F43               	moviw [3]fsr1
  2559  0416  00F5               	movwf	?_DAC1220_Write3Bytes
  2560  0417  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2561  0418  0086               	movwf	6
  2562  0419  0187               	clrf	7
  2563  041A  3F44               	moviw [4]fsr1
  2564  041B  00F6               	movwf	?_DAC1220_Write3Bytes+1
  2565  041C  085E               	movf	command_set_dac_cal@dac_cal_data,w
  2566  041D  0086               	movwf	6
  2567  041E  0187               	clrf	7
  2568  041F  3F45               	moviw [5]fsr1
  2569  0420  00F7               	movwf	?_DAC1220_Write3Bytes+2
  2570  0421  300C               	movlw	12
  2571  0422  3185  25B4  3183   	fcall	_DAC1220_Write3Bytes
  2572                           
  2573                           ;main.c: 248: send_OK();
  2574  0425  3186  26B2         	fcall	_send_OK
  2575  0427  0008               	return
  2576  0428                     __end_of_command_set_dac_cal:	
  2577                           
  2578                           	psect	text6
  2579  075C                     __ptext6:	
  2580 ;; *************** function _command_read_dac_cal *****************
  2581 ;; Defined at:
  2582 ;;		line 238 in file "main.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;		None
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;		None
  2587 ;; Return value:  Size  Location     Type
  2588 ;;		None               void
  2589 ;; Registers used:
  2590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2598 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2600 ;;Total ram usage:        2 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    3
  2603 ;; This function calls:
  2604 ;;		_HEFLASH_readBlock
  2605 ;;		_USART_Send_6bytes
  2606 ;; This function is called by:
  2607 ;;		_interpret_command
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _command_read_dac_cal
  2613  075C                     _command_read_dac_cal:	
  2614                           
  2615                           ;main.c: 239: HEFLASH_readBlock(heflashbuffer, 2, 32);
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _command_read_dac_cal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2619  075C  3002               	movlw	2
  2620  075D  00FA               	movwf	??_command_read_dac_cal
  2621  075E  087A               	movf	??_command_read_dac_cal,w
  2622  075F  00F3               	movwf	?_HEFLASH_readBlock
  2623  0760  3020               	movlw	32
  2624  0761  00FB               	movwf	??_command_read_dac_cal+1
  2625  0762  087B               	movf	??_command_read_dac_cal+1,w
  2626  0763  00F4               	movwf	?_HEFLASH_readBlock+1
  2627  0764  3025               	movlw	_heflashbuffer& (0+255)
  2628  0765  3184  24D2  3187   	fcall	_HEFLASH_readBlock
  2629                           
  2630                           ;main.c: 240: USART_Send_6bytes(heflashbuffer);
  2631  0768  3025               	movlw	_heflashbuffer& (0+255)
  2632  0769  3186  2686         	fcall	_USART_Send_6bytes
  2633  076B  0008               	return
  2634  076C                     __end_of_command_read_dac_cal:	
  2635                           
  2636                           	psect	text7
  2637  0707                     __ptext7:	
  2638 ;; *************** function _command_save_shuntcalibration *****************
  2639 ;; Defined at:
  2640 ;;		line 232 in file "main.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;  shuntcalibra    1    wreg     PTR const unsigned char 
  2643 ;;		 -> uart_command(20), 
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;  shuntcalibra    1    5[BANK0 ] PTR const unsigned char 
  2646 ;;		 -> uart_command(20), 
  2647 ;; Return value:  Size  Location     Type
  2648 ;;		None               void
  2649 ;; Registers used:
  2650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2659 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2660 ;;Total ram usage:        3 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    4
  2663 ;; This function calls:
  2664 ;;		_HEFLASH_writeBlock
  2665 ;;		_send_OK
  2666 ;; This function is called by:
  2667 ;;		_interpret_command
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           
  2672                           ;psect for function _command_save_shuntcalibration
  2673  0707                     _command_save_shuntcalibration:	
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in _command_save_shuntcalibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  2677                           ;command_save_shuntcalibration@shuntcalibration_data stored from wreg
  2678  0707  0020               	movlb	0	; select bank0
  2679  0708  00DE               	movwf	command_save_shuntcalibration@shuntcalibration_data
  2680                           
  2681                           ;main.c: 233: HEFLASH_writeBlock(3, shuntcalibration_data, 6);
  2682  0709  085E               	movf	command_save_shuntcalibration@shuntcalibration_data,w
  2683  070A  00DC               	movwf	??_command_save_shuntcalibration
  2684  070B  085C               	movf	??_command_save_shuntcalibration,w
  2685  070C  00F7               	movwf	?_HEFLASH_writeBlock
  2686  070D  3006               	movlw	6
  2687  070E  00DD               	movwf	??_command_save_shuntcalibration+1
  2688  070F  085D               	movf	??_command_save_shuntcalibration+1,w
  2689  0710  00F8               	movwf	?_HEFLASH_writeBlock+1
  2690  0711  3003               	movlw	3
  2691  0712  3183  230A  3187   	fcall	_HEFLASH_writeBlock
  2692                           
  2693                           ;main.c: 234: send_OK();
  2694  0715  3186  26B2         	fcall	_send_OK
  2695  0717  0008               	return
  2696  0718                     __end_of_command_save_shuntcalibration:	
  2697                           
  2698                           	psect	text8
  2699  076C                     __ptext8:	
  2700 ;; *************** function _command_read_shuntcalibration *****************
  2701 ;; Defined at:
  2702 ;;		line 226 in file "main.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2718 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2720 ;;Total ram usage:        2 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    3
  2723 ;; This function calls:
  2724 ;;		_HEFLASH_readBlock
  2725 ;;		_USART_Send_6bytes
  2726 ;; This function is called by:
  2727 ;;		_interpret_command
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           
  2732                           ;psect for function _command_read_shuntcalibration
  2733  076C                     _command_read_shuntcalibration:	
  2734                           
  2735                           ;main.c: 227: HEFLASH_readBlock(heflashbuffer, 3, 32);
  2736                           
  2737                           ;incstack = 0
  2738                           ; Regs used in _command_read_shuntcalibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  2739  076C  3003               	movlw	3
  2740  076D  00FA               	movwf	??_command_read_shuntcalibration
  2741  076E  087A               	movf	??_command_read_shuntcalibration,w
  2742  076F  00F3               	movwf	?_HEFLASH_readBlock
  2743  0770  3020               	movlw	32
  2744  0771  00FB               	movwf	??_command_read_shuntcalibration+1
  2745  0772  087B               	movf	??_command_read_shuntcalibration+1,w
  2746  0773  00F4               	movwf	?_HEFLASH_readBlock+1
  2747  0774  3025               	movlw	_heflashbuffer& (0+255)
  2748  0775  3184  24D2  3187   	fcall	_HEFLASH_readBlock
  2749                           
  2750                           ;main.c: 228: USART_Send_6bytes(heflashbuffer);
  2751  0778  3025               	movlw	_heflashbuffer& (0+255)
  2752  0779  3186  2686         	fcall	_USART_Send_6bytes
  2753  077B  0008               	return
  2754  077C                     __end_of_command_read_shuntcalibration:	
  2755                           
  2756                           	psect	text9
  2757  0718                     __ptext9:	
  2758 ;; *************** function _command_save_offset *****************
  2759 ;; Defined at:
  2760 ;;		line 220 in file "main.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;  offset_data     1    wreg     PTR const unsigned char 
  2763 ;;		 -> uart_command(20), 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  offset_data     1    5[BANK0 ] PTR const unsigned char 
  2766 ;;		 -> uart_command(20), 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;		None               void
  2769 ;; Registers used:
  2770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2780 ;;Total ram usage:        3 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    4
  2783 ;; This function calls:
  2784 ;;		_HEFLASH_writeBlock
  2785 ;;		_send_OK
  2786 ;; This function is called by:
  2787 ;;		_interpret_command
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _command_save_offset
  2793  0718                     _command_save_offset:	
  2794                           
  2795                           ;incstack = 0
  2796                           ; Regs used in _command_save_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2797                           ;command_save_offset@offset_data stored from wreg
  2798  0718  0020               	movlb	0	; select bank0
  2799  0719  00DE               	movwf	command_save_offset@offset_data
  2800                           
  2801                           ;main.c: 221: HEFLASH_writeBlock(1, offset_data, 6);
  2802  071A  085E               	movf	command_save_offset@offset_data,w
  2803  071B  00DC               	movwf	??_command_save_offset
  2804  071C  085C               	movf	??_command_save_offset,w
  2805  071D  00F7               	movwf	?_HEFLASH_writeBlock
  2806  071E  3006               	movlw	6
  2807  071F  00DD               	movwf	??_command_save_offset+1
  2808  0720  085D               	movf	??_command_save_offset+1,w
  2809  0721  00F8               	movwf	?_HEFLASH_writeBlock+1
  2810  0722  3001               	movlw	1
  2811  0723  3183  230A  3187   	fcall	_HEFLASH_writeBlock
  2812                           
  2813                           ;main.c: 222: send_OK();
  2814  0726  3186  26B2         	fcall	_send_OK
  2815  0728  0008               	return
  2816  0729                     __end_of_command_save_offset:	
  2817                           
  2818                           	psect	text10
  2819  077C                     __ptext10:	
  2820 ;; *************** function _command_read_offset *****************
  2821 ;; Defined at:
  2822 ;;		line 214 in file "main.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;		None               void
  2829 ;; Registers used:
  2830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    3
  2843 ;; This function calls:
  2844 ;;		_HEFLASH_readBlock
  2845 ;;		_USART_Send_6bytes
  2846 ;; This function is called by:
  2847 ;;		_interpret_command
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           
  2852                           ;psect for function _command_read_offset
  2853  077C                     _command_read_offset:	
  2854                           
  2855                           ;main.c: 215: HEFLASH_readBlock(heflashbuffer, 1, 32);
  2856                           
  2857                           ;incstack = 0
  2858                           ; Regs used in _command_read_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2859  077C  01F3               	clrf	?_HEFLASH_readBlock
  2860  077D  0AF3               	incf	?_HEFLASH_readBlock,f
  2861  077E  3020               	movlw	32
  2862  077F  00FA               	movwf	??_command_read_offset
  2863  0780  087A               	movf	??_command_read_offset,w
  2864  0781  00F4               	movwf	?_HEFLASH_readBlock+1
  2865  0782  3025               	movlw	_heflashbuffer& (0+255)
  2866  0783  3184  24D2  3187   	fcall	_HEFLASH_readBlock
  2867                           
  2868                           ;main.c: 216: USART_Send_6bytes(heflashbuffer);
  2869  0786  3025               	movlw	_heflashbuffer& (0+255)
  2870  0787  3186  2686         	fcall	_USART_Send_6bytes
  2871  0789  0008               	return
  2872  078A                     __end_of_command_read_offset:	
  2873                           
  2874                           	psect	text11
  2875  078A                     __ptext11:	
  2876 ;; *************** function _command_read_adc *****************
  2877 ;; Defined at:
  2878 ;;		line 201 in file "main.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  adc_data        6    3[BANK0 ] unsigned char [6]
  2883 ;; Return value:  Size  Location     Type
  2884 ;;		None               void
  2885 ;; Registers used:
  2886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2895 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2896 ;;Total ram usage:        6 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    5
  2899 ;; This function calls:
  2900 ;;		_MCP3550_Read
  2901 ;;		_send_WAIT
  2902 ;;		_USART_Send_6bytes
  2903 ;; This function is called by:
  2904 ;;		_interpret_command
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _command_read_adc
  2910  078A                     _command_read_adc:	
  2911                           
  2912                           ;main.c: 202: uint8_t adc_data[6];
  2913                           ;main.c: 203: if(MCP3550_Read(adc_data))
  2914                           
  2915                           ;incstack = 0
  2916                           ; Regs used in _command_read_adc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2917  078A  305C               	movlw	command_read_adc@adc_data& (0+255)
  2918  078B  3184  2462  3187   	fcall	_MCP3550_Read
  2919  078E  3A00               	xorlw	0
  2920  078F  1903               	skipnz
  2921  0790  2F95               	goto	l2566
  2922                           
  2923                           ;main.c: 204: {
  2924                           ;main.c: 205: USART_Send_6bytes(adc_data);
  2925  0791  305C               	movlw	command_read_adc@adc_data& (0+255)
  2926  0792  3186  2686         	fcall	_USART_Send_6bytes
  2927                           
  2928                           ;main.c: 206: }
  2929  0794  0008               	return
  2930  0795                     l2566:	
  2931                           
  2932                           ;main.c: 207: else
  2933                           ;main.c: 208: {
  2934                           ;main.c: 209: send_WAIT();
  2935  0795  3186  269C         	fcall	_send_WAIT
  2936  0797  0008               	return
  2937  0798                     __end_of_command_read_adc:	
  2938                           
  2939                           	psect	text12
  2940  0686                     __ptext12:	
  2941 ;; *************** function _USART_Send_6bytes *****************
  2942 ;; Defined at:
  2943 ;;		line 157 in file "eusart.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  dataToSend      1    wreg     PTR unsigned char 
  2946 ;;		 -> command_read_adc@adc_data(6), heflashbuffer(32), 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  dataToSend      1    3[COMMON] PTR unsigned char 
  2949 ;;		 -> command_read_adc@adc_data(6), heflashbuffer(32), 
  2950 ;;  i               1    4[COMMON] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;		None               void
  2953 ;; Registers used:
  2954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;Total ram usage:        3 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    2
  2967 ;; This function calls:
  2968 ;;		_EUSART_Write
  2969 ;; This function is called by:
  2970 ;;		_command_read_adc
  2971 ;;		_command_read_offset
  2972 ;;		_command_read_shuntcalibration
  2973 ;;		_command_read_dac_cal
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           
  2978                           ;psect for function _USART_Send_6bytes
  2979  0686                     _USART_Send_6bytes:	
  2980                           
  2981                           ;incstack = 0
  2982                           ; Regs used in _USART_Send_6bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2983                           ;USART_Send_6bytes@dataToSend stored from wreg
  2984  0686  00F3               	movwf	USART_Send_6bytes@dataToSend
  2985                           
  2986                           ;eusart.c: 158: for(uint8_t i=0;i<6;i++)
  2987  0687  01F4               	clrf	USART_Send_6bytes@i
  2988  0688                     L3:	
  2989  0688  3006               	movlw	6
  2990  0689  0274               	subwf	USART_Send_6bytes@i,w
  2991  068A  1803               	btfsc	3,0
  2992  068B  0008               	return
  2993                           
  2994                           ;eusart.c: 159: {
  2995                           ;eusart.c: 160: EUSART_Write(*dataToSend);
  2996  068C  0873               	movf	USART_Send_6bytes@dataToSend,w
  2997  068D  0086               	movwf	6
  2998  068E  0187               	clrf	7
  2999  068F  0801               	movf	1,w
  3000  0690  3187  27CF  3186   	fcall	_EUSART_Write
  3001                           
  3002                           ;eusart.c: 161: dataToSend++;
  3003  0693  3001               	movlw	1
  3004  0694  00F2               	movwf	??_USART_Send_6bytes
  3005  0695  0872               	movf	??_USART_Send_6bytes,w
  3006  0696  07F3               	addwf	USART_Send_6bytes@dataToSend,f
  3007  0697  3001               	movlw	1
  3008  0698  00F2               	movwf	??_USART_Send_6bytes
  3009  0699  0872               	movf	??_USART_Send_6bytes,w
  3010  069A  07F4               	addwf	USART_Send_6bytes@i,f
  3011  069B  2E88               	goto	L3
  3012  069C                     __end_of_USART_Send_6bytes:	
  3013                           
  3014                           	psect	text13
  3015  069C                     __ptext13:	
  3016 ;; *************** function _send_WAIT *****************
  3017 ;; Defined at:
  3018 ;;		line 124 in file "main.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  3023 ;;		 -> STR_4(6), 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;		None               void
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0, pclath, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;Total ram usage:        2 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    3
  3040 ;; This function calls:
  3041 ;;		_strlen
  3042 ;;		_USART_Send
  3043 ;; This function is called by:
  3044 ;;		_command_read_adc
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048                           
  3049                           ;psect for function _send_WAIT
  3050  069C                     _send_WAIT:	
  3051                           
  3052                           ;main.c: 125: const uint8_t* reply = "WAIT\n";
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _send_WAIT: [wreg+status,2+status,0+pclath+cstack]
  3056  069C  30C5               	movlw	(STR_4| (0+32768))& (0+255)
  3057  069D  00FB               	movwf	??_send_WAIT
  3058  069E  087B               	movf	??_send_WAIT,w
  3059  069F  0020               	movlb	0	; select bank0
  3060  06A0  00DB               	movwf	send_WAIT@reply
  3061                           
  3062                           ;main.c: 126: transmit_data_length = strlen(reply);
  3063  06A1  085B               	movf	send_WAIT@reply,w
  3064  06A2  3185  256D  3186   	fcall	_strlen
  3065  06A5  0871               	movf	?_strlen,w
  3066  06A6  00FB               	movwf	??_send_WAIT
  3067  06A7  087B               	movf	??_send_WAIT,w
  3068  06A8  0020               	movlb	0	; select bank0
  3069  06A9  00A4               	movwf	_transmit_data_length
  3070                           
  3071                           ;main.c: 127: USART_Send(reply,transmit_data_length);
  3072  06AA  0824               	movf	_transmit_data_length,w
  3073  06AB  00FB               	movwf	??_send_WAIT
  3074  06AC  087B               	movf	??_send_WAIT,w
  3075  06AD  00F9               	movwf	?_USART_Send
  3076  06AE  085B               	movf	send_WAIT@reply,w
  3077  06AF  3186  263D         	fcall	_USART_Send
  3078  06B1  0008               	return
  3079  06B2                     __end_of_send_WAIT:	
  3080                           
  3081                           	psect	text14
  3082  0462                     __ptext14:	
  3083 ;; *************** function _MCP3550_Read *****************
  3084 ;; Defined at:
  3085 ;;		line 22 in file "spi/spi_software.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;  adc_data        1    wreg     PTR unsigned char 
  3088 ;;		 -> command_read_adc@adc_data(6), 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  adc_data        1    8[COMMON] PTR unsigned char 
  3091 ;;		 -> command_read_adc@adc_data(6), 
  3092 ;;  data_ready      1    7[COMMON] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      unsigned char 
  3095 ;; Registers used:
  3096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3103 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3105 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3106 ;;Total ram usage:        3 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    4
  3109 ;; This function calls:
  3110 ;;		_SPIDelay
  3111 ;;		_Read2BytesSPI
  3112 ;; This function is called by:
  3113 ;;		_command_read_adc
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           
  3118                           ;psect for function _MCP3550_Read
  3119  0462                     _MCP3550_Read:	
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _MCP3550_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3123                           ;MCP3550_Read@adc_data stored from wreg
  3124  0462  00F8               	movwf	MCP3550_Read@adc_data
  3125                           
  3126                           ;spi_software.c: 23: uint8_t data_ready = 0;
  3127  0463  01F7               	clrf	MCP3550_Read@data_ready
  3128                           
  3129                           ;spi_software.c: 25: LATCbits.LATC3 = 0;
  3130  0464  0022               	movlb	2	; select bank2
  3131  0465  118E               	bcf	14,3	;volatile
  3132                           
  3133                           ;spi_software.c: 26: SPIDelay();
  3134  0466  3187  27F2  3184   	fcall	_SPIDelay
  3135                           
  3136                           ;spi_software.c: 27: if(!PORTBbits.RB4)
  3137  0469  0020               	movlb	0	; select bank0
  3138  046A  1A0D               	btfsc	13,4	;volatile
  3139  046B  2C94               	goto	l2248
  3140                           
  3141                           ;spi_software.c: 28: {
  3142                           ;spi_software.c: 29: Read2BytesSPI(adc_data,adc_data+3);
  3143  046C  0878               	movf	MCP3550_Read@adc_data,w
  3144  046D  3E03               	addlw	3
  3145  046E  00F6               	movwf	??_MCP3550_Read
  3146  046F  0876               	movf	??_MCP3550_Read,w
  3147  0470  00F2               	movwf	?_Read2BytesSPI
  3148  0471  0878               	movf	MCP3550_Read@adc_data,w
  3149  0472  3184  2428  3184   	fcall	_Read2BytesSPI
  3150                           
  3151                           ;spi_software.c: 30: Read2BytesSPI(adc_data+1,adc_data+4);
  3152  0475  0878               	movf	MCP3550_Read@adc_data,w
  3153  0476  3E04               	addlw	4
  3154  0477  00F6               	movwf	??_MCP3550_Read
  3155  0478  0876               	movf	??_MCP3550_Read,w
  3156  0479  00F2               	movwf	?_Read2BytesSPI
  3157  047A  0A78               	incf	MCP3550_Read@adc_data,w
  3158  047B  3184  2428  3184   	fcall	_Read2BytesSPI
  3159                           
  3160                           ;spi_software.c: 31: Read2BytesSPI(adc_data+2,adc_data+5);
  3161  047E  0878               	movf	MCP3550_Read@adc_data,w
  3162  047F  3E05               	addlw	5
  3163  0480  00F6               	movwf	??_MCP3550_Read
  3164  0481  0876               	movf	??_MCP3550_Read,w
  3165  0482  00F2               	movwf	?_Read2BytesSPI
  3166  0483  0878               	movf	MCP3550_Read@adc_data,w
  3167  0484  3E02               	addlw	2
  3168  0485  3184  2428  3184   	fcall	_Read2BytesSPI
  3169                           
  3170                           ;spi_software.c: 32: data_ready = 1;
  3171  0488  01F7               	clrf	MCP3550_Read@data_ready
  3172  0489  0AF7               	incf	MCP3550_Read@data_ready,f
  3173                           
  3174                           ;spi_software.c: 34: LATCbits.LATC3 = 1;
  3175  048A  0022               	movlb	2	; select bank2
  3176  048B  158E               	bsf	14,3	;volatile
  3177                           
  3178                           ;spi_software.c: 35: SPIDelay();
  3179  048C  3187  27F2  3184   	fcall	_SPIDelay
  3180                           
  3181                           ;spi_software.c: 36: LATCbits.LATC3 = 0;
  3182  048F  0022               	movlb	2	; select bank2
  3183  0490  118E               	bcf	14,3	;volatile
  3184                           
  3185                           ;spi_software.c: 37: SPIDelay();
  3186  0491  3187  27F2  3184   	fcall	_SPIDelay
  3187  0494                     l2248:	
  3188                           
  3189                           ;spi_software.c: 38: }
  3190                           ;spi_software.c: 39: LATCbits.LATC3 = 1;
  3191  0494  0022               	movlb	2	; select bank2
  3192  0495  158E               	bsf	14,3	;volatile
  3193                           
  3194                           ;spi_software.c: 40: SPIDelay();
  3195  0496  3187  27F2         	fcall	_SPIDelay
  3196                           
  3197                           ;spi_software.c: 41: return data_ready;
  3198  0498  0877               	movf	MCP3550_Read@data_ready,w
  3199  0499  0008               	return
  3200  049A                     __end_of_MCP3550_Read:	
  3201                           
  3202                           	psect	text15
  3203  0428                     __ptext15:	
  3204 ;; *************** function _Read2BytesSPI *****************
  3205 ;; Defined at:
  3206 ;;		line 132 in file "spi/spi_software.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;  data1_byte      1    wreg     PTR unsigned char 
  3209 ;;		 -> command_read_adc@adc_data(6), 
  3210 ;;  data2_byte      1    2[COMMON] PTR unsigned char 
  3211 ;;		 -> command_read_adc@adc_data(6), 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  data1_byte      1    5[COMMON] PTR unsigned char 
  3214 ;;		 -> command_read_adc@adc_data(6), 
  3215 ;;  bit_counter     1    4[COMMON] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;		None               void
  3218 ;; Registers used:
  3219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3229 ;;Total ram usage:        4 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    3
  3232 ;; This function calls:
  3233 ;;		_ClockPulse
  3234 ;; This function is called by:
  3235 ;;		_MCP3550_Read
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           
  3240                           ;psect for function _Read2BytesSPI
  3241  0428                     _Read2BytesSPI:	
  3242                           
  3243                           ;incstack = 0
  3244                           ; Regs used in _Read2BytesSPI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3245                           ;Read2BytesSPI@data1_byte stored from wreg
  3246  0428  00F5               	movwf	Read2BytesSPI@data1_byte
  3247                           
  3248                           ;spi_software.c: 133: *data1_byte = 0;
  3249  0429  0875               	movf	Read2BytesSPI@data1_byte,w
  3250  042A  0086               	movwf	6
  3251  042B  0187               	clrf	7
  3252  042C  0181               	clrf	1
  3253                           
  3254                           ;spi_software.c: 134: *data2_byte = 0;
  3255  042D  0872               	movf	Read2BytesSPI@data2_byte,w
  3256  042E  0086               	movwf	6
  3257  042F  0187               	clrf	7
  3258  0430  0181               	clrf	1
  3259                           
  3260                           ;spi_software.c: 135: uint8_t bit_counter = 8;
  3261  0431  3008               	movlw	8
  3262  0432  00F3               	movwf	??_Read2BytesSPI
  3263  0433  0873               	movf	??_Read2BytesSPI,w
  3264  0434  00F4               	movwf	Read2BytesSPI@bit_counter
  3265  0435                     l2262:	
  3266                           ;spi_software.c: 136: do
  3267                           
  3268                           
  3269                           ;spi_software.c: 137: {
  3270                           ;spi_software.c: 138: ClockPulse();
  3271  0435  3187  27BC  3184   	fcall	_ClockPulse
  3272                           
  3273                           ;spi_software.c: 139: *data1_byte <<= 1;
  3274  0438  0875               	movf	Read2BytesSPI@data1_byte,w
  3275  0439  0086               	movwf	6
  3276  043A  0187               	clrf	7
  3277  043B  1003               	clrc
  3278  043C  0D81               	rlf	1,f
  3279                           
  3280                           ;spi_software.c: 140: *data2_byte <<= 1;
  3281  043D  0872               	movf	Read2BytesSPI@data2_byte,w
  3282  043E  0086               	movwf	6
  3283  043F  0187               	clrf	7
  3284  0440  1003               	clrc
  3285  0441  0D81               	rlf	1,f
  3286                           
  3287                           ;spi_software.c: 141: *data1_byte &= 0xFE;
  3288  0442  30FE               	movlw	254
  3289  0443  00F3               	movwf	??_Read2BytesSPI
  3290  0444  0875               	movf	Read2BytesSPI@data1_byte,w
  3291  0445  0086               	movwf	6
  3292  0446  0187               	clrf	7
  3293  0447  0873               	movf	??_Read2BytesSPI,w
  3294  0448  0581               	andwf	1,f
  3295                           
  3296                           ;spi_software.c: 142: *data2_byte &= 0xFE;
  3297  0449  30FE               	movlw	254
  3298  044A  00F3               	movwf	??_Read2BytesSPI
  3299  044B  0872               	movf	Read2BytesSPI@data2_byte,w
  3300  044C  0086               	movwf	6
  3301  044D  0187               	clrf	7
  3302  044E  0873               	movf	??_Read2BytesSPI,w
  3303  044F  0581               	andwf	1,f
  3304                           
  3305                           ;spi_software.c: 143: if(PORTBbits.RB4)
  3306  0450  0020               	movlb	0	; select bank0
  3307  0451  1E0D               	btfss	13,4	;volatile
  3308  0452  2C57               	goto	l2276
  3309                           
  3310                           ;spi_software.c: 144: *data1_byte |= 0x01;
  3311  0453  0875               	movf	Read2BytesSPI@data1_byte,w
  3312  0454  0086               	movwf	6
  3313  0455  0187               	clrf	7
  3314  0456  1401               	bsf	1,0
  3315  0457                     l2276:	
  3316                           
  3317                           ;spi_software.c: 145: if(PORTCbits.RC7)
  3318  0457  1F8E               	btfss	14,7	;volatile
  3319  0458  2C5D               	goto	l2280
  3320                           
  3321                           ;spi_software.c: 146: *data2_byte |= 0x01;
  3322  0459  0872               	movf	Read2BytesSPI@data2_byte,w
  3323  045A  0086               	movwf	6
  3324  045B  0187               	clrf	7
  3325  045C  1401               	bsf	1,0
  3326  045D                     l2280:	
  3327                           
  3328                           ;spi_software.c: 147: } while (--bit_counter);
  3329  045D  3001               	movlw	1
  3330  045E  02F4               	subwf	Read2BytesSPI@bit_counter,f
  3331  045F  1903               	btfsc	3,2
  3332  0460  0008               	return
  3333  0461  2C35               	goto	l2262
  3334  0462                     __end_of_Read2BytesSPI:	
  3335                           
  3336                           	psect	text16
  3337  0368                     __ptext16:	
  3338 ;; *************** function _command_calibrate_dac *****************
  3339 ;; Defined at:
  3340 ;;		line 188 in file "main.c"
  3341 ;; Parameters:    Size  Location     Type
  3342 ;;		None
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  data            6    6[BANK0 ] unsigned char [6]
  3345 ;; Return value:  Size  Location     Type
  3346 ;;		None               void
  3347 ;; Registers used:
  3348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3358 ;;Total ram usage:        9 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    6
  3361 ;; This function calls:
  3362 ;;		_HEFLASH_writeBlock
  3363 ;;		_DAC1220_Read3Bytes
  3364 ;;		_DAC1220_SelfCal
  3365 ;;		_send_OK
  3366 ;; This function is called by:
  3367 ;;		_interpret_command
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           
  3372                           ;psect for function _command_calibrate_dac
  3373  0368                     _command_calibrate_dac:	
  3374                           
  3375                           ;main.c: 189: DAC1220_SelfCal();
  3376                           
  3377                           ;incstack = 0
  3378                           ; Regs used in _command_calibrate_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3379  0368  3187  27A5  3183   	fcall	_DAC1220_SelfCal
  3380                           
  3381                           ;main.c: 190: _delay((unsigned long)((500)*(48000000/4000.0)));
  3382  036B  301F               	movlw	31
  3383  036C  0020               	movlb	0	; select bank0
  3384  036D  00DE               	movwf	??_command_calibrate_dac+2
  3385  036E  3071               	movlw	113
  3386  036F  00DD               	movwf	??_command_calibrate_dac+1
  3387  0370  303B               	movlw	59
  3388  0371  00DC               	movwf	??_command_calibrate_dac
  3389  0372                     u1877:	
  3390  0372  0BDC               	decfsz	??_command_calibrate_dac,f
  3391  0373  2B72               	goto	u1877
  3392  0374  0BDD               	decfsz	??_command_calibrate_dac+1,f
  3393  0375  2B72               	goto	u1877
  3394  0376  0BDE               	decfsz	??_command_calibrate_dac+2,f
  3395  0377  2B72               	goto	u1877
  3396  0378  0000               	nop
  3397                           
  3398                           ;main.c: 191: uint8_t data[6];
  3399                           ;main.c: 192: DAC1220_Read3Bytes(8, data, data+1, data+2);
  3400  0379  305F               	movlw	command_calibrate_dac@data& (0+255)
  3401  037A  0020               	movlb	0	; select bank0
  3402  037B  00DC               	movwf	??_command_calibrate_dac
  3403  037C  085C               	movf	??_command_calibrate_dac,w
  3404  037D  00F5               	movwf	?_DAC1220_Read3Bytes
  3405  037E  3060               	movlw	(command_calibrate_dac@data+1)& (0+255)
  3406  037F  00DD               	movwf	??_command_calibrate_dac+1
  3407  0380  085D               	movf	??_command_calibrate_dac+1,w
  3408  0381  00F6               	movwf	?_DAC1220_Read3Bytes+1
  3409  0382  3061               	movlw	(command_calibrate_dac@data+2)& (0+255)
  3410  0383  00DE               	movwf	??_command_calibrate_dac+2
  3411  0384  085E               	movf	??_command_calibrate_dac+2,w
  3412  0385  00F7               	movwf	?_DAC1220_Read3Bytes+2
  3413  0386  3008               	movlw	8
  3414  0387  3185  253B  3183   	fcall	_DAC1220_Read3Bytes
  3415                           
  3416                           ;main.c: 193: DAC1220_Read3Bytes(12, data+3, data+4, data+5);
  3417  038A  3062               	movlw	(command_calibrate_dac@data+3)& (0+255)
  3418  038B  0020               	movlb	0	; select bank0
  3419  038C  00DC               	movwf	??_command_calibrate_dac
  3420  038D  085C               	movf	??_command_calibrate_dac,w
  3421  038E  00F5               	movwf	?_DAC1220_Read3Bytes
  3422  038F  3063               	movlw	(command_calibrate_dac@data+4)& (0+255)
  3423  0390  00DD               	movwf	??_command_calibrate_dac+1
  3424  0391  085D               	movf	??_command_calibrate_dac+1,w
  3425  0392  00F6               	movwf	?_DAC1220_Read3Bytes+1
  3426  0393  3064               	movlw	(command_calibrate_dac@data+5)& (0+255)
  3427  0394  00DE               	movwf	??_command_calibrate_dac+2
  3428  0395  085E               	movf	??_command_calibrate_dac+2,w
  3429  0396  00F7               	movwf	?_DAC1220_Read3Bytes+2
  3430  0397  300C               	movlw	12
  3431  0398  3185  253B  3183   	fcall	_DAC1220_Read3Bytes
  3432                           
  3433                           ;main.c: 194: HEFLASH_writeBlock(2, data, 6);
  3434  039B  305F               	movlw	command_calibrate_dac@data& (0+255)
  3435  039C  0020               	movlb	0	; select bank0
  3436  039D  00DC               	movwf	??_command_calibrate_dac
  3437  039E  085C               	movf	??_command_calibrate_dac,w
  3438  039F  00F7               	movwf	?_HEFLASH_writeBlock
  3439  03A0  3006               	movlw	6
  3440  03A1  00DD               	movwf	??_command_calibrate_dac+1
  3441  03A2  085D               	movf	??_command_calibrate_dac+1,w
  3442  03A3  00F8               	movwf	?_HEFLASH_writeBlock+1
  3443  03A4  3002               	movlw	2
  3444  03A5  3183  230A  3183   	fcall	_HEFLASH_writeBlock
  3445                           
  3446                           ;main.c: 195: send_OK();
  3447  03A8  3186  26B2         	fcall	_send_OK
  3448  03AA  0008               	return
  3449  03AB                     __end_of_command_calibrate_dac:	
  3450                           
  3451                           	psect	text17
  3452  07A5                     __ptext17:	
  3453 ;; *************** function _DAC1220_SelfCal *****************
  3454 ;; Defined at:
  3455 ;;		line 127 in file "spi/spi_software.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        2 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    5
  3476 ;; This function calls:
  3477 ;;		_DAC1220_Write2Bytes
  3478 ;; This function is called by:
  3479 ;;		_command_calibrate_dac
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _DAC1220_SelfCal
  3485  07A5                     _DAC1220_SelfCal:	
  3486                           
  3487                           ;spi_software.c: 128: DAC1220_Write2Bytes(4, 32, 161);
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _DAC1220_SelfCal: [wreg+status,2+status,0+pclath+cstack]
  3491  07A5  3020               	movlw	32
  3492  07A6  00F8               	movwf	??_DAC1220_SelfCal
  3493  07A7  0878               	movf	??_DAC1220_SelfCal,w
  3494  07A8  00F5               	movwf	?_DAC1220_Write2Bytes
  3495  07A9  30A1               	movlw	161
  3496  07AA  00F9               	movwf	??_DAC1220_SelfCal+1
  3497  07AB  0879               	movf	??_DAC1220_SelfCal+1,w
  3498  07AC  00F6               	movwf	?_DAC1220_Write2Bytes+1
  3499  07AD  3004               	movlw	4
  3500  07AE  3185  25D4         	fcall	_DAC1220_Write2Bytes
  3501  07B0  0008               	return
  3502  07B1                     __end_of_DAC1220_SelfCal:	
  3503                           
  3504                           	psect	text18
  3505  053B                     __ptext18:	
  3506 ;; *************** function _DAC1220_Read3Bytes *****************
  3507 ;; Defined at:
  3508 ;;		line 106 in file "spi/spi_software.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  address         1    wreg     const unsigned char 
  3511 ;;  byte1           1    5[COMMON] PTR unsigned char 
  3512 ;;		 -> command_calibrate_dac@data(6), 
  3513 ;;  byte2           1    6[COMMON] PTR unsigned char 
  3514 ;;		 -> command_calibrate_dac@data(6), 
  3515 ;;  byte3           1    7[COMMON] PTR unsigned char 
  3516 ;;		 -> command_calibrate_dac@data(6), 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  address         1    9[COMMON] const unsigned char 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3528 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3529 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3532 ;;Total ram usage:        5 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    4
  3535 ;; This function calls:
  3536 ;;		_SPIDelay
  3537 ;;		_WriteByteSPI
  3538 ;;		_ReadByteSPI
  3539 ;; This function is called by:
  3540 ;;		_command_calibrate_dac
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _DAC1220_Read3Bytes
  3546  053B                     _DAC1220_Read3Bytes:	
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _DAC1220_Read3Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3550                           ;DAC1220_Read3Bytes@address stored from wreg
  3551  053B  00F9               	movwf	DAC1220_Read3Bytes@address
  3552                           
  3553                           ;spi_software.c: 107: LATBbits.LATB6 = 0;
  3554  053C  0022               	movlb	2	; select bank2
  3555  053D  130D               	bcf	13,6	;volatile
  3556                           
  3557                           ;spi_software.c: 108: SPIDelay();
  3558  053E  3187  27F2  3185   	fcall	_SPIDelay
  3559                           
  3560                           ;spi_software.c: 109: TRISBbits.TRISB4 = 0;
  3561  0541  0021               	movlb	1	; select bank1
  3562  0542  120D               	bcf	13,4	;volatile
  3563                           
  3564                           ;spi_software.c: 110: WriteByteSPI(192+address);
  3565  0543  0879               	movf	DAC1220_Read3Bytes@address,w
  3566  0544  3EC0               	addlw	192
  3567  0545  3186  260A  3185   	fcall	_WriteByteSPI
  3568                           
  3569                           ;spi_software.c: 111: TRISBbits.TRISB4 = 1;
  3570  0548  0021               	movlb	1	; select bank1
  3571  0549  160D               	bsf	13,4	;volatile
  3572                           
  3573                           ;spi_software.c: 112: SPIDelay();
  3574  054A  3187  27F2  3185   	fcall	_SPIDelay
  3575                           
  3576                           ;spi_software.c: 113: *byte1 = ReadByteSPI();
  3577  054D  3186  266F  3185   	fcall	_ReadByteSPI
  3578  0550  00F8               	movwf	??_DAC1220_Read3Bytes
  3579  0551  0875               	movf	DAC1220_Read3Bytes@byte1,w
  3580  0552  0086               	movwf	6
  3581  0553  0187               	clrf	7
  3582  0554  0878               	movf	??_DAC1220_Read3Bytes,w
  3583  0555  0081               	movwf	1
  3584                           
  3585                           ;spi_software.c: 114: *byte2 = ReadByteSPI();
  3586  0556  3186  266F  3185   	fcall	_ReadByteSPI
  3587  0559  00F8               	movwf	??_DAC1220_Read3Bytes
  3588  055A  0876               	movf	DAC1220_Read3Bytes@byte2,w
  3589  055B  0086               	movwf	6
  3590  055C  0187               	clrf	7
  3591  055D  0878               	movf	??_DAC1220_Read3Bytes,w
  3592  055E  0081               	movwf	1
  3593                           
  3594                           ;spi_software.c: 115: *byte3 = ReadByteSPI();
  3595  055F  3186  266F  3185   	fcall	_ReadByteSPI
  3596  0562  00F8               	movwf	??_DAC1220_Read3Bytes
  3597  0563  0877               	movf	DAC1220_Read3Bytes@byte3,w
  3598  0564  0086               	movwf	6
  3599  0565  0187               	clrf	7
  3600  0566  0878               	movf	??_DAC1220_Read3Bytes,w
  3601  0567  0081               	movwf	1
  3602                           
  3603                           ;spi_software.c: 116: LATBbits.LATB6 = 1;
  3604  0568  0022               	movlb	2	; select bank2
  3605  0569  170D               	bsf	13,6	;volatile
  3606                           
  3607                           ;spi_software.c: 117: SPIDelay();
  3608  056A  3187  27F2         	fcall	_SPIDelay
  3609  056C  0008               	return
  3610  056D                     __end_of_DAC1220_Read3Bytes:	
  3611                           
  3612                           	psect	text19
  3613  066F                     __ptext19:	
  3614 ;; *************** function _ReadByteSPI *****************
  3615 ;; Defined at:
  3616 ;;		line 151 in file "spi/spi_software.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  data_byte       1    4[COMMON] unsigned char 
  3621 ;;  bit_counter     1    3[COMMON] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      unsigned char 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0, pclath, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;Total ram usage:        3 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    3
  3638 ;; This function calls:
  3639 ;;		_ClockPulse
  3640 ;; This function is called by:
  3641 ;;		_DAC1220_Read3Bytes
  3642 ;;		_DAC1220_Read2Bytes
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           
  3647                           ;psect for function _ReadByteSPI
  3648  066F                     _ReadByteSPI:	
  3649                           
  3650                           ;spi_software.c: 152: uint8_t data_byte = 0;
  3651                           
  3652                           ;incstack = 0
  3653                           ; Regs used in _ReadByteSPI: [wreg+status,2+status,0+pclath+cstack]
  3654  066F  01F4               	clrf	ReadByteSPI@data_byte
  3655                           
  3656                           ;spi_software.c: 153: uint8_t bit_counter = 8;
  3657  0670  3008               	movlw	8
  3658  0671  00F2               	movwf	??_ReadByteSPI
  3659  0672  0872               	movf	??_ReadByteSPI,w
  3660  0673  00F3               	movwf	ReadByteSPI@bit_counter
  3661  0674                     l2356:	
  3662                           ;spi_software.c: 154: do
  3663                           
  3664                           
  3665                           ;spi_software.c: 155: {
  3666                           ;spi_software.c: 156: ClockPulse();
  3667  0674  3187  27BC  3186   	fcall	_ClockPulse
  3668                           
  3669                           ;spi_software.c: 157: data_byte <<= 1;
  3670  0677  1003               	clrc
  3671  0678  0DF4               	rlf	ReadByteSPI@data_byte,f
  3672                           
  3673                           ;spi_software.c: 158: data_byte &= 0xFE;
  3674  0679  30FE               	movlw	254
  3675  067A  00F2               	movwf	??_ReadByteSPI
  3676  067B  0872               	movf	??_ReadByteSPI,w
  3677  067C  05F4               	andwf	ReadByteSPI@data_byte,f
  3678                           
  3679                           ;spi_software.c: 159: if(PORTBbits.RB4)
  3680  067D  0020               	movlb	0	; select bank0
  3681  067E  1A0D               	btfsc	13,4	;volatile
  3682                           
  3683                           ;spi_software.c: 160: data_byte |= 0x01;
  3684  067F  1474               	bsf	ReadByteSPI@data_byte,0
  3685                           
  3686                           ;spi_software.c: 161: } while (--bit_counter);
  3687  0680  3001               	movlw	1
  3688  0681  02F3               	subwf	ReadByteSPI@bit_counter,f
  3689  0682  1D03               	btfss	3,2
  3690  0683  2E74               	goto	l2356
  3691                           
  3692                           ;spi_software.c: 162: return data_byte;
  3693  0684  0874               	movf	ReadByteSPI@data_byte,w
  3694  0685  0008               	return
  3695  0686                     __end_of_ReadByteSPI:	
  3696                           
  3697                           	psect	text20
  3698  030A                     __ptext20:	
  3699 ;; *************** function _HEFLASH_writeBlock *****************
  3700 ;; Defined at:
  3701 ;;		line 18 in file "heflash/HEFlash.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;  radd            1    wreg     unsigned char 
  3704 ;;  data            1    7[COMMON] PTR const unsigned char 
  3705 ;;		 -> uart_command(20), command_calibrate_dac@data(6), 
  3706 ;;  count           1    8[COMMON] unsigned char 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  radd            1    0[BANK0 ] unsigned char 
  3709 ;;  add             2    1[BANK0 ] unsigned int 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      unsigned char 
  3712 ;; Registers used:
  3713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3719 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;Total ram usage:        7 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    3
  3726 ;; This function calls:
  3727 ;;		_FLASH_write
  3728 ;;		_FLASH_erase
  3729 ;; This function is called by:
  3730 ;;		_command_calibrate_dac
  3731 ;;		_command_save_offset
  3732 ;;		_command_save_shuntcalibration
  3733 ;;		_command_set_dac_cal
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           
  3738                           ;psect for function _HEFLASH_writeBlock
  3739  030A                     _HEFLASH_writeBlock:	
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _HEFLASH_writeBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3743                           ;HEFLASH_writeBlock@radd stored from wreg
  3744  030A  0020               	movlb	0	; select bank0
  3745  030B  00D9               	movwf	HEFLASH_writeBlock@radd
  3746                           
  3747                           ;HEFlash.c: 20: unsigned add = radd * 32 + 0x1F80;
  3748  030C  0859               	movf	HEFLASH_writeBlock@radd,w
  3749  030D  00F9               	movwf	??_HEFLASH_writeBlock
  3750  030E  01FA               	clrf	??_HEFLASH_writeBlock+1
  3751  030F  3005               	movlw	5
  3752  0310                     u715:	
  3753  0310  35F9               	lslf	??_HEFLASH_writeBlock,f
  3754  0311  0DFA               	rlf	??_HEFLASH_writeBlock+1,f
  3755  0312  0B89               	decfsz	9,f
  3756  0313  2B10               	goto	u715
  3757  0314  0879               	movf	??_HEFLASH_writeBlock,w
  3758  0315  3E80               	addlw	128
  3759  0316  00DA               	movwf	HEFLASH_writeBlock@add
  3760  0317  301F               	movlw	31
  3761  0318  3D7A               	addwfc	??_HEFLASH_writeBlock+1,w
  3762  0319  00DB               	movwf	HEFLASH_writeBlock@add+1
  3763                           
  3764                           ;HEFlash.c: 23: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  3765  031A  3021               	movlw	33
  3766  031B  0278               	subwf	HEFLASH_writeBlock@count,w
  3767  031C  1803               	skipnc
  3768  031D  0008               	return
  3769  031E  3004               	movlw	4
  3770  031F  0259               	subwf	HEFLASH_writeBlock@radd,w
  3771  0320  1803               	btfsc	3,0
  3772  0321  0008               	return
  3773                           
  3774                           ;HEFlash.c: 27: FLASH_erase( add);
  3775                           
  3776                           ;HEFlash.c: 24: return -1;
  3777                           ;	Return value of _HEFLASH_writeBlock is never used
  3778  0322  085B               	movf	HEFLASH_writeBlock@add+1,w
  3779  0323  01F2               	clrf	?_FLASH_erase+1
  3780  0324  07F2               	addwf	?_FLASH_erase+1,f
  3781  0325  085A               	movf	HEFLASH_writeBlock@add,w
  3782  0326  01F1               	clrf	?_FLASH_erase
  3783  0327  07F1               	addwf	?_FLASH_erase,f
  3784  0328  3186  2624  3183   	fcall	_FLASH_erase
  3785  032B                     l1594:	
  3786                           ;HEFlash.c: 30: while( count > 1)
  3787                           
  3788  032B  3002               	movlw	2
  3789  032C  0278               	subwf	HEFLASH_writeBlock@count,w
  3790  032D  1C03               	btfss	3,0
  3791  032E  2B51               	goto	l1596
  3792                           
  3793                           ;HEFlash.c: 31: {
  3794                           ;HEFlash.c: 33: FLASH_write( add++, (unsigned) *data++, 1);
  3795  032F  0020               	movlb	0	; select bank0
  3796  0330  085B               	movf	HEFLASH_writeBlock@add+1,w
  3797  0331  01F2               	clrf	?_FLASH_write+1
  3798  0332  07F2               	addwf	?_FLASH_write+1,f
  3799  0333  085A               	movf	HEFLASH_writeBlock@add,w
  3800  0334  01F1               	clrf	?_FLASH_write
  3801  0335  07F1               	addwf	?_FLASH_write,f
  3802  0336  0877               	movf	HEFLASH_writeBlock@data,w
  3803  0337  0086               	movwf	6
  3804  0338  0187               	clrf	7
  3805  0339  0801               	movf	1,w
  3806  033A  00F9               	movwf	??_HEFLASH_writeBlock
  3807  033B  01FA               	clrf	??_HEFLASH_writeBlock+1
  3808  033C  0879               	movf	??_HEFLASH_writeBlock,w
  3809  033D  00F3               	movwf	?_FLASH_write+2
  3810  033E  087A               	movf	??_HEFLASH_writeBlock+1,w
  3811  033F  00F4               	movwf	?_FLASH_write+3
  3812  0340  01F5               	clrf	?_FLASH_write+4
  3813  0341  0AF5               	incf	?_FLASH_write+4,f
  3814  0342  3185  2592  3183   	fcall	_FLASH_write
  3815  0345  3001               	movlw	1
  3816  0346  00F9               	movwf	??_HEFLASH_writeBlock
  3817  0347  0879               	movf	??_HEFLASH_writeBlock,w
  3818  0348  07F7               	addwf	HEFLASH_writeBlock@data,f
  3819  0349  3001               	movlw	1
  3820  034A  0020               	movlb	0	; select bank0
  3821  034B  07DA               	addwf	HEFLASH_writeBlock@add,f
  3822  034C  3000               	movlw	0
  3823  034D  3DDB               	addwfc	HEFLASH_writeBlock@add+1,f
  3824                           
  3825                           ;HEFlash.c: 34: count--;
  3826  034E  3001               	movlw	1
  3827  034F  02F8               	subwf	HEFLASH_writeBlock@count,f
  3828  0350  2B2B               	goto	l1594
  3829  0351                     l1596:	
  3830                           
  3831                           ;HEFlash.c: 35: }
  3832                           ;HEFlash.c: 39: FLASH_write( add, (unsigned) *data, 0);
  3833  0351  0020               	movlb	0	; select bank0
  3834  0352  085B               	movf	HEFLASH_writeBlock@add+1,w
  3835  0353  01F2               	clrf	?_FLASH_write+1
  3836  0354  07F2               	addwf	?_FLASH_write+1,f
  3837  0355  085A               	movf	HEFLASH_writeBlock@add,w
  3838  0356  01F1               	clrf	?_FLASH_write
  3839  0357  07F1               	addwf	?_FLASH_write,f
  3840  0358  0877               	movf	HEFLASH_writeBlock@data,w
  3841  0359  0086               	movwf	6
  3842  035A  0187               	clrf	7
  3843  035B  0801               	movf	1,w
  3844  035C  00F9               	movwf	??_HEFLASH_writeBlock
  3845  035D  01FA               	clrf	??_HEFLASH_writeBlock+1
  3846  035E  0879               	movf	??_HEFLASH_writeBlock,w
  3847  035F  00F3               	movwf	?_FLASH_write+2
  3848  0360  087A               	movf	??_HEFLASH_writeBlock+1,w
  3849  0361  00F4               	movwf	?_FLASH_write+3
  3850  0362  01F5               	clrf	?_FLASH_write+4
  3851  0363  3185  2592         	fcall	_FLASH_write
  3852                           
  3853                           ;HEFlash.c: 44: return PMCON1bits.WRERR;
  3854                           ;	Return value of _HEFLASH_writeBlock is never used
  3855  0365  0023               	movlb	3	; select bank3
  3856  0366  0815               	movf	21,w	;volatile
  3857  0367  0008               	return
  3858  0368                     __end_of_HEFLASH_writeBlock:	
  3859                           
  3860                           	psect	text21
  3861  0624                     __ptext21:	
  3862 ;; *************** function _FLASH_erase *****************
  3863 ;; Defined at:
  3864 ;;		line 100 in file "heflash/Flash.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  address         2    1[COMMON] unsigned int 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  temp            1    3[COMMON] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;		None               void
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3878 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;Total ram usage:        3 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    2
  3885 ;; This function calls:
  3886 ;;		__unlock
  3887 ;; This function is called by:
  3888 ;;		_HEFLASH_writeBlock
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _FLASH_erase
  3894  0624                     _FLASH_erase:	
  3895                           
  3896                           ;Flash.c: 102: char temp = INTCONbits.GIE;
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _FLASH_erase: [wreg+status,2+status,0+pclath+cstack]
  3900  0624  3000               	movlw	0
  3901  0625  1B8B               	btfsc	11,7	;volatile
  3902  0626  3001               	movlw	1
  3903  0627  00F3               	movwf	FLASH_erase@temp
  3904                           
  3905                           ;Flash.c: 103: INTCONbits.GIE = 0;
  3906  0628  138B               	bcf	11,7	;volatile
  3907                           
  3908                           ;Flash.c: 107: PMADR = address;
  3909  0629  0872               	movf	FLASH_erase@address+1,w
  3910  062A  0023               	movlb	3	; select bank3
  3911  062B  0192               	clrf	18	;volatile
  3912  062C  0792               	addwf	18,f	;volatile
  3913  062D  0871               	movf	FLASH_erase@address,w
  3914  062E  0191               	clrf	17	;volatile
  3915  062F  0791               	addwf	17,f	;volatile
  3916                           
  3917                           ;Flash.c: 108: PMCON1bits.CFGS = 0;
  3918  0630  1315               	bcf	21,6	;volatile
  3919                           
  3920                           ;Flash.c: 109: PMCON1bits.FREE = 1;
  3921  0631  1615               	bsf	21,4	;volatile
  3922                           
  3923                           ;Flash.c: 110: PMCON1bits.WREN = 1;
  3924  0632  1515               	bsf	21,2	;volatile
  3925                           
  3926                           ;Flash.c: 113: _unlock();
  3927  0633  3187  27C6  3186   	fcall	__unlock
  3928                           
  3929                           ;Flash.c: 116: PMCON1bits.WREN = 0;
  3930  0636  0023               	movlb	3	; select bank3
  3931  0637  1115               	bcf	21,2	;volatile
  3932                           
  3933                           ;Flash.c: 117: if ( temp)
  3934  0638  0873               	movf	FLASH_erase@temp,w
  3935  0639  1903               	btfsc	3,2
  3936  063A  0008               	return
  3937                           
  3938                           ;Flash.c: 118: INTCONbits.GIE = 1;
  3939  063B  178B               	bsf	11,7	;volatile
  3940  063C  0008               	return
  3941  063D                     __end_of_FLASH_erase:	
  3942                           
  3943                           	psect	text22
  3944  0592                     __ptext22:	
  3945 ;; *************** function _FLASH_write *****************
  3946 ;; Defined at:
  3947 ;;		line 76 in file "heflash/Flash.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  address         2    1[COMMON] unsigned int 
  3950 ;;  data            2    3[COMMON] unsigned int 
  3951 ;;  latch           1    5[COMMON] unsigned char 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  temp            1    6[COMMON] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;		None               void
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0, pclath, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3963 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;Total ram usage:        6 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    2
  3970 ;; This function calls:
  3971 ;;		__unlock
  3972 ;; This function is called by:
  3973 ;;		_HEFLASH_writeBlock
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           
  3978                           ;psect for function _FLASH_write
  3979  0592                     _FLASH_write:	
  3980                           
  3981                           ;Flash.c: 78: char temp = INTCONbits.GIE;
  3982                           
  3983                           ;incstack = 0
  3984                           ; Regs used in _FLASH_write: [wreg+status,2+status,0+pclath+cstack]
  3985  0592  3000               	movlw	0
  3986  0593  1B8B               	btfsc	11,7	;volatile
  3987  0594  3001               	movlw	1
  3988  0595  00F6               	movwf	FLASH_write@temp
  3989                           
  3990                           ;Flash.c: 79: INTCONbits.GIE = 0;
  3991  0596  138B               	bcf	11,7	;volatile
  3992                           
  3993                           ;Flash.c: 82: PMADR = address;
  3994  0597  0872               	movf	FLASH_write@address+1,w
  3995  0598  0023               	movlb	3	; select bank3
  3996  0599  0192               	clrf	18	;volatile
  3997  059A  0792               	addwf	18,f	;volatile
  3998  059B  0871               	movf	FLASH_write@address,w
  3999  059C  0191               	clrf	17	;volatile
  4000  059D  0791               	addwf	17,f	;volatile
  4001                           
  4002                           ;Flash.c: 83: PMDAT = data;
  4003  059E  0874               	movf	FLASH_write@data+1,w
  4004  059F  0194               	clrf	20	;volatile
  4005  05A0  0794               	addwf	20,f	;volatile
  4006  05A1  0873               	movf	FLASH_write@data,w
  4007  05A2  0193               	clrf	19	;volatile
  4008  05A3  0793               	addwf	19,f	;volatile
  4009                           
  4010                           ;Flash.c: 84: PMCON1bits.LWLO = latch;
  4011  05A4  0875               	movf	FLASH_write@latch,w
  4012  05A5  1D03               	skipz
  4013  05A6  1695               	bsf	21,5	;volatile
  4014  05A7  1903               	skipnz
  4015  05A8  1295               	bcf	21,5	;volatile
  4016                           
  4017                           ;Flash.c: 85: PMCON1bits.CFGS = 0;
  4018  05A9  1315               	bcf	21,6	;volatile
  4019                           
  4020                           ;Flash.c: 86: PMCON1bits.FREE = 0;
  4021  05AA  1215               	bcf	21,4	;volatile
  4022                           
  4023                           ;Flash.c: 87: PMCON1bits.WREN = 1;
  4024  05AB  1515               	bsf	21,2	;volatile
  4025                           
  4026                           ;Flash.c: 90: _unlock();
  4027  05AC  3187  27C6  3185   	fcall	__unlock
  4028                           
  4029                           ;Flash.c: 93: if ( temp)
  4030  05AF  0876               	movf	FLASH_write@temp,w
  4031  05B0  1903               	btfsc	3,2
  4032  05B1  0008               	return
  4033                           
  4034                           ;Flash.c: 94: INTCONbits.GIE = 1;
  4035  05B2  178B               	bsf	11,7	;volatile
  4036  05B3  0008               	return
  4037  05B4                     __end_of_FLASH_write:	
  4038                           
  4039                           	psect	text23
  4040  07C6                     __ptext23:	
  4041 ;; *************** function __unlock *****************
  4042 ;; Defined at:
  4043 ;;		line 59 in file "heflash/Flash.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;		None
  4046 ;; Auto vars:     Size  Location     Type
  4047 ;;		None
  4048 ;; Return value:  Size  Location     Type
  4049 ;;		None               void
  4050 ;; Registers used:
  4051 ;;		None
  4052 ;; Tracked objects:
  4053 ;;		On entry : 0/0
  4054 ;;		On exit  : 0/0
  4055 ;;		Unchanged: 0/0
  4056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;Total ram usage:        0 bytes
  4062 ;; Hardware stack levels used:    1
  4063 ;; Hardware stack levels required when called:    1
  4064 ;; This function calls:
  4065 ;;		Nothing
  4066 ;; This function is called by:
  4067 ;;		_FLASH_write
  4068 ;;		_FLASH_erase
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           
  4073                           ;psect for function __unlock
  4074  07C6                     __unlock:	
  4075                           
  4076                           ;incstack = 0
  4077                           ; Regs used in __unlock: []
  4078  07C6  0023               	banksel	406	;# 
  4079  07C7  3055               	movlw	85	;# 
  4080  07C8  0096               	movwf	22	;# 
  4081  07C9  30AA               	movlw	170	;# 
  4082  07CA  0096               	movwf	22	;# 
  4083  07CB  1495               	bsf	21,1	; set WR bit ;# 
  4084  07CC  0000               	nop	;# 
  4085  07CD  0000               	nop	;# 
  4086  07CE  0008               	return
  4087  07CF                     __end_of__unlock:	
  4088                           
  4089                           	psect	text24
  4090  05F0                     __ptext24:	
  4091 ;; *************** function _command_set_dac *****************
  4092 ;; Defined at:
  4093 ;;		line 182 in file "main.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  dac_data        1    wreg     PTR const unsigned char 
  4096 ;;		 -> uart_command(20), 
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;  dac_data        1    4[BANK0 ] PTR const unsigned char 
  4099 ;;		 -> uart_command(20), 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;		None               void
  4102 ;; Registers used:
  4103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;Total ram usage:        2 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    5
  4116 ;; This function calls:
  4117 ;;		_DAC1220_Write3Bytes
  4118 ;;		_send_OK
  4119 ;; This function is called by:
  4120 ;;		_interpret_command
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _command_set_dac
  4126  05F0                     _command_set_dac:	
  4127                           
  4128                           ;incstack = 0
  4129                           ; Regs used in _command_set_dac: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4130                           ;command_set_dac@dac_data stored from wreg
  4131  05F0  0020               	movlb	0	; select bank0
  4132  05F1  00DD               	movwf	command_set_dac@dac_data
  4133                           
  4134                           ;main.c: 183: DAC1220_Write3Bytes(0, dac_data[0], dac_data[1], dac_data[2]);
  4135  05F2  085D               	movf	command_set_dac@dac_data,w
  4136  05F3  0086               	movwf	6
  4137  05F4  0187               	clrf	7
  4138  05F5  0801               	movf	1,w
  4139  05F6  00DC               	movwf	??_command_set_dac
  4140  05F7  085C               	movf	??_command_set_dac,w
  4141  05F8  00F5               	movwf	?_DAC1220_Write3Bytes
  4142  05F9  085D               	movf	command_set_dac@dac_data,w
  4143  05FA  0086               	movwf	6
  4144  05FB  0187               	clrf	7
  4145  05FC  3F41               	moviw [1]fsr1
  4146  05FD  00F6               	movwf	?_DAC1220_Write3Bytes+1
  4147  05FE  085D               	movf	command_set_dac@dac_data,w
  4148  05FF  0086               	movwf	6
  4149  0600  0187               	clrf	7
  4150  0601  3F42               	moviw [2]fsr1
  4151  0602  00F7               	movwf	?_DAC1220_Write3Bytes+2
  4152  0603  3000               	movlw	0
  4153  0604  3185  25B4  3185   	fcall	_DAC1220_Write3Bytes
  4154                           
  4155                           ;main.c: 184: send_OK();
  4156  0607  3186  26B2         	fcall	_send_OK
  4157  0609  0008               	return
  4158  060A                     __end_of_command_set_dac:	
  4159                           
  4160                           	psect	text25
  4161  0729                     __ptext25:	
  4162 ;; *************** function _command_range3 *****************
  4163 ;; Defined at:
  4164 ;;		line 173 in file "main.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;Total ram usage:        2 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		_send_OK
  4187 ;; This function is called by:
  4188 ;;		_interpret_command
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _command_range3
  4194  0729                     _command_range3:	
  4195                           
  4196                           ;main.c: 174: LATCbits.LATC6 = 1;
  4197                           
  4198                           ;incstack = 0
  4199                           ; Regs used in _command_range3: [wreg+status,2+status,0+pclath+cstack]
  4200  0729  0022               	movlb	2	; select bank2
  4201  072A  170E               	bsf	14,6	;volatile
  4202                           
  4203                           ;main.c: 175: _delay((unsigned long)((10)*(48000000/4000.0)));
  4204  072B  309C               	movlw	156
  4205  072C  0020               	movlb	0	; select bank0
  4206  072D  00DD               	movwf	??_command_range3+1
  4207  072E  30D7               	movlw	215
  4208  072F  00DC               	movwf	??_command_range3
  4209  0730                     u1887:	
  4210  0730  0BDC               	decfsz	??_command_range3,f
  4211  0731  2F30               	goto	u1887
  4212  0732  0BDD               	decfsz	??_command_range3+1,f
  4213  0733  2F30               	goto	u1887
  4214                           
  4215                           ;main.c: 176: LATCbits.LATC4 = 0;
  4216  0734  0022               	movlb	2	; select bank2
  4217  0735  120E               	bcf	14,4	;volatile
  4218                           
  4219                           ;main.c: 177: LATCbits.LATC5 = 0;
  4220  0736  128E               	bcf	14,5	;volatile
  4221                           
  4222                           ;main.c: 178: send_OK();
  4223  0737  3186  26B2         	fcall	_send_OK
  4224  0739  0008               	return
  4225  073A                     __end_of_command_range3:	
  4226                           
  4227                           	psect	text26
  4228  073A                     __ptext26:	
  4229 ;; *************** function _command_range2 *****************
  4230 ;; Defined at:
  4231 ;;		line 164 in file "main.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;		None               void
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0, pclath, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:        2 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    4
  4252 ;; This function calls:
  4253 ;;		_send_OK
  4254 ;; This function is called by:
  4255 ;;		_interpret_command
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _command_range2
  4261  073A                     _command_range2:	
  4262                           
  4263                           ;main.c: 165: LATCbits.LATC5 = 1;
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _command_range2: [wreg+status,2+status,0+pclath+cstack]
  4267  073A  0022               	movlb	2	; select bank2
  4268  073B  168E               	bsf	14,5	;volatile
  4269                           
  4270                           ;main.c: 166: _delay((unsigned long)((10)*(48000000/4000.0)));
  4271  073C  309C               	movlw	156
  4272  073D  0020               	movlb	0	; select bank0
  4273  073E  00DD               	movwf	??_command_range2+1
  4274  073F  30D7               	movlw	215
  4275  0740  00DC               	movwf	??_command_range2
  4276  0741                     u1897:	
  4277  0741  0BDC               	decfsz	??_command_range2,f
  4278  0742  2F41               	goto	u1897
  4279  0743  0BDD               	decfsz	??_command_range2+1,f
  4280  0744  2F41               	goto	u1897
  4281                           
  4282                           ;main.c: 167: LATCbits.LATC4 = 0;
  4283  0745  0022               	movlb	2	; select bank2
  4284  0746  120E               	bcf	14,4	;volatile
  4285                           
  4286                           ;main.c: 168: LATCbits.LATC6 = 0;
  4287  0747  130E               	bcf	14,6	;volatile
  4288                           
  4289                           ;main.c: 169: send_OK();
  4290  0748  3186  26B2         	fcall	_send_OK
  4291  074A  0008               	return
  4292  074B                     __end_of_command_range2:	
  4293                           
  4294                           	psect	text27
  4295  074B                     __ptext27:	
  4296 ;; *************** function _command_range1 *****************
  4297 ;; Defined at:
  4298 ;;		line 155 in file "main.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;		None               void
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, pclath, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4316 ;;Total ram usage:        2 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    4
  4319 ;; This function calls:
  4320 ;;		_send_OK
  4321 ;; This function is called by:
  4322 ;;		_interpret_command
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           
  4327                           ;psect for function _command_range1
  4328  074B                     _command_range1:	
  4329                           
  4330                           ;main.c: 156: LATCbits.LATC4 = 1;
  4331                           
  4332                           ;incstack = 0
  4333                           ; Regs used in _command_range1: [wreg+status,2+status,0+pclath+cstack]
  4334  074B  0022               	movlb	2	; select bank2
  4335  074C  160E               	bsf	14,4	;volatile
  4336                           
  4337                           ;main.c: 157: _delay((unsigned long)((10)*(48000000/4000.0)));
  4338  074D  309C               	movlw	156
  4339  074E  0020               	movlb	0	; select bank0
  4340  074F  00DD               	movwf	??_command_range1+1
  4341  0750  30D7               	movlw	215
  4342  0751  00DC               	movwf	??_command_range1
  4343  0752                     u1907:	
  4344  0752  0BDC               	decfsz	??_command_range1,f
  4345  0753  2F52               	goto	u1907
  4346  0754  0BDD               	decfsz	??_command_range1+1,f
  4347  0755  2F52               	goto	u1907
  4348                           
  4349                           ;main.c: 158: LATCbits.LATC5 = 0;
  4350  0756  0022               	movlb	2	; select bank2
  4351  0757  128E               	bcf	14,5	;volatile
  4352                           
  4353                           ;main.c: 159: LATCbits.LATC6 = 0;
  4354  0758  130E               	bcf	14,6	;volatile
  4355                           
  4356                           ;main.c: 160: send_OK();
  4357  0759  3186  26B2         	fcall	_send_OK
  4358  075B  0008               	return
  4359  075C                     __end_of_command_range1:	
  4360                           
  4361                           	psect	text28
  4362  00D2                     __ptext28:	
  4363 ;; *************** function _command_mode_galvanostatic *****************
  4364 ;; Defined at:
  4365 ;;		line 149 in file "main.c"
  4366 ;; Parameters:    Size  Location     Type
  4367 ;;		None
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;		None
  4370 ;; Return value:  Size  Location     Type
  4371 ;;		None               void
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0, pclath, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 0/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;Total ram usage:        0 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    4
  4386 ;; This function calls:
  4387 ;;		_send_OK
  4388 ;; This function is called by:
  4389 ;;		_interpret_command
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           
  4394                           ;psect for function _command_mode_galvanostatic
  4395  00D2                     _command_mode_galvanostatic:	
  4396                           
  4397                           ;main.c: 150: LATAbits.LATA5 = 1;
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in _command_mode_galvanostatic: [wreg+status,2+status,0+pclath+cstack]
  4401  00D2  0022               	movlb	2	; select bank2
  4402  00D3  168C               	bsf	12,5	;volatile
  4403                           
  4404                           ;main.c: 151: send_OK();
  4405  00D4  3186  26B2         	fcall	_send_OK
  4406  00D6  0008               	return
  4407  00D7                     __end_of_command_mode_galvanostatic:	
  4408                           
  4409                           	psect	text29
  4410  00D7                     __ptext29:	
  4411 ;; *************** function _command_mode_potentiostatic *****************
  4412 ;; Defined at:
  4413 ;;		line 143 in file "main.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;		None
  4416 ;; Auto vars:     Size  Location     Type
  4417 ;;		None
  4418 ;; Return value:  Size  Location     Type
  4419 ;;		None               void
  4420 ;; Registers used:
  4421 ;;		wreg, status,2, status,0, pclath, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;Total ram usage:        0 bytes
  4432 ;; Hardware stack levels used:    1
  4433 ;; Hardware stack levels required when called:    4
  4434 ;; This function calls:
  4435 ;;		_send_OK
  4436 ;; This function is called by:
  4437 ;;		_interpret_command
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441                           
  4442                           ;psect for function _command_mode_potentiostatic
  4443  00D7                     _command_mode_potentiostatic:	
  4444                           
  4445                           ;main.c: 144: LATAbits.LATA5 = 0;
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _command_mode_potentiostatic: [wreg+status,2+status,0+pclath+cstack]
  4449  00D7  0022               	movlb	2	; select bank2
  4450  00D8  128C               	bcf	12,5	;volatile
  4451                           
  4452                           ;main.c: 145: send_OK();
  4453  00D9  3186  26B2         	fcall	_send_OK
  4454  00DB  0008               	return
  4455  00DC                     __end_of_command_mode_potentiostatic:	
  4456                           
  4457                           	psect	text30
  4458  00DC                     __ptext30:	
  4459 ;; *************** function _command_cell_off *****************
  4460 ;; Defined at:
  4461 ;;		line 137 in file "main.c"
  4462 ;; Parameters:    Size  Location     Type
  4463 ;;		None
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;		None
  4466 ;; Return value:  Size  Location     Type
  4467 ;;		None               void
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0, pclath, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;Total ram usage:        0 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    4
  4482 ;; This function calls:
  4483 ;;		_send_OK
  4484 ;; This function is called by:
  4485 ;;		_interpret_command
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           
  4490                           ;psect for function _command_cell_off
  4491  00DC                     _command_cell_off:	
  4492                           
  4493                           ;main.c: 138: LATAbits.LATA4 = 0;
  4494                           
  4495                           ;incstack = 0
  4496                           ; Regs used in _command_cell_off: [wreg+status,2+status,0+pclath+cstack]
  4497  00DC  0022               	movlb	2	; select bank2
  4498  00DD  120C               	bcf	12,4	;volatile
  4499                           
  4500                           ;main.c: 139: send_OK();
  4501  00DE  3186  26B2         	fcall	_send_OK
  4502  00E0  0008               	return
  4503  00E1                     __end_of_command_cell_off:	
  4504                           
  4505                           	psect	text31
  4506  00E1                     __ptext31:	
  4507 ;; *************** function _command_cell_on *****************
  4508 ;; Defined at:
  4509 ;;		line 131 in file "main.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;		None               void
  4516 ;; Registers used:
  4517 ;;		wreg, status,2, status,0, pclath, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;Total ram usage:        0 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    4
  4530 ;; This function calls:
  4531 ;;		_send_OK
  4532 ;; This function is called by:
  4533 ;;		_interpret_command
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _command_cell_on
  4539  00E1                     _command_cell_on:	
  4540                           
  4541                           ;main.c: 132: LATAbits.LATA4 = 1;
  4542                           
  4543                           ;incstack = 0
  4544                           ; Regs used in _command_cell_on: [wreg+status,2+status,0+pclath+cstack]
  4545  00E1  0022               	movlb	2	; select bank2
  4546  00E2  160C               	bsf	12,4	;volatile
  4547                           
  4548                           ;main.c: 133: send_OK();
  4549  00E3  3186  26B2         	fcall	_send_OK
  4550  00E5  0008               	return
  4551  00E6                     __end_of_command_cell_on:	
  4552                           
  4553                           	psect	text32
  4554  06B2                     __ptext32:	
  4555 ;; *************** function _send_OK *****************
  4556 ;; Defined at:
  4557 ;;		line 117 in file "main.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;		None
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  4562 ;;		 -> STR_3(4), 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;		None               void
  4565 ;; Registers used:
  4566 ;;		wreg, status,2, status,0, pclath, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;Total ram usage:        2 bytes
  4577 ;; Hardware stack levels used:    1
  4578 ;; Hardware stack levels required when called:    3
  4579 ;; This function calls:
  4580 ;;		_strlen
  4581 ;;		_USART_Send
  4582 ;; This function is called by:
  4583 ;;		_command_cell_on
  4584 ;;		_command_cell_off
  4585 ;;		_command_mode_potentiostatic
  4586 ;;		_command_mode_galvanostatic
  4587 ;;		_command_range1
  4588 ;;		_command_range2
  4589 ;;		_command_range3
  4590 ;;		_command_set_dac
  4591 ;;		_command_calibrate_dac
  4592 ;;		_command_save_offset
  4593 ;;		_command_save_shuntcalibration
  4594 ;;		_command_set_dac_cal
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _send_OK
  4600  06B2                     _send_OK:	
  4601                           
  4602                           ;main.c: 118: const uint8_t* reply = "OK\n";
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in _send_OK: [wreg+status,2+status,0+pclath+cstack]
  4606  06B2  30CB               	movlw	(STR_3| (0+32768))& (0+255)
  4607  06B3  00FB               	movwf	??_send_OK
  4608  06B4  087B               	movf	??_send_OK,w
  4609  06B5  0020               	movlb	0	; select bank0
  4610  06B6  00DB               	movwf	send_OK@reply
  4611                           
  4612                           ;main.c: 119: transmit_data_length = strlen(reply);
  4613  06B7  085B               	movf	send_OK@reply,w
  4614  06B8  3185  256D  3186   	fcall	_strlen
  4615  06BB  0871               	movf	?_strlen,w
  4616  06BC  00FB               	movwf	??_send_OK
  4617  06BD  087B               	movf	??_send_OK,w
  4618  06BE  0020               	movlb	0	; select bank0
  4619  06BF  00A4               	movwf	_transmit_data_length
  4620                           
  4621                           ;main.c: 120: USART_Send(reply,transmit_data_length);
  4622  06C0  0824               	movf	_transmit_data_length,w
  4623  06C1  00FB               	movwf	??_send_OK
  4624  06C2  087B               	movf	??_send_OK,w
  4625  06C3  00F9               	movwf	?_USART_Send
  4626  06C4  085B               	movf	send_OK@reply,w
  4627  06C5  3186  263D         	fcall	_USART_Send
  4628  06C7  0008               	return
  4629  06C8                     __end_of_send_OK:	
  4630                           
  4631                           	psect	text33
  4632  06C8                     __ptext33:	
  4633 ;; *************** function _command_unknown *****************
  4634 ;; Defined at:
  4635 ;;		line 109 in file "main.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;		None
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  4640 ;;		 -> STR_2(3), 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;		None               void
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;Total ram usage:        2 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    3
  4657 ;; This function calls:
  4658 ;;		_strlen
  4659 ;;		_USART_Send
  4660 ;; This function is called by:
  4661 ;;		_interpret_command
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _command_unknown
  4667  06C8                     _command_unknown:	
  4668                           
  4669                           ;main.c: 110: const uint8_t *reply = "?\n";
  4670                           
  4671                           ;incstack = 0
  4672                           ; Regs used in _command_unknown: [wreg+status,2+status,0+pclath+cstack]
  4673  06C8  30CF               	movlw	(STR_2| (0+32768))& (0+255)
  4674  06C9  00FB               	movwf	??_command_unknown
  4675  06CA  087B               	movf	??_command_unknown,w
  4676  06CB  0020               	movlb	0	; select bank0
  4677  06CC  00DB               	movwf	command_unknown@reply
  4678                           
  4679                           ;main.c: 112: transmit_data_length = strlen(reply);
  4680  06CD  085B               	movf	command_unknown@reply,w
  4681  06CE  3185  256D  3186   	fcall	_strlen
  4682  06D1  0871               	movf	?_strlen,w
  4683  06D2  00FB               	movwf	??_command_unknown
  4684  06D3  087B               	movf	??_command_unknown,w
  4685  06D4  0020               	movlb	0	; select bank0
  4686  06D5  00A4               	movwf	_transmit_data_length
  4687                           
  4688                           ;main.c: 113: USART_Send(reply,transmit_data_length);
  4689  06D6  0824               	movf	_transmit_data_length,w
  4690  06D7  00FB               	movwf	??_command_unknown
  4691  06D8  087B               	movf	??_command_unknown,w
  4692  06D9  00F9               	movwf	?_USART_Send
  4693  06DA  085B               	movf	command_unknown@reply,w
  4694  06DB  3186  263D         	fcall	_USART_Send
  4695  06DD  0008               	return
  4696  06DE                     __end_of_command_unknown:	
  4697                           
  4698                           	psect	text34
  4699  028A                     __ptext34:	
  4700 ;; *************** function _InitializeIO *****************
  4701 ;; Defined at:
  4702 ;;		line 77 in file "main.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;		None
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  startReply      1   11[COMMON] PTR const unsigned char 
  4707 ;;		 -> STR_1(8), 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;		None               void
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        4 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    6
  4724 ;; This function calls:
  4725 ;;		_HEFLASH_readBlock
  4726 ;;		_InitializeSPI
  4727 ;;		_DAC1220_Reset
  4728 ;;		_DAC1220_Write3Bytes
  4729 ;;		_DAC1220_Init
  4730 ;;		_EUSART_Initialize
  4731 ;;		_strlen
  4732 ;;		_USART_Send
  4733 ;; This function is called by:
  4734 ;;		_main
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _InitializeIO
  4740  028A                     _InitializeIO:	
  4741                           
  4742                           ;main.c: 78: OSCCONbits.IRCF = 0b1111;
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _InitializeIO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4746  028A  303C               	movlw	60
  4747  028B  0021               	movlb	1	; select bank1
  4748  028C  0499               	iorwf	25,f	;volatile
  4749                           
  4750                           ;main.c: 79: ANSELA = 0x00;
  4751  028D  0023               	movlb	3	; select bank3
  4752  028E  018C               	clrf	12	;volatile
  4753                           
  4754                           ;main.c: 80: ANSELB = 0x00;
  4755  028F  018D               	clrf	13	;volatile
  4756                           
  4757                           ;main.c: 81: ANSELC = 0x00;
  4758  0290  018E               	clrf	14	;volatile
  4759                           
  4760                           ;main.c: 82: APFCON = 0x00;
  4761  0291  0022               	movlb	2	; select bank2
  4762  0292  019D               	clrf	29	;volatile
  4763                           
  4764                           ;main.c: 83: TRISAbits.TRISA5 = 0;
  4765  0293  0021               	movlb	1	; select bank1
  4766  0294  128C               	bcf	12,5	;volatile
  4767                           
  4768                           ;main.c: 84: LATAbits.LATA5 = 0;
  4769  0295  0022               	movlb	2	; select bank2
  4770  0296  128C               	bcf	12,5	;volatile
  4771                           
  4772                           ;main.c: 85: TRISAbits.TRISA4 = 0;
  4773  0297  0021               	movlb	1	; select bank1
  4774  0298  120C               	bcf	12,4	;volatile
  4775                           
  4776                           ;main.c: 86: LATAbits.LATA4 = 0;
  4777  0299  0022               	movlb	2	; select bank2
  4778  029A  120C               	bcf	12,4	;volatile
  4779                           
  4780                           ;main.c: 87: TRISCbits.TRISC4 = 0;
  4781  029B  0021               	movlb	1	; select bank1
  4782  029C  120E               	bcf	14,4	;volatile
  4783                           
  4784                           ;main.c: 88: TRISCbits.TRISC5 = 0;
  4785  029D  128E               	bcf	14,5	;volatile
  4786                           
  4787                           ;main.c: 89: TRISCbits.TRISC6 = 0;
  4788  029E  130E               	bcf	14,6	;volatile
  4789                           
  4790                           ;main.c: 90: LATCbits.LATC4 = 1;
  4791  029F  0022               	movlb	2	; select bank2
  4792  02A0  160E               	bsf	14,4	;volatile
  4793                           
  4794                           ;main.c: 91: LATCbits.LATC5 = 0;
  4795  02A1  128E               	bcf	14,5	;volatile
  4796                           
  4797                           ;main.c: 92: LATCbits.LATC6 = 0;
  4798  02A2  130E               	bcf	14,6	;volatile
  4799                           
  4800                           ;main.c: 93: InitializeSPI();
  4801  02A3  3187  2798  3182   	fcall	_InitializeSPI
  4802                           
  4803                           ;main.c: 94: _delay((unsigned long)((25)*(48000000/4000.0)));
  4804  02A6  3002               	movlw	2
  4805  02A7  0020               	movlb	0	; select bank0
  4806  02A8  00DD               	movwf	??_InitializeIO+2
  4807  02A9  3086               	movlw	134
  4808  02AA  00DC               	movwf	??_InitializeIO+1
  4809  02AB  3099               	movlw	153
  4810  02AC  00DB               	movwf	??_InitializeIO
  4811  02AD                     u1917:	
  4812  02AD  0BDB               	decfsz	??_InitializeIO,f
  4813  02AE  2AAD               	goto	u1917
  4814  02AF  0BDC               	decfsz	??_InitializeIO+1,f
  4815  02B0  2AAD               	goto	u1917
  4816  02B1  0BDD               	decfsz	??_InitializeIO+2,f
  4817  02B2  2AAD               	goto	u1917
  4818                           
  4819                           ;main.c: 95: DAC1220_Reset();
  4820  02B3  3184  249A  3182   	fcall	_DAC1220_Reset
  4821                           
  4822                           ;main.c: 96: _delay((unsigned long)((25)*(48000000/4000.0)));
  4823  02B6  3002               	movlw	2
  4824  02B7  0020               	movlb	0	; select bank0
  4825  02B8  00DD               	movwf	??_InitializeIO+2
  4826  02B9  3086               	movlw	134
  4827  02BA  00DC               	movwf	??_InitializeIO+1
  4828  02BB  3099               	movlw	153
  4829  02BC  00DB               	movwf	??_InitializeIO
  4830  02BD                     u1927:	
  4831  02BD  0BDB               	decfsz	??_InitializeIO,f
  4832  02BE  2ABD               	goto	u1927
  4833  02BF  0BDC               	decfsz	??_InitializeIO+1,f
  4834  02C0  2ABD               	goto	u1927
  4835  02C1  0BDD               	decfsz	??_InitializeIO+2,f
  4836  02C2  2ABD               	goto	u1927
  4837                           
  4838                           ;main.c: 97: DAC1220_Init();
  4839  02C3  3186  26DE  3182   	fcall	_DAC1220_Init
  4840                           
  4841                           ;main.c: 98: HEFLASH_readBlock(heflashbuffer, 2, 32);
  4842  02C6  3002               	movlw	2
  4843  02C7  0020               	movlb	0	; select bank0
  4844  02C8  00DB               	movwf	??_InitializeIO
  4845  02C9  085B               	movf	??_InitializeIO,w
  4846  02CA  00F3               	movwf	?_HEFLASH_readBlock
  4847  02CB  3020               	movlw	32
  4848  02CC  00DC               	movwf	??_InitializeIO+1
  4849  02CD  085C               	movf	??_InitializeIO+1,w
  4850  02CE  00F4               	movwf	?_HEFLASH_readBlock+1
  4851  02CF  3025               	movlw	_heflashbuffer& (0+255)
  4852  02D0  3184  24D2  3182   	fcall	_HEFLASH_readBlock
  4853                           
  4854                           ;main.c: 99: DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]
      +                          );
  4855  02D3  0020               	movlb	0	; select bank0
  4856  02D4  0825               	movf	_heflashbuffer,w
  4857  02D5  00DB               	movwf	??_InitializeIO
  4858  02D6  085B               	movf	??_InitializeIO,w
  4859  02D7  00F5               	movwf	?_DAC1220_Write3Bytes
  4860  02D8  0826               	movf	_heflashbuffer+1,w
  4861  02D9  00DC               	movwf	??_InitializeIO+1
  4862  02DA  085C               	movf	??_InitializeIO+1,w
  4863  02DB  00F6               	movwf	?_DAC1220_Write3Bytes+1
  4864  02DC  0827               	movf	_heflashbuffer+2,w
  4865  02DD  00DD               	movwf	??_InitializeIO+2
  4866  02DE  085D               	movf	??_InitializeIO+2,w
  4867  02DF  00F7               	movwf	?_DAC1220_Write3Bytes+2
  4868  02E0  3008               	movlw	8
  4869  02E1  3185  25B4  3182   	fcall	_DAC1220_Write3Bytes
  4870                           
  4871                           ;main.c: 100: DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[
      +                          5]);
  4872  02E4  0020               	movlb	0	; select bank0
  4873  02E5  0828               	movf	_heflashbuffer+3,w
  4874  02E6  00DB               	movwf	??_InitializeIO
  4875  02E7  085B               	movf	??_InitializeIO,w
  4876  02E8  00F5               	movwf	?_DAC1220_Write3Bytes
  4877  02E9  0829               	movf	_heflashbuffer+4,w
  4878  02EA  00DC               	movwf	??_InitializeIO+1
  4879  02EB  085C               	movf	??_InitializeIO+1,w
  4880  02EC  00F6               	movwf	?_DAC1220_Write3Bytes+1
  4881  02ED  082A               	movf	_heflashbuffer+5,w
  4882  02EE  00DD               	movwf	??_InitializeIO+2
  4883  02EF  085D               	movf	??_InitializeIO+2,w
  4884  02F0  00F7               	movwf	?_DAC1220_Write3Bytes+2
  4885  02F1  300C               	movlw	12
  4886  02F2  3185  25B4  3182   	fcall	_DAC1220_Write3Bytes
  4887                           
  4888                           ;main.c: 102: EUSART_Initialize();
  4889  02F5  3186  2656  3182   	fcall	_EUSART_Initialize
  4890                           
  4891                           ;main.c: 103: const uint8_t *startReply = "Ready!\n";
  4892  02F8  3086               	movlw	(STR_1| (0+32768))& (0+255)
  4893  02F9  0020               	movlb	0	; select bank0
  4894  02FA  00DB               	movwf	??_InitializeIO
  4895  02FB  085B               	movf	??_InitializeIO,w
  4896  02FC  00FB               	movwf	InitializeIO@startReply
  4897                           
  4898                           ;main.c: 104: USART_Send(startReply,strlen(startReply));
  4899  02FD  087B               	movf	InitializeIO@startReply,w
  4900  02FE  3185  256D  3182   	fcall	_strlen
  4901  0301  0871               	movf	?_strlen,w
  4902  0302  0020               	movlb	0	; select bank0
  4903  0303  00DB               	movwf	??_InitializeIO
  4904  0304  085B               	movf	??_InitializeIO,w
  4905  0305  00F9               	movwf	?_USART_Send
  4906  0306  087B               	movf	InitializeIO@startReply,w
  4907  0307  3186  263D         	fcall	_USART_Send
  4908  0309  0008               	return
  4909  030A                     __end_of_InitializeIO:	
  4910                           
  4911                           	psect	text35
  4912  063D                     __ptext35:	
  4913 ;; *************** function _USART_Send *****************
  4914 ;; Defined at:
  4915 ;;		line 143 in file "eusart.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  dataToSend      1    wreg     PTR const unsigned char 
  4918 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  4919 ;;  dataLength      1    9[COMMON] unsigned char 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  dataToSend      1    0[BANK0 ] PTR const unsigned char 
  4922 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  4923 ;;  i               1    1[BANK0 ] unsigned char 
  4924 ;; Return value:  Size  Location     Type
  4925 ;;		None               void
  4926 ;; Registers used:
  4927 ;;		wreg, status,2, status,0, pclath, cstack
  4928 ;; Tracked objects:
  4929 ;;		On entry : 0/0
  4930 ;;		On exit  : 0/0
  4931 ;;		Unchanged: 0/0
  4932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4933 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;Total ram usage:        4 bytes
  4938 ;; Hardware stack levels used:    1
  4939 ;; Hardware stack levels required when called:    2
  4940 ;; This function calls:
  4941 ;;		_EUSART_Write
  4942 ;; This function is called by:
  4943 ;;		_InitializeIO
  4944 ;;		_command_unknown
  4945 ;;		_send_OK
  4946 ;;		_send_WAIT
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           
  4951                           ;psect for function _USART_Send
  4952  063D                     _USART_Send:	
  4953                           
  4954                           ;incstack = 0
  4955                           ; Regs used in _USART_Send: [wreg+status,2+status,0+pclath+cstack]
  4956                           ;USART_Send@dataToSend stored from wreg
  4957  063D  0020               	movlb	0	; select bank0
  4958  063E  00D9               	movwf	USART_Send@dataToSend
  4959                           
  4960                           ;eusart.c: 145: if(EUSART_is_tx_ready)
  4961  063F  01DA               	clrf	USART_Send@i
  4962                           
  4963                           ;eusart.c: 146: {
  4964                           ;eusart.c: 148: for(i=0;i<dataLength;i++)
  4965  0640  01DA               	clrf	USART_Send@i
  4966  0641                     l2480:	
  4967  0641  0879               	movf	USART_Send@dataLength,w
  4968  0642  025A               	subwf	USART_Send@i,w
  4969  0643  1803               	btfsc	3,0
  4970  0644  0008               	return
  4971                           
  4972                           ;eusart.c: 149: {
  4973                           ;eusart.c: 150: EUSART_Write(*dataToSend);
  4974  0645  0859               	movf	USART_Send@dataToSend,w
  4975  0646  3180               	movlp	high __stringtab
  4976  0647  000A               	callw
  4977  0648  3186               	pagesel	$	;select current page
  4978  0649  3187  27CF  3186   	fcall	_EUSART_Write
  4979                           
  4980                           ;eusart.c: 151: dataToSend++;
  4981  064C  3001               	movlw	1
  4982  064D  00FA               	movwf	??_USART_Send
  4983  064E  087A               	movf	??_USART_Send,w
  4984  064F  0020               	movlb	0	; select bank0
  4985  0650  07D9               	addwf	USART_Send@dataToSend,f
  4986  0651  3001               	movlw	1
  4987  0652  00FA               	movwf	??_USART_Send
  4988  0653  087A               	movf	??_USART_Send,w
  4989  0654  07DA               	addwf	USART_Send@i,f
  4990  0655  2E41               	goto	l2480
  4991  0656                     __end_of_USART_Send:	
  4992                           
  4993                           	psect	text36
  4994  07CF                     __ptext36:	
  4995 ;; *************** function _EUSART_Write *****************
  4996 ;; Defined at:
  4997 ;;		line 134 in file "eusart.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  txData          1    wreg     unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  txData          1    1[COMMON] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        1 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    1
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_USART_Send
  5022 ;;		_USART_Send_6bytes
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _EUSART_Write
  5028  07CF                     _EUSART_Write:	
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _EUSART_Write: [wreg]
  5032                           ;EUSART_Write@txData stored from wreg
  5033  07CF  00F1               	movwf	EUSART_Write@txData
  5034  07D0                     l381:	
  5035                           ;eusart.c: 136: {
  5036                           
  5037                           ;eusart.c: 135: while(0 == PIR1bits.TXIF)
  5038                           
  5039  07D0  0020               	movlb	0	; select bank0
  5040  07D1  1E11               	btfss	17,4	;volatile
  5041  07D2  2FD0               	goto	l381
  5042                           
  5043                           ;eusart.c: 137: }
  5044                           ;eusart.c: 139: TXREG = txData;
  5045  07D3  0871               	movf	EUSART_Write@txData,w
  5046  07D4  0023               	movlb	3	; select bank3
  5047  07D5  009A               	movwf	26	;volatile
  5048  07D6  0008               	return
  5049  07D7                     __end_of_EUSART_Write:	
  5050                           
  5051                           	psect	text37
  5052  056D                     __ptext37:	
  5053 ;; *************** function _strlen *****************
  5054 ;; Defined at:
  5055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  s               1    wreg     PTR const unsigned char 
  5058 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  s               1    7[COMMON] PTR const unsigned char 
  5061 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5062 ;;  cp              1    8[COMMON] PTR const unsigned char 
  5063 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  2    1[COMMON] unsigned int 
  5066 ;; Registers used:
  5067 ;;		wreg, status,2, status,0
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;Total ram usage:        8 bytes
  5078 ;; Hardware stack levels used:    2
  5079 ;; Hardware stack levels required when called:    1
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_InitializeIO
  5084 ;;		_command_unknown
  5085 ;;		_send_OK
  5086 ;;		_send_WAIT
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _strlen
  5092  056D                     _strlen:	
  5093                           
  5094                           ;incstack = 0
  5095                           ; Regs used in _strlen: [wreg+status,2+status,0]
  5096                           ;strlen@s stored from wreg
  5097  056D  00F7               	movwf	strlen@s
  5098  056E  0877               	movf	strlen@s,w
  5099  056F  00F3               	movwf	??_strlen
  5100  0570  0873               	movf	??_strlen,w
  5101  0571  00F8               	movwf	strlen@cp
  5102  0572                     l2466:	
  5103  0572  0878               	movf	strlen@cp,w
  5104  0573  3180               	movlp	high __stringtab
  5105  0574  000A               	callw
  5106  0575  3185               	pagesel	$	;select current page
  5107  0576  3800               	iorlw	0
  5108  0577  1903               	btfsc	3,2
  5109  0578  2D7E               	goto	l2468
  5110  0579  3001               	movlw	1
  5111  057A  00F3               	movwf	??_strlen
  5112  057B  0873               	movf	??_strlen,w
  5113  057C  07F8               	addwf	strlen@cp,f
  5114  057D  2D72               	goto	l2466
  5115  057E                     l2468:	
  5116  057E  0877               	movf	strlen@s,w
  5117  057F  00F3               	movwf	??_strlen
  5118  0580  3080               	movlw	(high __stringtab)| (0+128)
  5119  0581  00F4               	movwf	??_strlen+1
  5120  0582  09F3               	comf	??_strlen,f
  5121  0583  09F4               	comf	??_strlen+1,f
  5122  0584  0AF3               	incf	??_strlen,f
  5123  0585  1903               	skipnz
  5124  0586  0AF4               	incf	??_strlen+1,f
  5125  0587  0878               	movf	strlen@cp,w
  5126  0588  00F5               	movwf	??_strlen+2
  5127  0589  3080               	movlw	(high __stringtab)| (0+128)
  5128  058A  00F6               	movwf	??_strlen+3
  5129  058B  0873               	movf	??_strlen,w
  5130  058C  0775               	addwf	??_strlen+2,w
  5131  058D  00F1               	movwf	?_strlen
  5132  058E  0874               	movf	??_strlen+1,w
  5133  058F  3D76               	addwfc	??_strlen+3,w
  5134  0590  00F2               	movwf	?_strlen+1
  5135  0591  0008               	return
  5136  0592                     __end_of_strlen:	
  5137                           
  5138                           	psect	text38
  5139  0656                     __ptext38:	
  5140 ;; *************** function _EUSART_Initialize *****************
  5141 ;; Defined at:
  5142 ;;		line 67 in file "eusart.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;		None
  5145 ;; Auto vars:     Size  Location     Type
  5146 ;;		None
  5147 ;; Return value:  Size  Location     Type
  5148 ;;		None               void
  5149 ;; Registers used:
  5150 ;;		wreg, status,2, status,0, pclath, cstack
  5151 ;; Tracked objects:
  5152 ;;		On entry : 0/0
  5153 ;;		On exit  : 0/0
  5154 ;;		Unchanged: 0/0
  5155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;Total ram usage:        0 bytes
  5161 ;; Hardware stack levels used:    1
  5162 ;; Hardware stack levels required when called:    2
  5163 ;; This function calls:
  5164 ;;		_EUSART_SetFramingErrorHandler
  5165 ;;		_EUSART_SetOverrunErrorHandler
  5166 ;;		_EUSART_SetErrorHandler
  5167 ;; This function is called by:
  5168 ;;		_InitializeIO
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           
  5173                           ;psect for function _EUSART_Initialize
  5174  0656                     _EUSART_Initialize:	
  5175                           
  5176                           ;eusart.c: 71: BAUDCON = 0x08;
  5177                           
  5178                           ;incstack = 0
  5179                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5180  0656  3008               	movlw	8
  5181  0657  0023               	movlb	3	; select bank3
  5182  0658  009F               	movwf	31	;volatile
  5183                           
  5184                           ;eusart.c: 74: RCSTA = 0x90;
  5185  0659  3090               	movlw	144
  5186  065A  009D               	movwf	29	;volatile
  5187                           
  5188                           ;eusart.c: 77: TXSTA = 0x24;
  5189  065B  3024               	movlw	36
  5190  065C  009E               	movwf	30	;volatile
  5191                           
  5192                           ;eusart.c: 80: SPBRGL = 0x70;
  5193  065D  3070               	movlw	112
  5194  065E  009B               	movwf	27	;volatile
  5195                           
  5196                           ;eusart.c: 83: SPBRGH = 0x02;
  5197  065F  3002               	movlw	2
  5198  0660  009C               	movwf	28	;volatile
  5199                           
  5200                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5201  0661  30FE               	movlw	(0-fpbase)& (0+255)
  5202  0662  3187  27E5  3186   	fcall	_EUSART_SetFramingErrorHandler
  5203                           
  5204                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5205  0665  30FE               	movlw	(0-fpbase)& (0+255)
  5206  0666  3187  27DE  3186   	fcall	_EUSART_SetOverrunErrorHandler
  5207                           
  5208                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5209  0669  30FE               	movlw	(0-fpbase)& (0+255)
  5210  066A  3187  27D7         	fcall	_EUSART_SetErrorHandler
  5211                           
  5212                           ;eusart.c: 90: eusartRxLastError.status = 0;
  5213  066C  0020               	movlb	0	; select bank0
  5214  066D  01A3               	clrf	_eusartRxLastError	;volatile
  5215  066E  0008               	return
  5216  066F                     __end_of_EUSART_Initialize:	
  5217                           
  5218                           	psect	text39
  5219  07D7                     __ptext39:	
  5220 ;; *************** function _EUSART_SetErrorHandler *****************
  5221 ;; Defined at:
  5222 ;;		line 189 in file "eusart.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  interruptHan    1    wreg     PTR FTN()void 
  5225 ;;		 -> EUSART_DefaultErrorHandler(0), 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5228 ;;		 -> EUSART_DefaultErrorHandler(0), 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;		None               void
  5231 ;; Registers used:
  5232 ;;		wreg
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;Total ram usage:        2 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    1
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_EUSART_Initialize
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           
  5253                           ;psect for function _EUSART_SetErrorHandler
  5254  07D7                     _EUSART_SetErrorHandler:	
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5258                           ;EUSART_SetErrorHandler@interruptHandler stored from wreg
  5259  07D7  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  5260                           
  5261                           ;eusart.c: 190: EUSART_ErrorHandler = interruptHandler;
  5262  07D8  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5263  07D9  00F1               	movwf	??_EUSART_SetErrorHandler
  5264  07DA  0871               	movf	??_EUSART_SetErrorHandler,w
  5265  07DB  0020               	movlb	0	; select bank0
  5266  07DC  00A0               	movwf	_EUSART_ErrorHandler
  5267  07DD  0008               	return
  5268  07DE                     __end_of_EUSART_SetErrorHandler:	
  5269                           
  5270                           	psect	text40
  5271  07DE                     __ptext40:	
  5272 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5273 ;; Defined at:
  5274 ;;		line 185 in file "eusart.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  interruptHan    1    wreg     PTR FTN()void 
  5277 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5280 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;		None               void
  5283 ;; Registers used:
  5284 ;;		wreg
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;Total ram usage:        2 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    1
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_EUSART_Initialize
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           
  5305                           ;psect for function _EUSART_SetOverrunErrorHandler
  5306  07DE                     _EUSART_SetOverrunErrorHandler:	
  5307                           
  5308                           ;incstack = 0
  5309                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5310                           ;EUSART_SetOverrunErrorHandler@interruptHandler stored from wreg
  5311  07DE  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5312                           
  5313                           ;eusart.c: 186: EUSART_OverrunErrorHandler = interruptHandler;
  5314  07DF  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5315  07E0  00F1               	movwf	??_EUSART_SetOverrunErrorHandler
  5316  07E1  0871               	movf	??_EUSART_SetOverrunErrorHandler,w
  5317  07E2  0020               	movlb	0	; select bank0
  5318  07E3  00A2               	movwf	_EUSART_OverrunErrorHandler
  5319  07E4  0008               	return
  5320  07E5                     __end_of_EUSART_SetOverrunErrorHandler:	
  5321                           
  5322                           	psect	text41
  5323  07E5                     __ptext41:	
  5324 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5325 ;; Defined at:
  5326 ;;		line 181 in file "eusart.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  interruptHan    1    wreg     PTR FTN()void 
  5329 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5332 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;		None               void
  5335 ;; Registers used:
  5336 ;;		wreg
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;Total ram usage:        2 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    1
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_EUSART_Initialize
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _EUSART_SetFramingErrorHandler
  5358  07E5                     _EUSART_SetFramingErrorHandler:	
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5362                           ;EUSART_SetFramingErrorHandler@interruptHandler stored from wreg
  5363  07E5  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5364                           
  5365                           ;eusart.c: 182: EUSART_FramingErrorHandler = interruptHandler;
  5366  07E6  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5367  07E7  00F1               	movwf	??_EUSART_SetFramingErrorHandler
  5368  07E8  0871               	movf	??_EUSART_SetFramingErrorHandler,w
  5369  07E9  0020               	movlb	0	; select bank0
  5370  07EA  00A1               	movwf	_EUSART_FramingErrorHandler
  5371  07EB  0008               	return
  5372  07EC                     __end_of_EUSART_SetFramingErrorHandler:	
  5373                           
  5374                           	psect	text42
  5375  06DE                     __ptext42:	
  5376 ;; *************** function _DAC1220_Init *****************
  5377 ;; Defined at:
  5378 ;;		line 121 in file "spi/spi_software.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		wreg, status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        2 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    5
  5399 ;; This function calls:
  5400 ;;		_DAC1220_Write2Bytes
  5401 ;;		_DAC1220_Write3Bytes
  5402 ;; This function is called by:
  5403 ;;		_InitializeIO
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           
  5408                           ;psect for function _DAC1220_Init
  5409  06DE                     _DAC1220_Init:	
  5410                           
  5411                           ;spi_software.c: 122: DAC1220_Write2Bytes(4, 32, 160);
  5412                           
  5413                           ;incstack = 0
  5414                           ; Regs used in _DAC1220_Init: [wreg+status,2+status,0+pclath+cstack]
  5415  06DE  3020               	movlw	32
  5416  06DF  00F9               	movwf	??_DAC1220_Init
  5417  06E0  0879               	movf	??_DAC1220_Init,w
  5418  06E1  00F5               	movwf	?_DAC1220_Write2Bytes
  5419  06E2  30A0               	movlw	160
  5420  06E3  00FA               	movwf	??_DAC1220_Init+1
  5421  06E4  087A               	movf	??_DAC1220_Init+1,w
  5422  06E5  00F6               	movwf	?_DAC1220_Write2Bytes+1
  5423  06E6  3004               	movlw	4
  5424  06E7  3185  25D4  3186   	fcall	_DAC1220_Write2Bytes
  5425                           
  5426                           ;spi_software.c: 123: DAC1220_Write3Bytes(0, 128, 0, 0);
  5427  06EA  3080               	movlw	128
  5428  06EB  00F9               	movwf	??_DAC1220_Init
  5429  06EC  0879               	movf	??_DAC1220_Init,w
  5430  06ED  00F5               	movwf	?_DAC1220_Write3Bytes
  5431  06EE  01F6               	clrf	?_DAC1220_Write3Bytes+1
  5432  06EF  01F7               	clrf	?_DAC1220_Write3Bytes+2
  5433  06F0  3000               	movlw	0
  5434  06F1  3185  25B4         	fcall	_DAC1220_Write3Bytes
  5435  06F3  0008               	return
  5436  06F4                     __end_of_DAC1220_Init:	
  5437                           
  5438                           	psect	text43
  5439  05B4                     __ptext43:	
  5440 ;; *************** function _DAC1220_Write3Bytes *****************
  5441 ;; Defined at:
  5442 ;;		line 78 in file "spi/spi_software.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;  address         1    wreg     const unsigned char 
  5445 ;;  byte1           1    5[COMMON] const unsigned char 
  5446 ;;  byte2           1    6[COMMON] const unsigned char 
  5447 ;;  byte3           1    7[COMMON] const unsigned char 
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;  address         1    8[COMMON] const unsigned char 
  5450 ;; Return value:  Size  Location     Type
  5451 ;;		None               void
  5452 ;; Registers used:
  5453 ;;		wreg, status,2, status,0, pclath, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5459 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;Total ram usage:        4 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    4
  5466 ;; This function calls:
  5467 ;;		_SPIDelay
  5468 ;;		_WriteByteSPI
  5469 ;; This function is called by:
  5470 ;;		_DAC1220_Init
  5471 ;;		_InitializeIO
  5472 ;;		_command_set_dac
  5473 ;;		_command_set_dac_cal
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           
  5478                           ;psect for function _DAC1220_Write3Bytes
  5479  05B4                     _DAC1220_Write3Bytes:	
  5480                           
  5481                           ;incstack = 0
  5482                           ; Regs used in _DAC1220_Write3Bytes: [wreg+status,2+status,0+pclath+cstack]
  5483                           ;DAC1220_Write3Bytes@address stored from wreg
  5484  05B4  00F8               	movwf	DAC1220_Write3Bytes@address
  5485                           
  5486                           ;spi_software.c: 79: LATBbits.LATB6 = 0;
  5487  05B5  0022               	movlb	2	; select bank2
  5488  05B6  130D               	bcf	13,6	;volatile
  5489                           
  5490                           ;spi_software.c: 80: SPIDelay();
  5491  05B7  3187  27F2  3185   	fcall	_SPIDelay
  5492                           
  5493                           ;spi_software.c: 81: TRISBbits.TRISB4 = 0;
  5494  05BA  0021               	movlb	1	; select bank1
  5495  05BB  120D               	bcf	13,4	;volatile
  5496                           
  5497                           ;spi_software.c: 82: WriteByteSPI(64+address);
  5498  05BC  0878               	movf	DAC1220_Write3Bytes@address,w
  5499  05BD  3E40               	addlw	64
  5500  05BE  3186  260A  3185   	fcall	_WriteByteSPI
  5501                           
  5502                           ;spi_software.c: 83: WriteByteSPI(byte1);
  5503  05C1  0875               	movf	DAC1220_Write3Bytes@byte1,w
  5504  05C2  3186  260A  3185   	fcall	_WriteByteSPI
  5505                           
  5506                           ;spi_software.c: 84: WriteByteSPI(byte2);
  5507  05C5  0876               	movf	DAC1220_Write3Bytes@byte2,w
  5508  05C6  3186  260A  3185   	fcall	_WriteByteSPI
  5509                           
  5510                           ;spi_software.c: 85: WriteByteSPI(byte3);
  5511  05C9  0877               	movf	DAC1220_Write3Bytes@byte3,w
  5512  05CA  3186  260A  3185   	fcall	_WriteByteSPI
  5513                           
  5514                           ;spi_software.c: 86: TRISBbits.TRISB4 = 1;
  5515  05CD  0021               	movlb	1	; select bank1
  5516  05CE  160D               	bsf	13,4	;volatile
  5517                           
  5518                           ;spi_software.c: 87: LATBbits.LATB6 = 1;
  5519  05CF  0022               	movlb	2	; select bank2
  5520  05D0  170D               	bsf	13,6	;volatile
  5521                           
  5522                           ;spi_software.c: 88: SPIDelay();
  5523  05D1  3187  27F2         	fcall	_SPIDelay
  5524  05D3  0008               	return
  5525  05D4                     __end_of_DAC1220_Write3Bytes:	
  5526                           
  5527                           	psect	text44
  5528  05D4                     __ptext44:	
  5529 ;; *************** function _DAC1220_Write2Bytes *****************
  5530 ;; Defined at:
  5531 ;;		line 65 in file "spi/spi_software.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  address         1    wreg     const unsigned char 
  5534 ;;  byte1           1    5[COMMON] const unsigned char 
  5535 ;;  byte2           1    6[COMMON] const unsigned char 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  address         1    7[COMMON] const unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;		None               void
  5540 ;; Registers used:
  5541 ;;		wreg, status,2, status,0, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5547 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;Total ram usage:        3 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    4
  5554 ;; This function calls:
  5555 ;;		_SPIDelay
  5556 ;;		_WriteByteSPI
  5557 ;; This function is called by:
  5558 ;;		_DAC1220_Init
  5559 ;;		_DAC1220_SelfCal
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _DAC1220_Write2Bytes
  5565  05D4                     _DAC1220_Write2Bytes:	
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _DAC1220_Write2Bytes: [wreg+status,2+status,0+pclath+cstack]
  5569                           ;DAC1220_Write2Bytes@address stored from wreg
  5570  05D4  00F7               	movwf	DAC1220_Write2Bytes@address
  5571                           
  5572                           ;spi_software.c: 66: LATBbits.LATB6 = 0;
  5573  05D5  0022               	movlb	2	; select bank2
  5574  05D6  130D               	bcf	13,6	;volatile
  5575                           
  5576                           ;spi_software.c: 67: SPIDelay();
  5577  05D7  3187  27F2  3185   	fcall	_SPIDelay
  5578                           
  5579                           ;spi_software.c: 68: TRISBbits.TRISB4 = 0;
  5580  05DA  0021               	movlb	1	; select bank1
  5581  05DB  120D               	bcf	13,4	;volatile
  5582                           
  5583                           ;spi_software.c: 69: WriteByteSPI(32+address);
  5584  05DC  0877               	movf	DAC1220_Write2Bytes@address,w
  5585  05DD  3E20               	addlw	32
  5586  05DE  3186  260A  3185   	fcall	_WriteByteSPI
  5587                           
  5588                           ;spi_software.c: 70: WriteByteSPI(byte1);
  5589  05E1  0875               	movf	DAC1220_Write2Bytes@byte1,w
  5590  05E2  3186  260A  3185   	fcall	_WriteByteSPI
  5591                           
  5592                           ;spi_software.c: 71: WriteByteSPI(byte2);
  5593  05E5  0876               	movf	DAC1220_Write2Bytes@byte2,w
  5594  05E6  3186  260A  3185   	fcall	_WriteByteSPI
  5595                           
  5596                           ;spi_software.c: 72: TRISBbits.TRISB4 = 1;
  5597  05E9  0021               	movlb	1	; select bank1
  5598  05EA  160D               	bsf	13,4	;volatile
  5599                           
  5600                           ;spi_software.c: 73: LATBbits.LATB6 = 1;
  5601  05EB  0022               	movlb	2	; select bank2
  5602  05EC  170D               	bsf	13,6	;volatile
  5603                           
  5604                           ;spi_software.c: 74: SPIDelay();
  5605  05ED  3187  27F2         	fcall	_SPIDelay
  5606  05EF  0008               	return
  5607  05F0                     __end_of_DAC1220_Write2Bytes:	
  5608                           
  5609                           	psect	text45
  5610  060A                     __ptext45:	
  5611 ;; *************** function _WriteByteSPI *****************
  5612 ;; Defined at:
  5613 ;;		line 166 in file "spi/spi_software.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  data_byte       1    wreg     unsigned char 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  data_byte       1    3[COMMON] unsigned char 
  5618 ;;  bit_counter     1    4[COMMON] unsigned char 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;		None               void
  5621 ;; Registers used:
  5622 ;;		wreg, status,2, status,0, pclath, cstack
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;Total ram usage:        3 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    3
  5635 ;; This function calls:
  5636 ;;		_ClockPulse
  5637 ;; This function is called by:
  5638 ;;		_DAC1220_Write2Bytes
  5639 ;;		_DAC1220_Write3Bytes
  5640 ;;		_DAC1220_Read3Bytes
  5641 ;;		_DAC1220_Read2Bytes
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _WriteByteSPI
  5647  060A                     _WriteByteSPI:	
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _WriteByteSPI: [wreg+status,2+status,0+pclath+cstack]
  5651                           ;WriteByteSPI@data_byte stored from wreg
  5652  060A  00F3               	movwf	WriteByteSPI@data_byte
  5653                           
  5654                           ;spi_software.c: 167: uint8_t bit_counter = 8;
  5655  060B  3008               	movlw	8
  5656  060C  00F2               	movwf	??_WriteByteSPI
  5657  060D  0872               	movf	??_WriteByteSPI,w
  5658  060E  00F4               	movwf	WriteByteSPI@bit_counter
  5659  060F                     l2320:	
  5660                           ;spi_software.c: 168: do
  5661                           
  5662                           
  5663                           ;spi_software.c: 169: {
  5664                           ;spi_software.c: 170: LATBbits.LATB4 = (data_byte&0x80)?1:0;
  5665  060F  3000               	movlw	0
  5666  0610  1BF3               	btfsc	WriteByteSPI@data_byte,7
  5667  0611  3001               	movlw	1
  5668  0612  00F2               	movwf	??_WriteByteSPI
  5669  0613  0EF2               	swapf	??_WriteByteSPI,f
  5670  0614  0022               	movlb	2	; select bank2
  5671  0615  080D               	movf	13,w	;volatile
  5672  0616  0672               	xorwf	??_WriteByteSPI,w
  5673  0617  39EF               	andlw	-17
  5674  0618  0672               	xorwf	??_WriteByteSPI,w
  5675  0619  008D               	movwf	13	;volatile
  5676                           
  5677                           ;spi_software.c: 171: ClockPulse();
  5678  061A  3187  27BC  3186   	fcall	_ClockPulse
  5679                           
  5680                           ;spi_software.c: 172: data_byte <<= 1;
  5681  061D  1003               	clrc
  5682  061E  0DF3               	rlf	WriteByteSPI@data_byte,f
  5683                           
  5684                           ;spi_software.c: 173: } while (--bit_counter);
  5685  061F  3001               	movlw	1
  5686  0620  02F4               	subwf	WriteByteSPI@bit_counter,f
  5687  0621  1903               	btfsc	3,2
  5688  0622  0008               	return
  5689  0623  2E0F               	goto	l2320
  5690  0624                     __end_of_WriteByteSPI:	
  5691                           
  5692                           	psect	text46
  5693  07BC                     __ptext46:	
  5694 ;; *************** function _ClockPulse *****************
  5695 ;; Defined at:
  5696 ;;		line 177 in file "spi/spi_software.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0, pclath, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        0 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    2
  5717 ;; This function calls:
  5718 ;;		_SPIDelay
  5719 ;; This function is called by:
  5720 ;;		_Read2BytesSPI
  5721 ;;		_ReadByteSPI
  5722 ;;		_WriteByteSPI
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           
  5727                           ;psect for function _ClockPulse
  5728  07BC                     _ClockPulse:	
  5729                           
  5730                           ;spi_software.c: 179: LATCbits.LATC2 = 1;
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in _ClockPulse: [wreg+status,2+status,0+pclath+cstack]
  5734  07BC  0022               	movlb	2	; select bank2
  5735  07BD  150E               	bsf	14,2	;volatile
  5736                           
  5737                           ;spi_software.c: 180: SPIDelay();
  5738  07BE  3187  27F2  3187   	fcall	_SPIDelay
  5739                           
  5740                           ;spi_software.c: 181: LATCbits.LATC2 = 0;
  5741  07C1  0022               	movlb	2	; select bank2
  5742  07C2  110E               	bcf	14,2	;volatile
  5743                           
  5744                           ;spi_software.c: 182: SPIDelay();
  5745  07C3  3187  27F2         	fcall	_SPIDelay
  5746  07C5  0008               	return
  5747  07C6                     __end_of_ClockPulse:	
  5748                           
  5749                           	psect	text47
  5750  049A                     __ptext47:	
  5751 ;; *************** function _DAC1220_Reset *****************
  5752 ;; Defined at:
  5753 ;;		line 45 in file "spi/spi_software.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;		None
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;		None               void
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0, pclath, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        2 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    2
  5774 ;; This function calls:
  5775 ;;		_SPIDelay
  5776 ;; This function is called by:
  5777 ;;		_InitializeIO
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           
  5782                           ;psect for function _DAC1220_Reset
  5783  049A                     _DAC1220_Reset:	
  5784                           
  5785                           ;spi_software.c: 46: LATBbits.LATB6 = 0;
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _DAC1220_Reset: [wreg+status,2+status,0+pclath+cstack]
  5789  049A  0022               	movlb	2	; select bank2
  5790  049B  130D               	bcf	13,6	;volatile
  5791                           
  5792                           ;spi_software.c: 47: SPIDelay();
  5793  049C  3187  27F2  3184   	fcall	_SPIDelay
  5794                           
  5795                           ;spi_software.c: 48: LATCbits.LATC2 = 1;
  5796  049F  0022               	movlb	2	; select bank2
  5797  04A0  150E               	bsf	14,2	;volatile
  5798                           
  5799                           ;spi_software.c: 49: _delay((unsigned long)((264)*(48000000/4000000.0)));
  5800  04A1  3005               	movlw	5
  5801  04A2  00F3               	movwf	??_DAC1220_Reset+1
  5802  04A3  301B               	movlw	27
  5803  04A4  00F2               	movwf	??_DAC1220_Reset
  5804  04A5                     u1937:	
  5805  04A5  0BF2               	decfsz	??_DAC1220_Reset,f
  5806  04A6  2CA5               	goto	u1937
  5807  04A7  0BF3               	decfsz	??_DAC1220_Reset+1,f
  5808  04A8  2CA5               	goto	u1937
  5809  04A9  2CAA               	nop2
  5810                           
  5811                           ;spi_software.c: 50: LATCbits.LATC2 = 0;
  5812  04AA  0022               	movlb	2	; select bank2
  5813  04AB  110E               	bcf	14,2	;volatile
  5814                           
  5815                           ;spi_software.c: 51: SPIDelay();
  5816  04AC  3187  27F2  3184   	fcall	_SPIDelay
  5817                           
  5818                           ;spi_software.c: 52: LATCbits.LATC2 = 1;
  5819  04AF  0022               	movlb	2	; select bank2
  5820  04B0  150E               	bsf	14,2	;volatile
  5821                           
  5822                           ;spi_software.c: 53: _delay((unsigned long)((570)*(48000000/4000000.0)));
  5823  04B1  3009               	movlw	9
  5824  04B2  00F3               	movwf	??_DAC1220_Reset+1
  5825  04B3  30E1               	movlw	225
  5826  04B4  00F2               	movwf	??_DAC1220_Reset
  5827  04B5                     u1947:	
  5828  04B5  0BF2               	decfsz	??_DAC1220_Reset,f
  5829  04B6  2CB5               	goto	u1947
  5830  04B7  0BF3               	decfsz	??_DAC1220_Reset+1,f
  5831  04B8  2CB5               	goto	u1947
  5832                           
  5833                           ;spi_software.c: 54: LATCbits.LATC2 = 0;
  5834  04B9  0022               	movlb	2	; select bank2
  5835  04BA  110E               	bcf	14,2	;volatile
  5836                           
  5837                           ;spi_software.c: 55: SPIDelay();
  5838  04BB  3187  27F2  3184   	fcall	_SPIDelay
  5839                           
  5840                           ;spi_software.c: 56: LATCbits.LATC2 = 1;
  5841  04BE  0022               	movlb	2	; select bank2
  5842  04BF  150E               	bsf	14,2	;volatile
  5843                           
  5844                           ;spi_software.c: 57: _delay((unsigned long)((903)*(48000000/4000000.0)));
  5845  04C0  300F               	movlw	15
  5846  04C1  00F3               	movwf	??_DAC1220_Reset+1
  5847  04C2  3011               	movlw	17
  5848  04C3  00F2               	movwf	??_DAC1220_Reset
  5849  04C4                     u1957:	
  5850  04C4  0BF2               	decfsz	??_DAC1220_Reset,f
  5851  04C5  2CC4               	goto	u1957
  5852  04C6  0BF3               	decfsz	??_DAC1220_Reset+1,f
  5853  04C7  2CC4               	goto	u1957
  5854                           
  5855                           ;spi_software.c: 58: LATCbits.LATC2 = 0;
  5856  04C8  0022               	movlb	2	; select bank2
  5857  04C9  110E               	bcf	14,2	;volatile
  5858                           
  5859                           ;spi_software.c: 59: SPIDelay();
  5860  04CA  3187  27F2  3184   	fcall	_SPIDelay
  5861                           
  5862                           ;spi_software.c: 60: LATBbits.LATB6 = 1;
  5863  04CD  0022               	movlb	2	; select bank2
  5864  04CE  170D               	bsf	13,6	;volatile
  5865                           
  5866                           ;spi_software.c: 61: SPIDelay();
  5867  04CF  3187  27F2         	fcall	_SPIDelay
  5868  04D1  0008               	return
  5869  04D2                     __end_of_DAC1220_Reset:	
  5870                           
  5871                           	psect	text48
  5872  07F2                     __ptext48:	
  5873 ;; *************** function _SPIDelay *****************
  5874 ;; Defined at:
  5875 ;;		line 186 in file "spi/spi_software.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        1 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    1
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_MCP3550_Read
  5900 ;;		_DAC1220_Reset
  5901 ;;		_DAC1220_Write2Bytes
  5902 ;;		_DAC1220_Write3Bytes
  5903 ;;		_DAC1220_Read3Bytes
  5904 ;;		_ClockPulse
  5905 ;;		_DAC1220_Read2Bytes
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           
  5910                           ;psect for function _SPIDelay
  5911  07F2                     _SPIDelay:	
  5912                           
  5913                           ;spi_software.c: 187: _delay(200);
  5914                           
  5915                           ;incstack = 0
  5916                           ; Regs used in _SPIDelay: [wreg]
  5917  07F2  3042               	movlw	66
  5918  07F3  00F1               	movwf	??_SPIDelay
  5919  07F4                     u1967:	
  5920  07F4  0BF1               	decfsz	??_SPIDelay,f
  5921  07F5  2FF4               	goto	u1967
  5922  07F6  0000               	nop
  5923  07F7  0008               	return
  5924  07F8                     __end_of_SPIDelay:	
  5925                           
  5926                           	psect	text49
  5927  0798                     __ptext49:	
  5928 ;; *************** function _InitializeSPI *****************
  5929 ;; Defined at:
  5930 ;;		line 6 in file "spi/spi_software.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;		None
  5933 ;; Auto vars:     Size  Location     Type
  5934 ;;		None
  5935 ;; Return value:  Size  Location     Type
  5936 ;;		None               void
  5937 ;; Registers used:
  5938 ;;		None
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;Total ram usage:        0 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    1
  5951 ;; This function calls:
  5952 ;;		Nothing
  5953 ;; This function is called by:
  5954 ;;		_InitializeIO
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           
  5959                           ;psect for function _InitializeSPI
  5960  0798                     _InitializeSPI:	
  5961                           
  5962                           ;spi_software.c: 8: LATBbits.LATB6 = 1;
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in _InitializeSPI: []
  5966  0798  0022               	movlb	2	; select bank2
  5967  0799  170D               	bsf	13,6	;volatile
  5968                           
  5969                           ;spi_software.c: 9: LATCbits.LATC3 = 1;
  5970  079A  158E               	bsf	14,3	;volatile
  5971                           
  5972                           ;spi_software.c: 11: TRISBbits.TRISB6 = 0;
  5973  079B  0021               	movlb	1	; select bank1
  5974  079C  130D               	bcf	13,6	;volatile
  5975                           
  5976                           ;spi_software.c: 12: TRISCbits.TRISC3 = 0;
  5977  079D  118E               	bcf	14,3	;volatile
  5978                           
  5979                           ;spi_software.c: 14: TRISCbits.TRISC2 = 0;
  5980  079E  110E               	bcf	14,2	;volatile
  5981                           
  5982                           ;spi_software.c: 15: LATCbits.LATC2 = 0;
  5983  079F  0022               	movlb	2	; select bank2
  5984  07A0  110E               	bcf	14,2	;volatile
  5985                           
  5986                           ;spi_software.c: 17: TRISBbits.TRISB4 = 1;
  5987  07A1  0021               	movlb	1	; select bank1
  5988  07A2  160D               	bsf	13,4	;volatile
  5989                           
  5990                           ;spi_software.c: 18: TRISCbits.TRISC7 = 1;
  5991  07A3  178E               	bsf	14,7	;volatile
  5992  07A4  0008               	return
  5993  07A5                     __end_of_InitializeSPI:	
  5994                           
  5995                           	psect	text50
  5996  04D2                     __ptext50:	
  5997 ;; *************** function _HEFLASH_readBlock *****************
  5998 ;; Defined at:
  5999 ;;		line 50 in file "heflash/HEFlash.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  buffer          1    wreg     PTR unsigned char 
  6002 ;;		 -> heflashbuffer(32), 
  6003 ;;  radd            1    3[COMMON] unsigned char 
  6004 ;;  count           1    4[COMMON] unsigned char 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  buffer          1    7[COMMON] PTR unsigned char 
  6007 ;;		 -> heflashbuffer(32), 
  6008 ;;  add             2    8[COMMON] unsigned int 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        7 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    2
  6025 ;; This function calls:
  6026 ;;		_FLASH_read
  6027 ;; This function is called by:
  6028 ;;		_InitializeIO
  6029 ;;		_command_read_offset
  6030 ;;		_command_read_shuntcalibration
  6031 ;;		_command_read_dac_cal
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _HEFLASH_readBlock
  6037  04D2                     _HEFLASH_readBlock:	
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _HEFLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6041                           ;HEFLASH_readBlock@buffer stored from wreg
  6042  04D2  00F7               	movwf	HEFLASH_readBlock@buffer
  6043                           
  6044                           ;HEFlash.c: 52: unsigned add = radd * 32 + 0x1F80;
  6045  04D3  0873               	movf	HEFLASH_readBlock@radd,w
  6046  04D4  00F5               	movwf	??_HEFLASH_readBlock
  6047  04D5  01F6               	clrf	??_HEFLASH_readBlock+1
  6048  04D6  3005               	movlw	5
  6049  04D7                     u1345:	
  6050  04D7  35F5               	lslf	??_HEFLASH_readBlock,f
  6051  04D8  0DF6               	rlf	??_HEFLASH_readBlock+1,f
  6052  04D9  0B89               	decfsz	9,f
  6053  04DA  2CD7               	goto	u1345
  6054  04DB  0875               	movf	??_HEFLASH_readBlock,w
  6055  04DC  3E80               	addlw	128
  6056  04DD  00F8               	movwf	HEFLASH_readBlock@add
  6057  04DE  301F               	movlw	31
  6058  04DF  3D76               	addwfc	??_HEFLASH_readBlock+1,w
  6059  04E0  00F9               	movwf	HEFLASH_readBlock@add+1
  6060                           
  6061                           ;HEFlash.c: 55: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  6062  04E1  3021               	movlw	33
  6063  04E2  0274               	subwf	HEFLASH_readBlock@count,w
  6064  04E3  1803               	skipnc
  6065  04E4  0008               	return
  6066  04E5  3004               	movlw	4
  6067  04E6  0273               	subwf	HEFLASH_readBlock@radd,w
  6068  04E7  1803               	btfsc	3,0
  6069  04E8  0008               	return
  6070  04E9                     l2218:	
  6071  04E9  08F4               	movf	HEFLASH_readBlock@count,f
  6072  04EA  1903               	btfsc	3,2
  6073  04EB  0008               	return
  6074                           
  6075                           ;HEFlash.c: 60: {
  6076                           ;HEFlash.c: 61: *buffer++ = (char) FLASH_read( add++);
  6077                           
  6078                           ;HEFlash.c: 59: while ( count > 0)
  6079                           
  6080                           ;HEFlash.c: 56: return -1;
  6081                           ;	Return value of _HEFLASH_readBlock is never used
  6082  04EC  0879               	movf	HEFLASH_readBlock@add+1,w
  6083  04ED  01F2               	clrf	?_FLASH_read+1
  6084  04EE  07F2               	addwf	?_FLASH_read+1,f
  6085  04EF  0878               	movf	HEFLASH_readBlock@add,w
  6086  04F0  01F1               	clrf	?_FLASH_read
  6087  04F1  07F1               	addwf	?_FLASH_read,f
  6088  04F2  3186  26F4  3184   	fcall	_FLASH_read
  6089  04F5  0871               	movf	?_FLASH_read,w
  6090  04F6  00F5               	movwf	??_HEFLASH_readBlock
  6091  04F7  0877               	movf	HEFLASH_readBlock@buffer,w
  6092  04F8  0086               	movwf	6
  6093  04F9  0187               	clrf	7
  6094  04FA  0875               	movf	??_HEFLASH_readBlock,w
  6095  04FB  0081               	movwf	1
  6096  04FC  3001               	movlw	1
  6097  04FD  07F8               	addwf	HEFLASH_readBlock@add,f
  6098  04FE  3000               	movlw	0
  6099  04FF  3DF9               	addwfc	HEFLASH_readBlock@add+1,f
  6100  0500  3001               	movlw	1
  6101  0501  00F5               	movwf	??_HEFLASH_readBlock
  6102  0502  0875               	movf	??_HEFLASH_readBlock,w
  6103  0503  07F7               	addwf	HEFLASH_readBlock@buffer,f
  6104                           
  6105                           ;HEFlash.c: 62: count--;
  6106  0504  3001               	movlw	1
  6107  0505  02F4               	subwf	HEFLASH_readBlock@count,f
  6108  0506  2CE9               	goto	l2218
  6109  0507                     __end_of_HEFLASH_readBlock:	
  6110                           ;HEFlash.c: 63: }
  6111                           ;HEFlash.c: 66: return 0;
  6112                           ;	Return value of _HEFLASH_readBlock is never used
  6113                           
  6114                           
  6115                           	psect	text51
  6116  06F4                     __ptext51:	
  6117 ;; *************** function _FLASH_read *****************
  6118 ;; Defined at:
  6119 ;;		line 32 in file "heflash/Flash.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  address         2    1[COMMON] unsigned int 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  2    1[COMMON] unsigned int 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        2 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    1
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_HEFLASH_readBlock
  6144 ;;		_FLASH_readBlock
  6145 ;;		_HEFLASH_readByte
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _FLASH_read
  6151  06F4                     _FLASH_read:	
  6152                           
  6153                           ;Flash.c: 34: PMADR = address;
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _FLASH_read: [wreg+status,2+status,0]
  6157  06F4  0872               	movf	FLASH_read@address+1,w
  6158  06F5  0023               	movlb	3	; select bank3
  6159  06F6  0192               	clrf	18	;volatile
  6160  06F7  0792               	addwf	18,f	;volatile
  6161  06F8  0871               	movf	FLASH_read@address,w
  6162  06F9  0191               	clrf	17	;volatile
  6163  06FA  0791               	addwf	17,f	;volatile
  6164                           
  6165                           ;Flash.c: 35: PMCON1bits.CFGS = 0;
  6166  06FB  1315               	bcf	21,6	;volatile
  6167                           
  6168                           ;Flash.c: 36: PMCON1bits.RD = 1;
  6169  06FC  1415               	bsf	21,0	;volatile
  6170                           
  6171                           ;Flash.c: 37: _nop();
  6172  06FD  0000               	nop
  6173                           
  6174                           ;Flash.c: 38: _nop();
  6175  06FE  0000               	nop
  6176                           
  6177                           ;Flash.c: 41: return PMDAT;
  6178  06FF  0023               	movlb	3	; select bank3
  6179  0700  0814               	movf	20,w	;volatile
  6180  0701  01F2               	clrf	?_FLASH_read+1
  6181  0702  07F2               	addwf	?_FLASH_read+1,f
  6182  0703  0813               	movf	19,w	;volatile
  6183  0704  01F1               	clrf	?_FLASH_read
  6184  0705  07F1               	addwf	?_FLASH_read,f
  6185  0706  0008               	return
  6186  0707                     __end_of_FLASH_read:	
  6187                           
  6188                           	psect	intentry
  6189  0004                     __pintentry:	
  6190 ;; *************** function _isr *****************
  6191 ;; Defined at:
  6192 ;;		line 340 in file "main.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;		None               void
  6199 ;; Registers used:
  6200 ;;		None
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;Total ram usage:        1 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		Interrupt level 1
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219  0004                     _isr:	
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _isr: []
  6223  0004  3180               	pagesel	$
  6224  0005  0020               	movlb	0	; select bank0
  6225  0006  087F               	movf	127,w
  6226  0007  00F0               	movwf	??_isr
  6227  0008  0870               	movf	??_isr,w
  6228  0009  00FF               	movwf	127
  6229  000A  0009               	retfie
  6230  000B                     __end_of_isr:	
  6231  0003                     
  6232                           	psect	functab
  6233  0100                     __pfunctab:	
  6234  0100                     __fptable:	
  6235  0100                     fptable:	
  6236  0100  3181               	movlp	high fptable
  6237  0101  0782               	addwf	2,f
  6238  0102                     fpbase:	
  6239  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  6240  0103                     __end_of__fptable:	
  6241  007E                     btemp	set	126	;btemp
  6242  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     16      73
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?_strncmp	int  size(1) Largest target is 0

    ?_strlen	unsigned int  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ?_FLASH_read	unsigned int  size(1) Largest target is 0

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_20(CODE[14]), STR_19(CODE[13]), STR_18(CODE[11]), STR_17(CODE[10]), 
		 -> STR_16(CODE[12]), STR_15(CODE[11]), STR_14(CODE[8]), STR_13(CODE[7]), 
		 -> STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[14]), STR_7(CODE[15]), STR_6(CODE[9]), STR_5(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    USART_Send_6bytes@dataToSend	PTR unsigned char  size(1) Largest target is 32
		 -> command_read_adc@adc_data(BANK0[6]), heflashbuffer(BANK0[32]), 

    USART_Send@dataToSend	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    command_set_dac_cal@dac_cal_data	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), 

    command_save_shuntcalibration@shuntcalibration_data	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), 

    command_save_offset@offset_data	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), 

    command_set_dac@dac_data	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), 

    send_WAIT@reply	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_4(CODE[6]), 

    send_OK@reply	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    command_unknown@reply	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    InitializeIO@startReply	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    Read2BytesSPI@data2_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    Read2BytesSPI@data1_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    DAC1220_Read3Bytes@byte3	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte2	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte1	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    MCP3550_Read@adc_data	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    HEFLASH_readBlock@buffer	PTR unsigned char  size(1) Largest target is 32
		 -> heflashbuffer(BANK0[32]), 

    HEFLASH_writeBlock@data	PTR const unsigned char  size(1) Largest target is 20
		 -> uart_command(BANK0[20]), command_calibrate_dac@data(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_InitializeIO
    _interpret_command->_command_unknown
    _interpret_command->_command_read_shuntcalibration
    _interpret_command->_command_read_dac_cal
    _command_set_dac_cal->_send_OK
    _command_read_dac_cal->_HEFLASH_readBlock
    _command_save_shuntcalibration->_send_OK
    _command_read_shuntcalibration->_HEFLASH_readBlock
    _command_save_offset->_send_OK
    _command_read_offset->_HEFLASH_readBlock
    _command_read_adc->_send_WAIT
    _USART_Send_6bytes->_EUSART_Write
    _send_WAIT->_USART_Send
    _MCP3550_Read->_Read2BytesSPI
    _command_calibrate_dac->_send_OK
    _DAC1220_SelfCal->_DAC1220_Write2Bytes
    _DAC1220_Read3Bytes->_WriteByteSPI
    _DAC1220_Read3Bytes->_ReadByteSPI
    _HEFLASH_writeBlock->_FLASH_write
    _command_set_dac->_send_OK
    _command_range3->_send_OK
    _command_range2->_send_OK
    _command_range1->_send_OK
    _command_mode_galvanostatic->_send_OK
    _command_mode_potentiostatic->_send_OK
    _command_cell_off->_send_OK
    _command_cell_on->_send_OK
    _send_OK->_USART_Send
    _command_unknown->_USART_Send
    _InitializeIO->_DAC1220_Init
    _InitializeIO->_USART_Send
    _USART_Send->_strlen
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _DAC1220_Init->_DAC1220_Write3Bytes
    _DAC1220_Write3Bytes->_WriteByteSPI
    _DAC1220_Write2Bytes->_WriteByteSPI
    _ClockPulse->_SPIDelay
    _DAC1220_Reset->_SPIDelay
    _HEFLASH_readBlock->_FLASH_read

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_interpret_command
    _interpret_command->_command_calibrate_dac
    _command_set_dac_cal->_HEFLASH_writeBlock
    _command_set_dac_cal->_send_OK
    _command_save_shuntcalibration->_HEFLASH_writeBlock
    _command_save_shuntcalibration->_send_OK
    _command_save_offset->_HEFLASH_writeBlock
    _command_save_offset->_send_OK
    _command_read_adc->_send_WAIT
    _send_WAIT->_USART_Send
    _command_calibrate_dac->_HEFLASH_writeBlock
    _command_calibrate_dac->_send_OK
    _command_set_dac->_send_OK
    _command_range3->_send_OK
    _command_range2->_send_OK
    _command_range1->_send_OK
    _command_mode_galvanostatic->_send_OK
    _command_mode_potentiostatic->_send_OK
    _command_cell_off->_send_OK
    _command_cell_on->_send_OK
    _send_OK->_USART_Send
    _command_unknown->_USART_Send
    _InitializeIO->_USART_Send

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10741
                                             13 BANK0      3     3      0
                       _InitializeIO
                  _interpret_command
                 _EUSART_is_rx_ready
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interpret_command                                    1     1      0    9376
                                             12 BANK0      1     1      0
                    _command_unknown
                    _command_cell_on
                   _command_cell_off
        _command_mode_potentiostatic
         _command_mode_galvanostatic
                     _command_range1
                     _command_range2
                     _command_range3
                    _command_set_dac
              _command_calibrate_dac
                   _command_read_adc
                _command_read_offset
                _command_save_offset
      _command_read_shuntcalibration
      _command_save_shuntcalibration
               _command_read_dac_cal
                _command_set_dac_cal
                            _strncmp
 ---------------------------------------------------------------------------------
 (3) _strncmp                                              6     3      3     134
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _command_set_dac_cal                                  3     3      0    1076
                                              3 BANK0      3     3      0
                 _HEFLASH_writeBlock
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_dac_cal                                 2     2      0     362
                                             10 COMMON     2     2      0
                  _HEFLASH_readBlock
                  _USART_Send_6bytes
 ---------------------------------------------------------------------------------
 (2) _command_save_shuntcalibration                        3     3      0     698
                                              3 BANK0      3     3      0
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_shuntcalibration                        2     2      0     362
                                             10 COMMON     2     2      0
                  _HEFLASH_readBlock
                  _USART_Send_6bytes
 ---------------------------------------------------------------------------------
 (2) _command_save_offset                                  3     3      0     698
                                              3 BANK0      3     3      0
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_offset                                  1     1      0     362
                                             10 COMMON     1     1      0
                  _HEFLASH_readBlock
                  _USART_Send_6bytes
 ---------------------------------------------------------------------------------
 (2) _command_read_adc                                     6     6      0    1082
                                              3 BANK0      6     6      0
                       _MCP3550_Read
                          _send_WAIT
                  _USART_Send_6bytes
 ---------------------------------------------------------------------------------
 (3) _USART_Send_6bytes                                    3     3      0     133
                                              2 COMMON     3     3      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _send_WAIT                                            2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (3) _MCP3550_Read                                         3     3      0     505
                                              6 COMMON     3     3      0
                           _SPIDelay
                      _Read2BytesSPI
 ---------------------------------------------------------------------------------
 (4) _Read2BytesSPI                                        4     3      1     282
                                              2 COMMON     4     3      1
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (2) _command_calibrate_dac                                9     9      0    1338
                                              3 BANK0      9     9      0
                 _HEFLASH_writeBlock
                 _DAC1220_Read3Bytes
                    _DAC1220_SelfCal
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _DAC1220_SelfCal                                      2     2      0     161
                                              8 COMMON     2     2      0
                _DAC1220_Write2Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Read3Bytes                                   5     2      3     269
                                              5 COMMON     5     2      3
                           _SPIDelay
                       _WriteByteSPI
                        _ReadByteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadByteSPI                                          3     3      0      77
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_writeBlock                                   7     5      2     336
                                              7 COMMON     4     2      2
                                              0 BANK0      3     3      0
                        _FLASH_write
                        _FLASH_erase
 ---------------------------------------------------------------------------------
 (4) _FLASH_erase                                          3     1      2      45
                                              1 COMMON     3     1      2
                            __unlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_write                                          6     1      5      89
                                              1 COMMON     6     1      5
                            __unlock
 ---------------------------------------------------------------------------------
 (5) __unlock                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _command_set_dac                                      2     2      0     616
                                              3 BANK0      2     2      0
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range3                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range2                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range1                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_galvanostatic                           0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_potentiostatic                          0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_off                                     0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_on                                      0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _send_OK                                              2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (2) _command_unknown                                      2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (1) _InitializeIO                                         4     4      0    1198
                                             11 COMMON     1     1      0
                                              2 BANK0      3     3      0
                  _HEFLASH_readBlock
                      _InitializeSPI
                      _DAC1220_Reset
                _DAC1220_Write3Bytes
                       _DAC1220_Init
                  _EUSART_Initialize
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (4) _USART_Send                                           4     3      1     136
                                              9 COMMON     2     1      1
                                              0 BANK0      2     2      0
                             _strlen (ARG)
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _strlen                                               8     6      2     130
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      93
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
             _EUSART_SetErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Init                                         2     2      0     353
                                              9 COMMON     2     2      0
                _DAC1220_Write2Bytes
                _DAC1220_Write3Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Write3Bytes                                  4     1      3     192
                                              5 COMMON     4     1      3
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _DAC1220_Write2Bytes                                  3     1      2     161
                                              5 COMMON     3     1      2
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteByteSPI                                         3     3      0      68
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (5) _ClockPulse                                           0     0      0       0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Reset                                        2     2      0       0
                                              2 COMMON     2     2      0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (6) _SPIDelay                                             1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitializeSPI                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_readBlock                                    7     5      2     229
                                              3 COMMON     7     5      2
                         _FLASH_read
 ---------------------------------------------------------------------------------
 (4) _FLASH_read                                           2     0      2      31
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeIO
     _HEFLASH_readBlock
       _FLASH_read
     _InitializeSPI
     _DAC1220_Reset
       _SPIDelay
     _DAC1220_Write3Bytes
       _SPIDelay
       _WriteByteSPI
         _ClockPulse
           _SPIDelay
     _DAC1220_Init
       _DAC1220_Write2Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
     _EUSART_Initialize
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetErrorHandler
     _strlen
     _USART_Send
       _strlen (ARG)
       _EUSART_Write (ARG)
   _interpret_command
     _command_unknown
       _strlen
       _USART_Send
         _strlen (ARG)
         _EUSART_Write (ARG)
     _command_cell_on
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_cell_off
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_mode_potentiostatic
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_mode_galvanostatic
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range1
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range2
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range3
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_set_dac
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_calibrate_dac
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Read3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
         _ReadByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_SelfCal
         _DAC1220_Write2Bytes
           _SPIDelay
           _WriteByteSPI
             _ClockPulse
               _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_adc
       _MCP3550_Read
         _SPIDelay
         _Read2BytesSPI
           _ClockPulse
             _SPIDelay
       _send_WAIT
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
       _USART_Send_6bytes
         _EUSART_Write
     _command_read_offset
       _HEFLASH_readBlock
         _FLASH_read
       _USART_Send_6bytes
         _EUSART_Write
     _command_save_offset
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_shuntcalibration
       _HEFLASH_readBlock
         _FLASH_read
       _USART_Send_6bytes
         _EUSART_Write
     _command_save_shuntcalibration
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_dac_cal
       _HEFLASH_readBlock
         _FLASH_read
       _USART_Send_6bytes
         _EUSART_Write
     _command_set_dac_cal
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _strncmp
   _EUSART_is_rx_ready
   _EUSART_Read

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      56      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      5D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 19 16:22:32 2020

                                                 pc 0002                                         __CFG_CP$OFF 0000  
                                               l381 07D0                                                 l374 07B1  
                                               u715 0310                                     ?_command_range1 0070  
                                   ?_command_range2 0070                                     ?_command_range3 0070  
                                               _isr 0004                      ?_EUSART_SetFramingErrorHandler 0070  
                                      __CFG_BORV$LO 0000                                                 wreg 0009  
                          Read2BytesSPI@bit_counter 0074                                        ?_EUSART_Read 0070  
                                 FLASH_read@address 0071                                        __CFG_LVP$OFF 0000  
                                  ?_command_cell_on 0070                               __size_of_WriteByteSPI 001A  
                                              l2120 03EA                                                l2112 03CB  
                                              l2116 03E1                                                l2118 03AC  
                                              l2320 060F                                                l2218 04E9  
                                              l2262 0435                                                l2166 07BA  
                                              l2280 045D                                                l2248 0494  
                                              l2356 0674                                                l2276 0457  
                                              l2612 0133                                                l2630 017B  
                                              l2606 011B                                                l2480 0641  
                                              l2624 0163                                                l2466 0572  
                                              l1594 032B                                                l2642 01AB  
                                              l2618 014B                                                l2714 0518  
                                              l2468 057E                                                l1596 0351  
                                              l2660 01F4                                                l2636 0193  
                                              l2724 0533                                                l2708 050F  
                                              l2566 0795                                                l2654 01DC  
                                              l2672 0225                                                l2648 01C4  
                                              l2690 026E                                                l2666 020C  
                                              l2684 0256                                                l2678 023D  
                                              l2696 0287                                                ?_isr 0070  
                                              STR_1 0086                                                STR_2 00CF  
                                              STR_3 00CB                                                STR_4 00C5  
                                              STR_5 00B6                                                STR_6 007D  
                                              STR_7 0019                                                STR_8 0036  
                                              STR_9 0096                                                u1345 04D7  
                                              u1265 03B6                                                u1907 0752  
                                              u1917 02AD                                                u1927 02BD  
                                              u1937 04A5                                                u1947 04B5  
                                              u1957 04C4                                                u1877 0372  
                                              u1967 07F4                                                u1887 0730  
                                              u1897 0741                          __end_of_HEFLASH_writeBlock 0368  
                                      __CFG_WRT$OFF 0000                                                _main 0507  
                                              fsr0h 0005                                                fsr1h 0007  
                                              fsr0l 0004                                                indf0 0000  
                                              indf1 0001                                                fsr1l 0006  
                                              btemp 007E                           command_calibrate_dac@data 005F  
                                  ?_command_set_dac 0070                                       __CFG_BOREN$ON 0000  
                                              start 000B                                       __CFG_IESO$OFF 0000  
                                  ?_command_unknown 0070                                       ??_ReadByteSPI 0072  
                            __size_of_InitializeSPI 000D                                __end_of_MCP3550_Read 049A  
                               __size_of_FLASH_read 0013                                               ??_isr 0070  
                                 ?_command_cell_off 0070                                          _ClockPulse 07BC  
                     __size_of_command_read_dac_cal 0010                      command_save_offset@offset_data 005E  
                                     ?_EUSART_Write 0070                                               PMCON1 0195  
                                             PMCON2 0196                                  ??_command_cell_off 007C  
                   ??_command_save_shuntcalibration 005C                                 _DAC1220_Write2Bytes 05D4  
                                             ?_main 0070                                 _DAC1220_Write3Bytes 05B4  
                                             STR_10 009E                                               STR_11 00A6  
                                             STR_12 008E                                               STR_20 0028  
                                             STR_13 00BE                                               STR_14 00AE  
                                             STR_15 0068                                               STR_16 0051  
                                             STR_17 0073                                       __CFG_WDTE$OFF 0000  
                                             STR_18 005D                                               STR_19 0044  
                                      _WriteByteSPI 060A                                               _PMADR 0191  
                                             _PMDAT 0193                                               _RCREG 0199  
                                             _RCSTA 019D                                               _TXREG 019A  
                                             _TXSTA 019E                                      __CFG_FCMEN$OFF 0000  
                                 ?_command_read_adc 0070                                     __end_of__unlock 07CF  
                           command_set_dac@dac_data 005D                                    __end_of_SPIDelay 07F8  
                                   ??_Read2BytesSPI 0073                                  ??_command_read_adc 007C  
                                             main@c 0068                                               main@i 0067  
                                             fpbase 0102                                     __end_of_send_OK 06C8  
                                     ?_InitializeIO 0070                              HEFLASH_writeBlock@data 0077  
                            HEFLASH_writeBlock@radd 0059                                ?_DAC1220_Write2Bytes 0075  
                              ?_DAC1220_Write3Bytes 0075                                               status 0003  
                                             wtemp0 007E                                     __end_of_strncmp 03ED  
                                USART_Send_6bytes@i 0074  command_save_shuntcalibration@shuntcalibration_data 005E  
                                       ?_USART_Send 0079                                      __CFG_MCLRE$OFF 0000  
                      ??_command_mode_galvanostatic 007C                                     __initialization 000D  
                                      __end_of_main 053B                                      ??_EUSART_Write 0071  
                                    __CFG_LPBOR$OFF 0000                                __size_of_FLASH_erase 0019  
                               __end_of_ReadByteSPI 0686                                              ??_main 0066  
                              __size_of_FLASH_write 0022                                 __CFG_USBLSCLK$48MHz 0000  
                              HEFLASH_readBlock@add 0078                                       _InitializeSPI 0798  
              fp__EUSART_DefaultFramingErrorHandler 0000                   _EUSART_DefaultFramingErrorHandler 0000  
                        _EUSART_OverrunErrorHandler 0022                                              _APFCON 011D  
                                            _ANSELA 018C                                              _ANSELB 018D  
                                            _ANSELC 018E                          __end_of_EUSART_is_rx_ready 07FD  
                                    ??_InitializeIO 005B                 __size_of_command_mode_galvanostatic 0005  
                             ??_DAC1220_Write2Bytes 0077                               ??_DAC1220_Write3Bytes 0078  
                                            _SPBRGH 019C                                              _SPBRGL 019B  
                                  __end_of__fptable 0103                                      __CFG_PWRTE$OFF 0000  
                       __end_of_command_read_offset 078A                           DAC1220_Read3Bytes@address 0079  
                                    __CFG_STVREN$ON 0000                                  FLASH_write@address 0071  
                                       ?_ClockPulse 0070                               __end_of_DAC1220_Reset 04D2  
                                         ??__unlock 0071                                              _strlen 056D  
                           WriteByteSPI@bit_counter 0074                                              fptable 0100  
                             _command_calibrate_dac 0368                                              fptotal 0003  
                                         ??_send_OK 007B                                      ?_InitializeSPI 0070  
                               __size_of_USART_Send 0019                             HEFLASH_writeBlock@count 0078  
                                      ??_FLASH_read 0073                                           ??_strncmp 0074  
                              __size_of_EUSART_Read 000B                     ??_command_read_shuntcalibration 007A  
                           __end_of__initialization 0015                               __size_of_MCP3550_Read 0038  
                                    __pcstackCOMMON 0070                                         _ReadByteSPI 066F  
                       __end_of_command_save_offset 0729                                _received_data_length 007C  
                                  ??_command_range1 005C                                    ??_command_range2 005C  
                                  ??_command_range3 005C                         __end_of_command_set_dac_cal 0428  
                                         ?_SPIDelay 0070                         __size_of_DAC1220_Read3Bytes 0032  
                                __end_of_FLASH_read 0707                     ??_EUSART_SetOverrunErrorHandler 0071  
                                      _MCP3550_Read 0462                                          __pbssBANK0 0020  
                              __end_of_EUSART_Write 07D7                                USART_Send@dataLength 0079  
                               __size_of_ClockPulse 000A                                USART_Send@dataToSend 0059  
                __end_of_command_mode_galvanostatic 00D7                          _command_mode_galvanostatic 00D2  
                   command_set_dac_cal@dac_cal_data 005E                             HEFLASH_readBlock@buffer 0077  
                             HEFLASH_readBlock@radd 0073                                          __pmaintext 0507  
                                _HEFLASH_writeBlock 030A                                  __size_of_send_WAIT 0016  
                                   __CFG_PLLMULT$3x 0000                                          __pintentry 0004  
                                        ??_SPIDelay 0071                                             _BAUDCON 019F  
                       USART_Send_6bytes@dataToSend 0073                                __end_of_InitializeIO 030A  
                          __size_of_DAC1220_SelfCal 000C                              ?_command_calibrate_dac 0070  
                                           ?_strlen 0071                                 ?_HEFLASH_writeBlock 0077  
                                   ??_InitializeSPI 0071                            ??_EUSART_SetErrorHandler 0071  
                                     ?_DAC1220_Init 0070                           __size_of_command_cell_off 0005  
                      __end_of_command_read_dac_cal 076C                                          __stringtab 0018  
                              ??_HEFLASH_writeBlock 0079                            __size_of_command_cell_on 0005  
                                      ??_USART_Send 007A                           __size_of_command_read_adc 000E  
                          __size_of_command_set_dac 001A                            __size_of_command_unknown 0016  
                                           __ptext1 07B1                                             __ptext2 07F8  
                                           __ptext3 0103                                             __ptext4 03AB  
                                           __ptext5 03ED                                             __ptext6 075C  
                                           __ptext7 0707                                             __ptext8 076C  
                                           __ptext9 0718                                             __unlock 07C6  
                                   __size_of_strlen 0025                                        __size_of_isr 0007  
                                           _send_OK 06B2                                      ??_DAC1220_Init 0079  
                                __end_of_USART_Send 0656                                   __end_of_send_WAIT 06B2  
                                           clrloop0 07ED                                             _strncmp 03AB  
                              end_of_initialization 0015                               __end_of_Read2BytesSPI 0462  
             __end_of_EUSART_SetOverrunErrorHandler 07E5              __size_of_EUSART_SetOverrunErrorHandler 0007  
                     _EUSART_SetOverrunErrorHandler 07DE                              ReadByteSPI@bit_counter 0073  
                                 _EUSART_Initialize 0656                        ?_command_mode_potentiostatic 0070  
                                ?_EUSART_Initialize 0070                                           _RCSTAbits 019D  
                                _EUSART_is_rx_ready 07F8                                       ??_FLASH_erase 0073  
                          command_read_adc@adc_data 005C                                        ??_ClockPulse 0072  
                                     ??_FLASH_write 0076                                   _interpret_command 0103  
                                           strlen@s 0077                                 ??_EUSART_Initialize 0073  
                                         _PORTBbits 000D                                 ?_EUSART_is_rx_ready 0070  
                                         _PORTCbits 000E                                  ?_interpret_command 0070  
                                  __CFG_FOSC$INTOSC 0000                                           _TRISAbits 008C  
                                         _TRISBbits 008D                                   ??_DAC1220_SelfCal 0078  
                                         _TRISCbits 008E                               __size_of_EUSART_Write 0008  
                       __end_of_DAC1220_Write2Bytes 05F0                         __end_of_DAC1220_Write3Bytes 05D4  
                               ??_interpret_command 0065                     __size_of_EUSART_SetErrorHandler 0007  
                         __end_of_EUSART_Initialize 066F                                ??_EUSART_is_rx_ready 0071  
                                __end_of_ClockPulse 07C6                                           _TXSTAbits 019E  
                                __CFG_PLLEN$ENABLED 0000                               __size_of_InitializeIO 0080  
                     ??_command_mode_potentiostatic 007C                                        ?_ReadByteSPI 0070  
                              command_unknown@reply 005B                           __end_of_interpret_command 028A  
                                 ??_command_cell_on 007C                          _EUSART_DefaultErrorHandler 0000  
                              _command_read_dac_cal 075C                        __size_of_command_read_offset 000E  
                                      _EUSART_Write 07CF                                         USART_Send@i 005A  
                                 __size_of_SPIDelay 0006                               HEFLASH_writeBlock@add 005A  
                               __end_of_FLASH_erase 063D                                   ??_command_set_dac 005C  
                                    __end_of_strlen 0592                                 start_initialization 000D  
                               __end_of_FLASH_write 05B4                                   ??_command_unknown 007B  
                                       __end_of_isr 000B                                       ??_EUSART_Read 0071  
                                  _command_cell_off 00DC                                        _InitializeIO 028A  
                            __size_of_DAC1220_Reset 0038                         ?_command_mode_galvanostatic 0070  
                                  _command_read_adc 078A                      ?_EUSART_SetOverrunErrorHandler 0070  
                                 _HEFLASH_readBlock 04D2                          _EUSART_FramingErrorHandler 0021  
                        __end_of_DAC1220_Read3Bytes 056D                              _EUSART_SetErrorHandler 07D7  
                              __end_of_DAC1220_Init 06F4                                  ?_HEFLASH_readBlock 0073  
                           ??_command_calibrate_dac 005C                               ?_command_read_dac_cal 0070  
                                    send_WAIT@reply 005B                                   _USART_Send_6bytes 0686  
                                          ??_strlen 0073                                       ?_WriteByteSPI 0070  
                      __size_of_command_save_offset 0011                                 ??_HEFLASH_readBlock 0075  
                          DAC1220_Write2Bytes@byte1 0075                            DAC1220_Write2Bytes@byte2 0076  
                                ?_USART_Send_6bytes 0070                                         __pbssCOMMON 007C  
              __size_of_command_mode_potentiostatic 0005                        __size_of_command_set_dac_cal 003B  
                                     __pcstackBANK0 0059                                 __end_of__stringdata 00D2  
                                 __size_of__fptable 0003               __end_of_command_save_shuntcalibration 0718  
            __size_of_command_save_shuntcalibration 0011                       _command_save_shuntcalibration 0707  
                               ??_USART_Send_6bytes 0072                          __size_of_EUSART_Initialize 0019  
                                      send_OK@reply 005B                                 __end_of_EUSART_Read 07BC  
                          DAC1220_Write3Bytes@byte1 0075                            DAC1220_Write3Bytes@byte2 0076  
                          DAC1220_Write3Bytes@byte3 0077                           __end_of_HEFLASH_readBlock 0507  
                            HEFLASH_readBlock@count 0074                          DAC1220_Write2Bytes@address 0077  
                                         __pfunctab 0100                          __size_of_interpret_command 0187  
                                       _FLASH_erase 0624                           __end_of_USART_Send_6bytes 069C  
                                       _FLASH_write 0592                                      ??_WriteByteSPI 0072  
                                         __pstrings 0018                                       _DAC1220_Reset 049A  
                                          ?__unlock 0070                               __end_of_InitializeSPI 07A5  
                                          ?_send_OK 0070                             __size_of_command_range1 0011  
                           __size_of_command_range2 0011                             __size_of_command_range3 0011  
                              MCP3550_Read@adc_data 0078                                            ?_strncmp 0071  
                                         _send_WAIT 069C                                            _LATAbits 010C  
            EUSART_SetErrorHandler@interruptHandler 0072                                            _LATBbits 010D  
                                          _LATCbits 010E                         __size_of_HEFLASH_writeBlock 005E  
                                         clear_ram0 07EC                                   _eusartRxLastError 0023  
                            InitializeIO@startReply 007B                                            _PIR1bits 0011  
                   ??_EUSART_SetFramingErrorHandler 0071                                     FLASH_erase@temp 0073  
                            ??_command_read_dac_cal 007A                fp__EUSART_DefaultOverrunErrorHandler 0000  
                 _EUSART_DefaultOverrunErrorHandler 0000                                     _DAC1220_SelfCal 07A5  
                              __size_of_ReadByteSPI 0017                                            _SPIDelay 07F2  
                                    ?_DAC1220_Reset 0070                                         __stringdata 0019  
                                       _EUSART_Read 07B1                                          _ACTCONbits 039B  
                               _command_read_offset 077C                                          ?_send_WAIT 0070  
                                   _command_cell_on 00E1                      ?_command_save_shuntcalibration 0070  
                        __size_of_HEFLASH_readBlock 0035                               __size_of_DAC1220_Init 0016  
                             WriteByteSPI@data_byte 0073                          DAC1220_Write3Bytes@address 0078  
                                   _command_set_dac 05F0                                    FLASH_write@latch 0075  
             __end_of_command_read_shuntcalibration 077C              __size_of_command_read_shuntcalibration 0010  
                     _command_read_shuntcalibration 076C                            __end_of_command_cell_off 00E1  
                               _EUSART_ErrorHandler 0020                                     _command_unknown 06C8  
                        __size_of_USART_Send_6bytes 0016                                ?_command_read_offset 0070  
                                __end_of__stringtab 0019                              __size_of_Read2BytesSPI 003A  
                                  __size_of__unlock 0009                                            __fptable 0100  
                          __end_of_command_read_adc 0798                                    __size_of_send_OK 0016  
                                          __ptext10 077C                                            __ptext11 078A  
                                          __ptext20 030A                                            __ptext12 0686  
                                          __ptext21 0624                                            __ptext13 069C  
                                          __ptext30 00DC                                            __ptext22 0592  
                                          __ptext14 0462                                            __ptext31 00E1  
                                          __ptext23 07C6                                            __ptext15 0428  
                                          __ptext40 07DE                                            __ptext32 06B2  
                                          __ptext24 05F0                                            __ptext16 0368  
                                          __ptext41 07E5                                            __ptext33 06C8  
                                          __ptext25 0729                                            __ptext17 07A5  
                                          __ptext50 04D2                                            __ptext42 06DE  
                                          __ptext34 028A                                            __ptext26 073A  
                                          __ptext18 053B                                            __ptext51 06F4  
                                          __ptext43 05B4                                            __ptext35 063D  
                                          __ptext27 074B                                            __ptext19 066F  
                                          __ptext44 05D4                                            __ptext36 07CF  
                                          __ptext28 00D2                                            __ptext45 060A  
                                          __ptext37 056D                                            __ptext29 00D7  
                                          __ptext46 07BC                                            __ptext38 0656  
                                          __ptext47 049A                                            __ptext39 07D7  
                                          __ptext48 07F2                                            __ptext49 0798  
                                        _FLASH_read 06F4                                       _heflashbuffer 0025  
                                     ?_MCP3550_Read 0070                                        _DAC1220_Init 06DE  
                                FLASH_erase@address 0071                                    __size_of_strncmp 0042  
                      __size_of_DAC1220_Write2Bytes 001C                         __size_of_EUSART_is_rx_ready 0005  
                      __size_of_DAC1220_Write3Bytes 0020                                       __size_of_main 0034  
                              __end_of_WriteByteSPI 0624                                ReadByteSPI@data_byte 0074  
                               _command_save_offset 0718                                          strncmp@len 0072  
                           __end_of_DAC1220_SelfCal 07B1                             ?_EUSART_SetErrorHandler 0070  
                               _command_set_dac_cal 03ED       EUSART_SetOverrunErrorHandler@interruptHandler 0072  
                                   ??_DAC1220_Reset 0072                               ??_command_read_offset 007A  
             __end_of_EUSART_SetFramingErrorHandler 07EC              __size_of_EUSART_SetFramingErrorHandler 0007  
                     _EUSART_SetFramingErrorHandler 07E5                      __size_of_command_calibrate_dac 0043  
                     __end_of_command_calibrate_dac 03AB                              MCP3550_Read@data_ready 0077  
                              ?_command_save_offset 0070                                          _INTCONbits 000B  
                                _DAC1220_Read3Bytes 053B                                ?_command_set_dac_cal 0070  
                                    _command_range1 074B                                      _command_range2 073A  
                                    _command_range3 0729                                     FLASH_write@data 0073  
                                    ??_MCP3550_Read 0076                                     FLASH_write@temp 0076  
                           __end_of_command_cell_on 00E6                             DAC1220_Read3Bytes@byte1 0075  
                           DAC1220_Read3Bytes@byte2 0076                             DAC1220_Read3Bytes@byte3 0077  
                                          intlevel1 0100                                 ?_DAC1220_Read3Bytes 0075  
                                      _uart_command 0045                                          _PMCON1bits 0195  
                                     _Read2BytesSPI 0428                                         ??_send_WAIT 007B  
                           __end_of_command_set_dac 060A                      __end_of_EUSART_SetErrorHandler 07DE  
                                 __CFG_CLKOUTEN$OFF 0000                 __end_of_command_mode_potentiostatic 00DC  
                       _command_mode_potentiostatic 00D7                                           strncmp@s1 0076  
                                         strncmp@s2 0071                             __end_of_command_unknown 06DE  
                                        _OSCCONbits 0099                                __CFG_CPUDIV$NOCLKDIV 0000  
     EUSART_SetFramingErrorHandler@interruptHandler 0072                                        ?_FLASH_erase 0071  
                              ??_DAC1220_Read3Bytes 0078                                        ?_FLASH_write 0071  
                             ??_command_save_offset 005C                      ?_command_read_shuntcalibration 0070  
                            __end_of_command_range1 075C                              __end_of_command_range2 074B  
                            __end_of_command_range3 073A                               ??_command_set_dac_cal 005C  
                     fp__EUSART_DefaultErrorHandler 0000                                            strlen@cp 0078  
                              _transmit_data_length 0024                             Read2BytesSPI@data1_byte 0075  
                           Read2BytesSPI@data2_byte 0072                                         ?_FLASH_read 0071  
                                EUSART_Write@txData 0071                                      ?_Read2BytesSPI 0072  
                                  ?_DAC1220_SelfCal 0070                                          _USART_Send 063D  
