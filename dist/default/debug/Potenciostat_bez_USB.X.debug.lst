

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 19 14:05:42 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1459
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	text31,local,class=CODE,merge=1,delta=2
    43                           	psect	text32,local,class=CODE,merge=1,delta=2
    44                           	psect	text33,local,class=CODE,merge=1,delta=2
    45                           	psect	text34,local,class=CODE,merge=1,delta=2
    46                           	psect	text35,local,class=CODE,merge=1,delta=2
    47                           	psect	text36,local,class=CODE,merge=1,delta=2
    48                           	psect	text37,local,class=CODE,merge=1,delta=2
    49                           	psect	text38,local,class=CODE,merge=1,delta=2
    50                           	psect	text39,local,class=CODE,merge=1,delta=2
    51                           	psect	text40,local,class=CODE,merge=1,delta=2
    52                           	psect	text41,local,class=CODE,merge=1,delta=2
    53                           	psect	text42,local,class=CODE,merge=1,delta=2
    54                           	psect	text43,local,class=CODE,merge=1,delta=2
    55                           	psect	text44,local,class=CODE,merge=1,delta=2
    56                           	psect	text45,local,class=CODE,merge=1,delta=2
    57                           	psect	text46,local,class=CODE,merge=1,delta=2
    58                           	psect	text47,local,class=CODE,merge=1,delta=2
    59                           	psect	text48,local,class=CODE,merge=1,delta=2
    60                           	psect	text49,local,class=CODE,merge=1,delta=2
    61                           	psect	text50,local,class=CODE,merge=1,delta=2
    62                           	psect	text51,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	functab,global,reloc=256,class=CODE,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0095                     	;# 
    98  0096                     	;# 
    99  0097                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009A                     	;# 
   103  009B                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  0111                     	;# 
   113  0112                     	;# 
   114  0113                     	;# 
   115  0114                     	;# 
   116  0115                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0118                     	;# 
   120  0119                     	;# 
   121  011D                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  018E                     	;# 
   125  0191                     	;# 
   126  0191                     	;# 
   127  0192                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0194                     	;# 
   131  0195                     	;# 
   132  0196                     	;# 
   133  0197                     	;# 
   134  0199                     	;# 
   135  019A                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0391                     	;# 
   160  0392                     	;# 
   161  0393                     	;# 
   162  0394                     	;# 
   163  0395                     	;# 
   164  0396                     	;# 
   165  039A                     	;# 
   166  039B                     	;# 
   167  0611                     	;# 
   168  0612                     	;# 
   169  0613                     	;# 
   170  0613                     	;# 
   171  0614                     	;# 
   172  0615                     	;# 
   173  0616                     	;# 
   174  0616                     	;# 
   175  0691                     	;# 
   176  0692                     	;# 
   177  0693                     	;# 
   178  0694                     	;# 
   179  0695                     	;# 
   180  0E8E                     	;# 
   181  0E8F                     	;# 
   182  0E90                     	;# 
   183  0E91                     	;# 
   184  0E92                     	;# 
   185  0E93                     	;# 
   186  0E94                     	;# 
   187  0E94                     	;# 
   188  0E95                     	;# 
   189  0E96                     	;# 
   190  0E97                     	;# 
   191  0E98                     	;# 
   192  0E99                     	;# 
   193  0E9A                     	;# 
   194  0E9B                     	;# 
   195  0E9C                     	;# 
   196  0E9D                     	;# 
   197  0E9E                     	;# 
   198  0E9F                     	;# 
   199  0FE4                     	;# 
   200  0FE5                     	;# 
   201  0FE6                     	;# 
   202  0FE7                     	;# 
   203  0FE8                     	;# 
   204  0FE9                     	;# 
   205  0FEA                     	;# 
   206  0FEB                     	;# 
   207  0FED                     	;# 
   208  0FEE                     	;# 
   209  0FEF                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0016                     	;# 
   230  0017                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  008C                     	;# 
   237  008D                     	;# 
   238  008E                     	;# 
   239  0091                     	;# 
   240  0092                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009B                     	;# 
   249  009C                     	;# 
   250  009D                     	;# 
   251  009E                     	;# 
   252  009F                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  0111                     	;# 
   257  0112                     	;# 
   258  0113                     	;# 
   259  0114                     	;# 
   260  0115                     	;# 
   261  0116                     	;# 
   262  0117                     	;# 
   263  0118                     	;# 
   264  0119                     	;# 
   265  011D                     	;# 
   266  018C                     	;# 
   267  018D                     	;# 
   268  018E                     	;# 
   269  0191                     	;# 
   270  0191                     	;# 
   271  0192                     	;# 
   272  0193                     	;# 
   273  0193                     	;# 
   274  0194                     	;# 
   275  0195                     	;# 
   276  0196                     	;# 
   277  0197                     	;# 
   278  0199                     	;# 
   279  019A                     	;# 
   280  019B                     	;# 
   281  019B                     	;# 
   282  019C                     	;# 
   283  019D                     	;# 
   284  019E                     	;# 
   285  019F                     	;# 
   286  020C                     	;# 
   287  020D                     	;# 
   288  0211                     	;# 
   289  0211                     	;# 
   290  0212                     	;# 
   291  0212                     	;# 
   292  0213                     	;# 
   293  0213                     	;# 
   294  0214                     	;# 
   295  0214                     	;# 
   296  0215                     	;# 
   297  0215                     	;# 
   298  0215                     	;# 
   299  0216                     	;# 
   300  0216                     	;# 
   301  0217                     	;# 
   302  0217                     	;# 
   303  0391                     	;# 
   304  0392                     	;# 
   305  0393                     	;# 
   306  0394                     	;# 
   307  0395                     	;# 
   308  0396                     	;# 
   309  039A                     	;# 
   310  039B                     	;# 
   311  0611                     	;# 
   312  0612                     	;# 
   313  0613                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0615                     	;# 
   317  0616                     	;# 
   318  0616                     	;# 
   319  0691                     	;# 
   320  0692                     	;# 
   321  0693                     	;# 
   322  0694                     	;# 
   323  0695                     	;# 
   324  0E8E                     	;# 
   325  0E8F                     	;# 
   326  0E90                     	;# 
   327  0E91                     	;# 
   328  0E92                     	;# 
   329  0E93                     	;# 
   330  0E94                     	;# 
   331  0E94                     	;# 
   332  0E95                     	;# 
   333  0E96                     	;# 
   334  0E97                     	;# 
   335  0E98                     	;# 
   336  0E99                     	;# 
   337  0E9A                     	;# 
   338  0E9B                     	;# 
   339  0E9C                     	;# 
   340  0E9D                     	;# 
   341  0E9E                     	;# 
   342  0E9F                     	;# 
   343  0FE4                     	;# 
   344  0FE5                     	;# 
   345  0FE6                     	;# 
   346  0FE7                     	;# 
   347  0FE8                     	;# 
   348  0FE9                     	;# 
   349  0FEA                     	;# 
   350  0FEB                     	;# 
   351  0FED                     	;# 
   352  0FEE                     	;# 
   353  0FEF                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0008                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  0011                     	;# 
   370  0012                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0016                     	;# 
   374  0017                     	;# 
   375  0018                     	;# 
   376  0019                     	;# 
   377  001A                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  008C                     	;# 
   381  008D                     	;# 
   382  008E                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0095                     	;# 
   386  0096                     	;# 
   387  0097                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009A                     	;# 
   391  009B                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  010C                     	;# 
   398  010D                     	;# 
   399  010E                     	;# 
   400  0111                     	;# 
   401  0112                     	;# 
   402  0113                     	;# 
   403  0114                     	;# 
   404  0115                     	;# 
   405  0116                     	;# 
   406  0117                     	;# 
   407  0118                     	;# 
   408  0119                     	;# 
   409  011D                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  018E                     	;# 
   413  0191                     	;# 
   414  0191                     	;# 
   415  0192                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0194                     	;# 
   419  0195                     	;# 
   420  0196                     	;# 
   421  0197                     	;# 
   422  0199                     	;# 
   423  019A                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019C                     	;# 
   427  019D                     	;# 
   428  019E                     	;# 
   429  019F                     	;# 
   430  020C                     	;# 
   431  020D                     	;# 
   432  0211                     	;# 
   433  0211                     	;# 
   434  0212                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0213                     	;# 
   438  0214                     	;# 
   439  0214                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0215                     	;# 
   443  0216                     	;# 
   444  0216                     	;# 
   445  0217                     	;# 
   446  0217                     	;# 
   447  0391                     	;# 
   448  0392                     	;# 
   449  0393                     	;# 
   450  0394                     	;# 
   451  0395                     	;# 
   452  0396                     	;# 
   453  039A                     	;# 
   454  039B                     	;# 
   455  0611                     	;# 
   456  0612                     	;# 
   457  0613                     	;# 
   458  0613                     	;# 
   459  0614                     	;# 
   460  0615                     	;# 
   461  0616                     	;# 
   462  0616                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0E8E                     	;# 
   469  0E8F                     	;# 
   470  0E90                     	;# 
   471  0E91                     	;# 
   472  0E92                     	;# 
   473  0E93                     	;# 
   474  0E94                     	;# 
   475  0E94                     	;# 
   476  0E95                     	;# 
   477  0E96                     	;# 
   478  0E97                     	;# 
   479  0E98                     	;# 
   480  0E99                     	;# 
   481  0E9A                     	;# 
   482  0E9B                     	;# 
   483  0E9C                     	;# 
   484  0E9D                     	;# 
   485  0E9E                     	;# 
   486  0E9F                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0098                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  009F                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0111                     	;# 
   545  0112                     	;# 
   546  0113                     	;# 
   547  0114                     	;# 
   548  0115                     	;# 
   549  0116                     	;# 
   550  0117                     	;# 
   551  0118                     	;# 
   552  0119                     	;# 
   553  011D                     	;# 
   554  018C                     	;# 
   555  018D                     	;# 
   556  018E                     	;# 
   557  0191                     	;# 
   558  0191                     	;# 
   559  0192                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0194                     	;# 
   563  0195                     	;# 
   564  0196                     	;# 
   565  0197                     	;# 
   566  0199                     	;# 
   567  019A                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019C                     	;# 
   571  019D                     	;# 
   572  019E                     	;# 
   573  019F                     	;# 
   574  020C                     	;# 
   575  020D                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0391                     	;# 
   592  0392                     	;# 
   593  0393                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  039A                     	;# 
   598  039B                     	;# 
   599  0611                     	;# 
   600  0612                     	;# 
   601  0613                     	;# 
   602  0613                     	;# 
   603  0614                     	;# 
   604  0615                     	;# 
   605  0616                     	;# 
   606  0616                     	;# 
   607  0691                     	;# 
   608  0692                     	;# 
   609  0693                     	;# 
   610  0694                     	;# 
   611  0695                     	;# 
   612  0E8E                     	;# 
   613  0E8F                     	;# 
   614  0E90                     	;# 
   615  0E91                     	;# 
   616  0E92                     	;# 
   617  0E93                     	;# 
   618  0E94                     	;# 
   619  0E94                     	;# 
   620  0E95                     	;# 
   621  0E96                     	;# 
   622  0E97                     	;# 
   623  0E98                     	;# 
   624  0E99                     	;# 
   625  0E9A                     	;# 
   626  0E9B                     	;# 
   627  0E9C                     	;# 
   628  0E9D                     	;# 
   629  0E9E                     	;# 
   630  0E9F                     	;# 
   631  0FE4                     	;# 
   632  0FE5                     	;# 
   633  0FE6                     	;# 
   634  0FE7                     	;# 
   635  0FE8                     	;# 
   636  0FE9                     	;# 
   637  0FEA                     	;# 
   638  0FEB                     	;# 
   639  0FED                     	;# 
   640  0FEE                     	;# 
   641  0FEF                     	;# 
   642  0000                     	;# 
   643  0001                     	;# 
   644  0002                     	;# 
   645  0003                     	;# 
   646  0004                     	;# 
   647  0005                     	;# 
   648  0006                     	;# 
   649  0007                     	;# 
   650  0008                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  0011                     	;# 
   658  0012                     	;# 
   659  0015                     	;# 
   660  0016                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  0019                     	;# 
   665  001A                     	;# 
   666  001B                     	;# 
   667  001C                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0091                     	;# 
   672  0092                     	;# 
   673  0095                     	;# 
   674  0096                     	;# 
   675  0097                     	;# 
   676  0098                     	;# 
   677  0099                     	;# 
   678  009A                     	;# 
   679  009B                     	;# 
   680  009B                     	;# 
   681  009C                     	;# 
   682  009D                     	;# 
   683  009E                     	;# 
   684  009F                     	;# 
   685  010C                     	;# 
   686  010D                     	;# 
   687  010E                     	;# 
   688  0111                     	;# 
   689  0112                     	;# 
   690  0113                     	;# 
   691  0114                     	;# 
   692  0115                     	;# 
   693  0116                     	;# 
   694  0117                     	;# 
   695  0118                     	;# 
   696  0119                     	;# 
   697  011D                     	;# 
   698  018C                     	;# 
   699  018D                     	;# 
   700  018E                     	;# 
   701  0191                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  0193                     	;# 
   705  0193                     	;# 
   706  0194                     	;# 
   707  0195                     	;# 
   708  0196                     	;# 
   709  0197                     	;# 
   710  0199                     	;# 
   711  019A                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019C                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019F                     	;# 
   718  020C                     	;# 
   719  020D                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0391                     	;# 
   736  0392                     	;# 
   737  0393                     	;# 
   738  0394                     	;# 
   739  0395                     	;# 
   740  0396                     	;# 
   741  039A                     	;# 
   742  039B                     	;# 
   743  0611                     	;# 
   744  0612                     	;# 
   745  0613                     	;# 
   746  0613                     	;# 
   747  0614                     	;# 
   748  0615                     	;# 
   749  0616                     	;# 
   750  0616                     	;# 
   751  0691                     	;# 
   752  0692                     	;# 
   753  0693                     	;# 
   754  0694                     	;# 
   755  0695                     	;# 
   756  0E8E                     	;# 
   757  0E8F                     	;# 
   758  0E90                     	;# 
   759  0E91                     	;# 
   760  0E92                     	;# 
   761  0E93                     	;# 
   762  0E94                     	;# 
   763  0E94                     	;# 
   764  0E95                     	;# 
   765  0E96                     	;# 
   766  0E97                     	;# 
   767  0E98                     	;# 
   768  0E99                     	;# 
   769  0E9A                     	;# 
   770  0E9B                     	;# 
   771  0E9C                     	;# 
   772  0E9D                     	;# 
   773  0E9E                     	;# 
   774  0E9F                     	;# 
   775  0FE4                     	;# 
   776  0FE5                     	;# 
   777  0FE6                     	;# 
   778  0FE7                     	;# 
   779  0FE8                     	;# 
   780  0FE9                     	;# 
   781  0FEA                     	;# 
   782  0FEB                     	;# 
   783  0FED                     	;# 
   784  0FEE                     	;# 
   785  0FEF                     	;# 
   786                           
   787 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
   788  0000                     
   789 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
   790  0000                     
   791 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
   792  000B                     _INTCONbits	set	11
   793  0011                     _PIR1bits	set	17
   794  000D                     _PORTBbits	set	13
   795  000E                     _PORTCbits	set	14
   796  0099                     _OSCCONbits	set	153
   797  008C                     _TRISAbits	set	140
   798  008D                     _TRISBbits	set	141
   799  008E                     _TRISCbits	set	142
   800  011D                     _APFCON	set	285
   801  010C                     _LATAbits	set	268
   802  010D                     _LATBbits	set	269
   803  010E                     _LATCbits	set	270
   804  0191                     _PMADR	set	401
   805  0193                     _PMDAT	set	403
   806  018C                     _ANSELA	set	396
   807  018D                     _ANSELB	set	397
   808  018E                     _ANSELC	set	398
   809  019F                     _BAUDCON	set	415
   810  0195                     _PMCON1bits	set	405
   811  0199                     _RCREG	set	409
   812  019D                     _RCSTA	set	413
   813  019D                     _RCSTAbits	set	413
   814  019C                     _SPBRGH	set	412
   815  019B                     _SPBRGL	set	411
   816  019A                     _TXREG	set	410
   817  019E                     _TXSTA	set	414
   818  019E                     _TXSTAbits	set	414
   819  039B                     _ACTCONbits	set	923
   820                           
   821                           	psect	strings
   822  0018                     __pstrings:	
   823  0018                     __stringtab:	
   824  0018  3400               	retlw	0
   825  0019                     __end_of__stringtab:	
   826  0019                     __stringdata:	
   827  0019                     STR_7:	
   828  0019  3450               	retlw	80	;'P'
   829  001A  344F               	retlw	79	;'O'
   830  001B  3454               	retlw	84	;'T'
   831  001C  3445               	retlw	69	;'E'
   832  001D  344E               	retlw	78	;'N'
   833  001E  3454               	retlw	84	;'T'
   834  001F  3449               	retlw	73	;'I'
   835  0020  344F               	retlw	79	;'O'
   836  0021  3453               	retlw	83	;'S'
   837  0022  3454               	retlw	84	;'T'
   838  0023  3441               	retlw	65	;'A'
   839  0024  3454               	retlw	84	;'T'
   840  0025  3449               	retlw	73	;'I'
   841  0026  3443               	retlw	67	;'C'
   842  0027  3400               	retlw	0
   843  0028                     STR_20:	
   844  0028  3453               	retlw	83	;'S'
   845  0029  3448               	retlw	72	;'H'
   846  002A  3455               	retlw	85	;'U'
   847  002B  344E               	retlw	78	;'N'
   848  002C  3454               	retlw	84	;'T'
   849  002D  3443               	retlw	67	;'C'
   850  002E  3441               	retlw	65	;'A'
   851  002F  344C               	retlw	76	;'L'
   852  0030  3453               	retlw	83	;'S'
   853  0031  3441               	retlw	65	;'A'
   854  0032  3456               	retlw	86	;'V'
   855  0033  3445               	retlw	69	;'E'
   856  0034  3420               	retlw	32	;' '
   857  0035  3400               	retlw	0
   858  0036                     STR_8:	
   859  0036  3447               	retlw	71	;'G'
   860  0037  3441               	retlw	65	;'A'
   861  0038  344C               	retlw	76	;'L'
   862  0039  3456               	retlw	86	;'V'
   863  003A  3441               	retlw	65	;'A'
   864  003B  344E               	retlw	78	;'N'
   865  003C  344F               	retlw	79	;'O'
   866  003D  3453               	retlw	83	;'S'
   867  003E  3454               	retlw	84	;'T'
   868  003F  3441               	retlw	65	;'A'
   869  0040  3454               	retlw	84	;'T'
   870  0041  3449               	retlw	73	;'I'
   871  0042  3443               	retlw	67	;'C'
   872  0043  3400               	retlw	0
   873  0044                     STR_19:	
   874  0044  3453               	retlw	83	;'S'
   875  0045  3448               	retlw	72	;'H'
   876  0046  3455               	retlw	85	;'U'
   877  0047  344E               	retlw	78	;'N'
   878  0048  3454               	retlw	84	;'T'
   879  0049  3443               	retlw	67	;'C'
   880  004A  3441               	retlw	65	;'A'
   881  004B  344C               	retlw	76	;'L'
   882  004C  3452               	retlw	82	;'R'
   883  004D  3445               	retlw	69	;'E'
   884  004E  3441               	retlw	65	;'A'
   885  004F  3444               	retlw	68	;'D'
   886  0050  3400               	retlw	0
   887  0051                     STR_16:	
   888  0051  344F               	retlw	79	;'O'
   889  0052  3446               	retlw	70	;'F'
   890  0053  3446               	retlw	70	;'F'
   891  0054  3453               	retlw	83	;'S'
   892  0055  3445               	retlw	69	;'E'
   893  0056  3454               	retlw	84	;'T'
   894  0057  3453               	retlw	83	;'S'
   895  0058  3441               	retlw	65	;'A'
   896  0059  3456               	retlw	86	;'V'
   897  005A  3445               	retlw	69	;'E'
   898  005B  3420               	retlw	32	;' '
   899  005C  3400               	retlw	0
   900  005D                     STR_18:	
   901  005D  3444               	retlw	68	;'D'
   902  005E  3441               	retlw	65	;'A'
   903  005F  3443               	retlw	67	;'C'
   904  0060  3443               	retlw	67	;'C'
   905  0061  3441               	retlw	65	;'A'
   906  0062  344C               	retlw	76	;'L'
   907  0063  3453               	retlw	83	;'S'
   908  0064  3445               	retlw	69	;'E'
   909  0065  3454               	retlw	84	;'T'
   910  0066  3420               	retlw	32	;' '
   911  0067  3400               	retlw	0
   912  0068                     STR_15:	
   913  0068  344F               	retlw	79	;'O'
   914  0069  3446               	retlw	70	;'F'
   915  006A  3446               	retlw	70	;'F'
   916  006B  3453               	retlw	83	;'S'
   917  006C  3445               	retlw	69	;'E'
   918  006D  3454               	retlw	84	;'T'
   919  006E  3452               	retlw	82	;'R'
   920  006F  3445               	retlw	69	;'E'
   921  0070  3441               	retlw	65	;'A'
   922  0071  3444               	retlw	68	;'D'
   923  0072  3400               	retlw	0
   924  0073                     STR_17:	
   925  0073  3444               	retlw	68	;'D'
   926  0074  3441               	retlw	65	;'A'
   927  0075  3443               	retlw	67	;'C'
   928  0076  3443               	retlw	67	;'C'
   929  0077  3441               	retlw	65	;'A'
   930  0078  344C               	retlw	76	;'L'
   931  0079  3447               	retlw	71	;'G'
   932  007A  3445               	retlw	69	;'E'
   933  007B  3454               	retlw	84	;'T'
   934  007C  3400               	retlw	0
   935  007D                     STR_6:	
   936  007D  3443               	retlw	67	;'C'
   937  007E  3445               	retlw	69	;'E'
   938  007F  344C               	retlw	76	;'L'
   939  0080  344C               	retlw	76	;'L'
   940  0081  3420               	retlw	32	;' '
   941  0082  344F               	retlw	79	;'O'
   942  0083  3446               	retlw	70	;'F'
   943  0084  3446               	retlw	70	;'F'
   944  0085  3400               	retlw	0
   945  0086                     STR_1:	
   946  0086  3452               	retlw	82	;'R'
   947  0087  3465               	retlw	101	;'e'
   948  0088  3461               	retlw	97	;'a'
   949  0089  3464               	retlw	100	;'d'
   950  008A  3479               	retlw	121	;'y'
   951  008B  3421               	retlw	33	;'!'
   952  008C  340A               	retlw	10
   953  008D  3400               	retlw	0
   954  008E                     STR_12:	
   955  008E  3444               	retlw	68	;'D'
   956  008F  3441               	retlw	65	;'A'
   957  0090  3443               	retlw	67	;'C'
   958  0091  3453               	retlw	83	;'S'
   959  0092  3445               	retlw	69	;'E'
   960  0093  3454               	retlw	84	;'T'
   961  0094  3420               	retlw	32	;' '
   962  0095  3400               	retlw	0
   963  0096                     STR_9:	
   964  0096  3452               	retlw	82	;'R'
   965  0097  3441               	retlw	65	;'A'
   966  0098  344E               	retlw	78	;'N'
   967  0099  3447               	retlw	71	;'G'
   968  009A  3445               	retlw	69	;'E'
   969  009B  3420               	retlw	32	;' '
   970  009C  3431               	retlw	49	;'1'
   971  009D  3400               	retlw	0
   972  009E                     STR_10:	
   973  009E  3452               	retlw	82	;'R'
   974  009F  3441               	retlw	65	;'A'
   975  00A0  344E               	retlw	78	;'N'
   976  00A1  3447               	retlw	71	;'G'
   977  00A2  3445               	retlw	69	;'E'
   978  00A3  3420               	retlw	32	;' '
   979  00A4  3432               	retlw	50	;'2'
   980  00A5  3400               	retlw	0
   981  00A6                     STR_11:	
   982  00A6  3452               	retlw	82	;'R'
   983  00A7  3441               	retlw	65	;'A'
   984  00A8  344E               	retlw	78	;'N'
   985  00A9  3447               	retlw	71	;'G'
   986  00AA  3445               	retlw	69	;'E'
   987  00AB  3420               	retlw	32	;' '
   988  00AC  3433               	retlw	51	;'3'
   989  00AD  3400               	retlw	0
   990  00AE                     STR_14:	
   991  00AE  3441               	retlw	65	;'A'
   992  00AF  3444               	retlw	68	;'D'
   993  00B0  3443               	retlw	67	;'C'
   994  00B1  3452               	retlw	82	;'R'
   995  00B2  3445               	retlw	69	;'E'
   996  00B3  3441               	retlw	65	;'A'
   997  00B4  3444               	retlw	68	;'D'
   998  00B5  3400               	retlw	0
   999  00B6                     STR_5:	
  1000  00B6  3443               	retlw	67	;'C'
  1001  00B7  3445               	retlw	69	;'E'
  1002  00B8  344C               	retlw	76	;'L'
  1003  00B9  344C               	retlw	76	;'L'
  1004  00BA  3420               	retlw	32	;' '
  1005  00BB  344F               	retlw	79	;'O'
  1006  00BC  344E               	retlw	78	;'N'
  1007  00BD  3400               	retlw	0
  1008  00BE                     STR_13:	
  1009  00BE  3444               	retlw	68	;'D'
  1010  00BF  3441               	retlw	65	;'A'
  1011  00C0  3443               	retlw	67	;'C'
  1012  00C1  3443               	retlw	67	;'C'
  1013  00C2  3441               	retlw	65	;'A'
  1014  00C3  344C               	retlw	76	;'L'
  1015  00C4  3400               	retlw	0
  1016  00C5                     STR_4:	
  1017  00C5  3457               	retlw	87	;'W'
  1018  00C6  3441               	retlw	65	;'A'
  1019  00C7  3449               	retlw	73	;'I'
  1020  00C8  3454               	retlw	84	;'T'
  1021  00C9  340A               	retlw	10
  1022  00CA  3400               	retlw	0
  1023  00CB                     STR_3:	
  1024  00CB  344F               	retlw	79	;'O'
  1025  00CC  344B               	retlw	75	;'K'
  1026  00CD  340A               	retlw	10
  1027  00CE  3400               	retlw	0
  1028  00CF                     STR_2:	
  1029  00CF  343F               	retlw	63	;'?'
  1030  00D0  340A               	retlw	10
  1031  00D1  3400               	retlw	0
  1032  00D2                     __end_of__stringdata:	
  1033                           
  1034                           ; #config settings
  1035  0000                     
  1036                           	psect	cinit
  1037  000D                     start_initialization:	
  1038  000D                     __initialization:	
  1039                           
  1040                           ; Clear objects allocated to COMMON
  1041  000D  01FC               	clrf	__pbssCOMMON& (0+127)
  1042                           
  1043                           ; Clear objects allocated to BANK0
  1044  000E  3020               	movlw	low __pbssBANK0
  1045  000F  0084               	movwf	4
  1046  0010  3000               	movlw	high __pbssBANK0
  1047  0011  0085               	movwf	5
  1048  0012  303B               	movlw	59
  1049  0013  318F  2798         	fcall	clear_ram0
  1050  0015                     end_of_initialization:	
  1051                           ;End of C runtime variable initialization code
  1052                           
  1053  0015                     __end_of__initialization:	
  1054  0015  0020               	movlb	0
  1055  0016  3185  2D83         	ljmp	_main	;jump to C main() function
  1056                           
  1057                           	psect	bssCOMMON
  1058  007C                     __pbssCOMMON:	
  1059  007C                     _received_data_length:	
  1060  007C                     	ds	1
  1061                           
  1062                           	psect	bssBANK0
  1063  0020                     __pbssBANK0:	
  1064  0020                     _EUSART_ErrorHandler:	
  1065  0020                     	ds	1
  1066  0021                     _EUSART_FramingErrorHandler:	
  1067  0021                     	ds	1
  1068  0022                     _EUSART_OverrunErrorHandler:	
  1069  0022                     	ds	1
  1070  0023                     _eusartRxLastError:	
  1071  0023                     	ds	1
  1072  0024                     _received_data:	
  1073  0024                     	ds	1
  1074  0025                     _transmit_data:	
  1075  0025                     	ds	1
  1076  0026                     _transmit_data_length:	
  1077  0026                     	ds	1
  1078  0027                     _heflashbuffer:	
  1079  0027                     	ds	32
  1080  0047                     _uart_command:	
  1081  0047                     	ds	20
  1082                           
  1083                           	psect	clrtext
  1084  0F98                     clear_ram0:	
  1085                           ;	Called with FSR0 containing the base address, and
  1086                           ;	WREG with the size to clear
  1087                           
  1088  0F98  0064               	clrwdt	;clear the watchdog before getting into this loop
  1089  0F99                     clrloop0:	
  1090  0F99  0180               	clrf	0	;clear RAM location pointed to by FSR
  1091  0F9A  3101               	addfsr 0,1
  1092  0F9B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1093  0F9C  2F99               	goto	clrloop0	;have we reached the end yet?
  1094  0F9D  3400               	retlw	0	;all done for this memory range, return
  1095                           
  1096                           	psect	cstackCOMMON
  1097  0070                     __pcstackCOMMON:	
  1098  0070                     ?_SPIDelay:	
  1099  0070                     ?_WriteByteSPI:	
  1100                           ; 0 bytes @ 0x0
  1101                           
  1102  0070                     ?_ClockPulse:	
  1103                           ; 0 bytes @ 0x0
  1104                           
  1105  0070                     ?_EUSART_Initialize:	
  1106                           ; 0 bytes @ 0x0
  1107                           
  1108  0070                     ?_EUSART_Write:	
  1109                           ; 0 bytes @ 0x0
  1110                           
  1111  0070                     ?_EUSART_SetFramingErrorHandler:	
  1112                           ; 0 bytes @ 0x0
  1113                           
  1114  0070                     ?_EUSART_SetOverrunErrorHandler:	
  1115                           ; 0 bytes @ 0x0
  1116                           
  1117  0070                     ?_EUSART_SetErrorHandler:	
  1118                           ; 0 bytes @ 0x0
  1119                           
  1120  0070                     ?__unlock:	
  1121                           ; 0 bytes @ 0x0
  1122                           
  1123  0070                     ?_InitializeSPI:	
  1124                           ; 0 bytes @ 0x0
  1125                           
  1126  0070                     ?_DAC1220_Reset:	
  1127                           ; 0 bytes @ 0x0
  1128                           
  1129  0070                     ?_DAC1220_Init:	
  1130                           ; 0 bytes @ 0x0
  1131                           
  1132  0070                     ?_DAC1220_SelfCal:	
  1133                           ; 0 bytes @ 0x0
  1134                           
  1135  0070                     ?_InitializeIO:	
  1136                           ; 0 bytes @ 0x0
  1137                           
  1138  0070                     ?_command_unknown:	
  1139                           ; 0 bytes @ 0x0
  1140                           
  1141  0070                     ?_send_OK:	
  1142                           ; 0 bytes @ 0x0
  1143                           
  1144  0070                     ?_send_WAIT:	
  1145                           ; 0 bytes @ 0x0
  1146                           
  1147  0070                     ?_command_cell_on:	
  1148                           ; 0 bytes @ 0x0
  1149                           
  1150  0070                     ?_command_cell_off:	
  1151                           ; 0 bytes @ 0x0
  1152                           
  1153  0070                     ?_command_mode_potentiostatic:	
  1154                           ; 0 bytes @ 0x0
  1155                           
  1156  0070                     ?_command_mode_galvanostatic:	
  1157                           ; 0 bytes @ 0x0
  1158                           
  1159  0070                     ?_command_range1:	
  1160                           ; 0 bytes @ 0x0
  1161                           
  1162  0070                     ?_command_range2:	
  1163                           ; 0 bytes @ 0x0
  1164                           
  1165  0070                     ?_command_range3:	
  1166                           ; 0 bytes @ 0x0
  1167                           
  1168  0070                     ?_command_set_dac:	
  1169                           ; 0 bytes @ 0x0
  1170                           
  1171  0070                     ?_command_calibrate_dac:	
  1172                           ; 0 bytes @ 0x0
  1173                           
  1174  0070                     ?_command_read_adc:	
  1175                           ; 0 bytes @ 0x0
  1176                           
  1177  0070                     ?_command_read_offset:	
  1178                           ; 0 bytes @ 0x0
  1179                           
  1180  0070                     ?_command_save_offset:	
  1181                           ; 0 bytes @ 0x0
  1182                           
  1183  0070                     ?_command_read_shuntcalibration:	
  1184                           ; 0 bytes @ 0x0
  1185                           
  1186  0070                     ?_command_save_shuntcalibration:	
  1187                           ; 0 bytes @ 0x0
  1188                           
  1189  0070                     ?_command_read_dac_cal:	
  1190                           ; 0 bytes @ 0x0
  1191                           
  1192  0070                     ?_command_set_dac_cal:	
  1193                           ; 0 bytes @ 0x0
  1194                           
  1195  0070                     ?_interpret_command:	
  1196                           ; 0 bytes @ 0x0
  1197                           
  1198  0070                     ?_isr:	
  1199                           ; 0 bytes @ 0x0
  1200                           
  1201  0070                     ??_isr:	
  1202                           ; 0 bytes @ 0x0
  1203                           
  1204  0070                     ?_ReadByteSPI:	
  1205                           ; 0 bytes @ 0x0
  1206                           
  1207  0070                     ?_EUSART_is_rx_ready:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0070                     ?_EUSART_Read:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0070                     ?_MCP3550_Read:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0070                     ?_main:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219                           
  1220                           ; 2 bytes @ 0x0
  1221  0070                     	ds	1
  1222  0071                     ??_SPIDelay:	
  1223  0071                     ??_EUSART_Write:	
  1224                           ; 0 bytes @ 0x1
  1225                           
  1226  0071                     ??_EUSART_is_rx_ready:	
  1227                           ; 0 bytes @ 0x1
  1228                           
  1229  0071                     ??_EUSART_Read:	
  1230                           ; 0 bytes @ 0x1
  1231                           
  1232  0071                     ??_EUSART_SetFramingErrorHandler:	
  1233                           ; 0 bytes @ 0x1
  1234                           
  1235  0071                     ??_EUSART_SetOverrunErrorHandler:	
  1236                           ; 0 bytes @ 0x1
  1237                           
  1238  0071                     ??_EUSART_SetErrorHandler:	
  1239                           ; 0 bytes @ 0x1
  1240                           
  1241  0071                     ??__unlock:	
  1242                           ; 0 bytes @ 0x1
  1243                           
  1244  0071                     ?_FLASH_write:	
  1245                           ; 0 bytes @ 0x1
  1246                           
  1247  0071                     ?_FLASH_erase:	
  1248                           ; 0 bytes @ 0x1
  1249                           
  1250  0071                     ??_InitializeSPI:	
  1251                           ; 0 bytes @ 0x1
  1252                           
  1253  0071                     ?_memcpy:	
  1254                           ; 0 bytes @ 0x1
  1255                           
  1256  0071                     ?_strlen:	
  1257                           ; 1 bytes @ 0x1
  1258                           
  1259  0071                     ?_strncmp:	
  1260                           ; 2 bytes @ 0x1
  1261                           
  1262  0071                     ?_FLASH_read:	
  1263                           ; 2 bytes @ 0x1
  1264                           
  1265  0071                     EUSART_Write@txData:	
  1266                           ; 2 bytes @ 0x1
  1267                           
  1268  0071                     memcpy@s1:	
  1269                           ; 1 bytes @ 0x1
  1270                           
  1271  0071                     FLASH_read@address:	
  1272                           ; 1 bytes @ 0x1
  1273                           
  1274  0071                     FLASH_write@address:	
  1275                           ; 2 bytes @ 0x1
  1276                           
  1277  0071                     FLASH_erase@address:	
  1278                           ; 2 bytes @ 0x1
  1279                           
  1280  0071                     strncmp@s1:	
  1281                           ; 2 bytes @ 0x1
  1282                           
  1283                           
  1284                           ; 2 bytes @ 0x1
  1285  0071                     	ds	1
  1286  0072                     ?_Read2BytesSPI:	
  1287  0072                     ??_WriteByteSPI:	
  1288                           ; 0 bytes @ 0x2
  1289                           
  1290  0072                     ??_ReadByteSPI:	
  1291                           ; 0 bytes @ 0x2
  1292                           
  1293  0072                     ??_ClockPulse:	
  1294                           ; 0 bytes @ 0x2
  1295                           
  1296  0072                     ??_DAC1220_Reset:	
  1297                           ; 0 bytes @ 0x2
  1298                           
  1299  0072                     Read2BytesSPI@data2_byte:	
  1300                           ; 0 bytes @ 0x2
  1301                           
  1302  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1303                           ; 1 bytes @ 0x2
  1304                           
  1305  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1306                           ; 1 bytes @ 0x2
  1307                           
  1308  0072                     EUSART_SetErrorHandler@interruptHandler:	
  1309                           ; 1 bytes @ 0x2
  1310                           
  1311  0072                     memcpy@n:	
  1312                           ; 1 bytes @ 0x2
  1313                           
  1314                           
  1315                           ; 2 bytes @ 0x2
  1316  0072                     	ds	1
  1317  0073                     ??_Read2BytesSPI:	
  1318  0073                     ??_EUSART_Initialize:	
  1319                           ; 0 bytes @ 0x3
  1320                           
  1321  0073                     ??_strlen:	
  1322                           ; 0 bytes @ 0x3
  1323                           
  1324  0073                     ??_FLASH_read:	
  1325                           ; 0 bytes @ 0x3
  1326                           
  1327  0073                     ??_FLASH_erase:	
  1328                           ; 0 bytes @ 0x3
  1329                           
  1330  0073                     ?_HEFLASH_readBlock:	
  1331                           ; 0 bytes @ 0x3
  1332                           
  1333  0073                     FLASH_erase@temp:	
  1334                           ; 1 bytes @ 0x3
  1335                           
  1336  0073                     HEFLASH_readBlock@radd:	
  1337                           ; 1 bytes @ 0x3
  1338                           
  1339  0073                     ReadByteSPI@bit_counter:	
  1340                           ; 1 bytes @ 0x3
  1341                           
  1342  0073                     WriteByteSPI@data_byte:	
  1343                           ; 1 bytes @ 0x3
  1344                           
  1345  0073                     strncmp@s2:	
  1346                           ; 1 bytes @ 0x3
  1347                           
  1348  0073                     FLASH_write@data:	
  1349                           ; 1 bytes @ 0x3
  1350                           
  1351                           
  1352                           ; 2 bytes @ 0x3
  1353  0073                     	ds	1
  1354  0074                     ??_memcpy:	
  1355  0074                     HEFLASH_readBlock@count:	
  1356                           ; 0 bytes @ 0x4
  1357                           
  1358  0074                     Read2BytesSPI@bit_counter:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361  0074                     ReadByteSPI@data_byte:	
  1362                           ; 1 bytes @ 0x4
  1363                           
  1364  0074                     WriteByteSPI@bit_counter:	
  1365                           ; 1 bytes @ 0x4
  1366                           
  1367  0074                     strncmp@len:	
  1368                           ; 1 bytes @ 0x4
  1369                           
  1370                           
  1371                           ; 2 bytes @ 0x4
  1372  0074                     	ds	1
  1373  0075                     ??_HEFLASH_readBlock:	
  1374  0075                     ?_DAC1220_Write2Bytes:	
  1375                           ; 0 bytes @ 0x5
  1376                           
  1377  0075                     ?_DAC1220_Write3Bytes:	
  1378                           ; 0 bytes @ 0x5
  1379                           
  1380  0075                     ?_DAC1220_Read3Bytes:	
  1381                           ; 0 bytes @ 0x5
  1382                           
  1383  0075                     FLASH_write@latch:	
  1384                           ; 0 bytes @ 0x5
  1385                           
  1386  0075                     DAC1220_Write2Bytes@byte1:	
  1387                           ; 1 bytes @ 0x5
  1388                           
  1389  0075                     DAC1220_Write3Bytes@byte1:	
  1390                           ; 1 bytes @ 0x5
  1391                           
  1392  0075                     DAC1220_Read3Bytes@byte1:	
  1393                           ; 1 bytes @ 0x5
  1394                           
  1395  0075                     Read2BytesSPI@data1_byte:	
  1396                           ; 1 bytes @ 0x5
  1397                           
  1398  0075                     memcpy@d1:	
  1399                           ; 1 bytes @ 0x5
  1400                           
  1401                           
  1402                           ; 1 bytes @ 0x5
  1403  0075                     	ds	1
  1404  0076                     ??_strncmp:	
  1405  0076                     ??_FLASH_write:	
  1406                           ; 0 bytes @ 0x6
  1407                           
  1408  0076                     ??_MCP3550_Read:	
  1409                           ; 0 bytes @ 0x6
  1410                           
  1411  0076                     FLASH_write@temp:	
  1412                           ; 0 bytes @ 0x6
  1413                           
  1414  0076                     DAC1220_Write2Bytes@byte2:	
  1415                           ; 1 bytes @ 0x6
  1416                           
  1417  0076                     DAC1220_Write3Bytes@byte2:	
  1418                           ; 1 bytes @ 0x6
  1419                           
  1420  0076                     DAC1220_Read3Bytes@byte2:	
  1421                           ; 1 bytes @ 0x6
  1422                           
  1423  0076                     memcpy@d:	
  1424                           ; 1 bytes @ 0x6
  1425                           
  1426                           
  1427                           ; 1 bytes @ 0x6
  1428  0076                     	ds	1
  1429  0077                     ??_DAC1220_Write2Bytes:	
  1430  0077                     ?_HEFLASH_writeBlock:	
  1431                           ; 0 bytes @ 0x7
  1432                           
  1433  0077                     HEFLASH_readBlock@buffer:	
  1434                           ; 1 bytes @ 0x7
  1435                           
  1436  0077                     MCP3550_Read@data_ready:	
  1437                           ; 1 bytes @ 0x7
  1438                           
  1439  0077                     DAC1220_Write2Bytes@address:	
  1440                           ; 1 bytes @ 0x7
  1441                           
  1442  0077                     DAC1220_Write3Bytes@byte3:	
  1443                           ; 1 bytes @ 0x7
  1444                           
  1445  0077                     DAC1220_Read3Bytes@byte3:	
  1446                           ; 1 bytes @ 0x7
  1447                           
  1448  0077                     memcpy@s:	
  1449                           ; 1 bytes @ 0x7
  1450                           
  1451  0077                     strlen@s:	
  1452                           ; 1 bytes @ 0x7
  1453                           
  1454  0077                     HEFLASH_writeBlock@data:	
  1455                           ; 1 bytes @ 0x7
  1456                           
  1457                           
  1458                           ; 2 bytes @ 0x7
  1459  0077                     	ds	1
  1460  0078                     ??_DAC1220_Write3Bytes:	
  1461  0078                     ??_DAC1220_Read3Bytes:	
  1462                           ; 0 bytes @ 0x8
  1463                           
  1464  0078                     ??_DAC1220_SelfCal:	
  1465                           ; 0 bytes @ 0x8
  1466                           
  1467  0078                     MCP3550_Read@adc_data:	
  1468                           ; 0 bytes @ 0x8
  1469                           
  1470  0078                     DAC1220_Write3Bytes@address:	
  1471                           ; 1 bytes @ 0x8
  1472                           
  1473  0078                     strlen@cp:	
  1474                           ; 1 bytes @ 0x8
  1475                           
  1476  0078                     HEFLASH_readBlock@add:	
  1477                           ; 1 bytes @ 0x8
  1478                           
  1479                           
  1480                           ; 2 bytes @ 0x8
  1481  0078                     	ds	1
  1482  0079                     ?_USART_Send:	
  1483  0079                     ??_DAC1220_Init:	
  1484                           ; 0 bytes @ 0x9
  1485                           
  1486  0079                     HEFLASH_writeBlock@count:	
  1487                           ; 0 bytes @ 0x9
  1488                           
  1489  0079                     DAC1220_Read3Bytes@address:	
  1490                           ; 1 bytes @ 0x9
  1491                           
  1492  0079                     USART_Send@dataLength:	
  1493                           ; 1 bytes @ 0x9
  1494                           
  1495                           
  1496                           ; 1 bytes @ 0x9
  1497  0079                     	ds	1
  1498  007A                     ??_USART_Send:	
  1499  007A                     ??_HEFLASH_writeBlock:	
  1500                           ; 0 bytes @ 0xA
  1501                           
  1502                           
  1503                           ; 0 bytes @ 0xA
  1504  007A                     	ds	1
  1505  007B                     ??_command_unknown:	
  1506  007B                     ??_send_OK:	
  1507                           ; 0 bytes @ 0xB
  1508                           
  1509  007B                     ??_send_WAIT:	
  1510                           ; 0 bytes @ 0xB
  1511                           
  1512  007B                     InitializeIO@startReply:	
  1513                           ; 0 bytes @ 0xB
  1514                           
  1515                           
  1516                           ; 1 bytes @ 0xB
  1517  007B                     	ds	1
  1518  007C                     ??_command_cell_on:	
  1519  007C                     ??_command_cell_off:	
  1520                           ; 0 bytes @ 0xC
  1521                           
  1522  007C                     ??_command_mode_potentiostatic:	
  1523                           ; 0 bytes @ 0xC
  1524                           
  1525  007C                     ??_command_mode_galvanostatic:	
  1526                           ; 0 bytes @ 0xC
  1527                           
  1528                           
  1529                           	psect	cstackBANK0
  1530  005B                     __pcstackBANK0:	
  1531                           ; 0 bytes @ 0xC
  1532                           
  1533  005B                     ??_command_read_offset:	
  1534  005B                     ??_command_read_shuntcalibration:	
  1535                           ; 0 bytes @ 0x0
  1536                           
  1537  005B                     ??_command_read_dac_cal:	
  1538                           ; 0 bytes @ 0x0
  1539                           
  1540  005B                     HEFLASH_writeBlock@radd:	
  1541                           ; 0 bytes @ 0x0
  1542                           
  1543  005B                     USART_Send@dataToSend:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546                           
  1547                           ; 1 bytes @ 0x0
  1548  005B                     	ds	1
  1549  005C                     USART_Send@i:	
  1550  005C                     HEFLASH_writeBlock@add:	
  1551                           ; 1 bytes @ 0x1
  1552                           
  1553                           
  1554                           ; 2 bytes @ 0x1
  1555  005C                     	ds	1
  1556  005D                     ??_InitializeIO:	
  1557  005D                     command_unknown@reply:	
  1558                           ; 0 bytes @ 0x2
  1559                           
  1560  005D                     send_OK@reply:	
  1561                           ; 1 bytes @ 0x2
  1562                           
  1563  005D                     send_WAIT@reply:	
  1564                           ; 1 bytes @ 0x2
  1565                           
  1566                           
  1567                           ; 1 bytes @ 0x2
  1568  005D                     	ds	1
  1569  005E                     ??_command_range1:	
  1570  005E                     ??_command_range2:	
  1571                           ; 0 bytes @ 0x3
  1572                           
  1573  005E                     ??_command_range3:	
  1574                           ; 0 bytes @ 0x3
  1575                           
  1576  005E                     ??_command_set_dac:	
  1577                           ; 0 bytes @ 0x3
  1578                           
  1579  005E                     ??_command_calibrate_dac:	
  1580                           ; 0 bytes @ 0x3
  1581                           
  1582  005E                     ??_command_read_adc:	
  1583                           ; 0 bytes @ 0x3
  1584                           
  1585  005E                     ??_command_save_offset:	
  1586                           ; 0 bytes @ 0x3
  1587                           
  1588  005E                     ??_command_save_shuntcalibration:	
  1589                           ; 0 bytes @ 0x3
  1590                           
  1591  005E                     ??_command_set_dac_cal:	
  1592                           ; 0 bytes @ 0x3
  1593                           
  1594                           
  1595                           ; 0 bytes @ 0x3
  1596  005E                     	ds	1
  1597  005F                     command_save_offset@offset_data:	
  1598  005F                     command_save_shuntcalibration@shuntcalibration_data:	
  1599                           ; 1 bytes @ 0x4
  1600                           
  1601  005F                     command_read_adc@adc_data:	
  1602                           ; 1 bytes @ 0x4
  1603                           
  1604                           
  1605                           ; 6 bytes @ 0x4
  1606  005F                     	ds	2
  1607  0061                     command_set_dac@dac_data:	
  1608  0061                     command_set_dac_cal@dac_cal_data:	
  1609                           ; 1 bytes @ 0x6
  1610                           
  1611  0061                     command_calibrate_dac@data:	
  1612                           ; 1 bytes @ 0x6
  1613                           
  1614                           
  1615                           ; 6 bytes @ 0x6
  1616  0061                     	ds	4
  1617  0065                     command_read_adc@i:	
  1618                           
  1619                           ; 1 bytes @ 0xA
  1620  0065                     	ds	2
  1621  0067                     ??_interpret_command:	
  1622                           
  1623                           ; 0 bytes @ 0xC
  1624  0067                     	ds	1
  1625  0068                     ??_main:	
  1626                           
  1627                           ; 0 bytes @ 0xD
  1628  0068                     	ds	1
  1629  0069                     main@c:	
  1630                           
  1631                           ; 1 bytes @ 0xE
  1632  0069                     	ds	1
  1633  006A                     main@i:	
  1634                           
  1635                           ; 1 bytes @ 0xF
  1636  006A                     	ds	1
  1637                           
  1638                           	psect	maintext
  1639  0583                     __pmaintext:	
  1640 ;;
  1641 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1642 ;;
  1643 ;; *************** function _main *****************
  1644 ;; Defined at:
  1645 ;;		line 300 in file "main.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;		None
  1648 ;; Auto vars:     Size  Location     Type
  1649 ;;  i               1   15[BANK0 ] unsigned char 
  1650 ;;  c               1   14[BANK0 ] unsigned char 
  1651 ;; Return value:  Size  Location     Type
  1652 ;;                  2  310[COMMON] int 
  1653 ;; Registers used:
  1654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1655 ;; Tracked objects:
  1656 ;;		On entry : 17F/0
  1657 ;;		On exit  : 0/0
  1658 ;;		Unchanged: 0/0
  1659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1663 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1664 ;;Total ram usage:        3 bytes
  1665 ;; Hardware stack levels required when called:    8
  1666 ;; This function calls:
  1667 ;;		_InitializeIO
  1668 ;;		_interpret_command
  1669 ;;		_EUSART_is_rx_ready
  1670 ;;		_EUSART_Read
  1671 ;; This function is called by:
  1672 ;;		Startup code after reset
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _main
  1678  0583                     _main:	
  1679                           
  1680                           ;main.c: 301: InitializeIO();
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1684  0583  3182  22C2  3185   	fcall	_InitializeIO
  1685                           
  1686                           ;main.c: 305: ACTCONbits.ACTSRC = 1;
  1687  0586  0027               	movlb	7	; select bank7
  1688  0587  161B               	bsf	27,4	;volatile
  1689                           
  1690                           ;main.c: 306: ACTCONbits.ACTEN = 1;
  1691  0588  179B               	bsf	27,7	;volatile
  1692                           
  1693                           ;main.c: 309: INTCONbits.PEIE = 1;
  1694  0589  170B               	bsf	11,6	;volatile
  1695                           
  1696                           ;main.c: 310: INTCONbits.GIE = 1;
  1697  058A  178B               	bsf	11,7	;volatile
  1698  058B                     l2748:	
  1699                           ;main.c: 315: while (1)
  1700                           
  1701                           
  1702                           ;main.c: 316: {
  1703                           ;main.c: 331: if(EUSART_is_rx_ready()){
  1704  058B  318F  278D  3185   	fcall	_EUSART_is_rx_ready
  1705  058E  3A00               	xorlw	0
  1706  058F  1903               	skipnz
  1707  0590  2D8B               	goto	l2748
  1708                           
  1709                           ;main.c: 332: uint8_t i=0;
  1710  0591  0020               	movlb	0	; select bank0
  1711  0592  01EA               	clrf	main@i
  1712  0593                     l2756:	
  1713                           ;main.c: 333: uint8_t c;
  1714                           ;main.c: 334: while((c=EUSART_Read())!='\n'){
  1715                           
  1716  0593  318F  27C6  3185   	fcall	_EUSART_Read
  1717  0596  0020               	movlb	0	; select bank0
  1718  0597  00E8               	movwf	??_main
  1719  0598  0868               	movf	??_main,w
  1720  0599  00E9               	movwf	main@c
  1721  059A  0869               	movf	main@c,w
  1722  059B  3A0A               	xorlw	10
  1723  059C  1903               	btfsc	3,2
  1724  059D  2DAB               	goto	l2758
  1725                           
  1726                           ;main.c: 335: uart_command[i]=c;
  1727  059E  0869               	movf	main@c,w
  1728  059F  00E8               	movwf	??_main
  1729  05A0  086A               	movf	main@i,w
  1730  05A1  3E47               	addlw	_uart_command& (0+255)
  1731  05A2  0086               	movwf	6
  1732  05A3  0187               	clrf	7
  1733  05A4  0868               	movf	??_main,w
  1734  05A5  0081               	movwf	1
  1735                           
  1736                           ;main.c: 336: i++;
  1737  05A6  3001               	movlw	1
  1738  05A7  00E8               	movwf	??_main
  1739  05A8  0868               	movf	??_main,w
  1740  05A9  07EA               	addwf	main@i,f
  1741  05AA  2D93               	goto	l2756
  1742  05AB                     l2758:	
  1743                           
  1744                           ;main.c: 337: }
  1745                           ;main.c: 338: received_data_length=i;
  1746  05AB  086A               	movf	main@i,w
  1747  05AC  00E8               	movwf	??_main
  1748  05AD  0868               	movf	??_main,w
  1749  05AE  00FC               	movwf	_received_data_length
  1750                           
  1751                           ;main.c: 339: interpret_command();
  1752  05AF  3181  2103  3185   	fcall	_interpret_command
  1753  05B2  2D8B               	goto	l2748
  1754  05B3                     __end_of_main:	
  1755                           ;main.c: 340: }
  1756                           ;main.c: 342: }
  1757                           ;main.c: 344: return 0;
  1758                           ;	Return value of _main is never used
  1759                           
  1760                           
  1761                           	psect	text1
  1762  0FC6                     __ptext1:	
  1763 ;; *************** function _EUSART_Read *****************
  1764 ;; Defined at:
  1765 ;;		line 114 in file "eusart.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      unsigned char 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1783 ;;Total ram usage:        0 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    1
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _EUSART_Read
  1795  0FC6                     _EUSART_Read:	
  1796  0FC6                     l381:	
  1797                           ;eusart.c: 116: {
  1798                           
  1799                           ;eusart.c: 115: while(!PIR1bits.RCIF)
  1800                           
  1801                           ;incstack = 0
  1802                           ; Regs used in _EUSART_Read: [wreg+status,2]
  1803                           
  1804  0FC6  0020               	movlb	0	; select bank0
  1805  0FC7  1E91               	btfss	17,5	;volatile
  1806  0FC8  2FC6               	goto	l381
  1807                           
  1808                           ;eusart.c: 117: }
  1809                           ;eusart.c: 119: eusartRxLastError.status = 0;
  1810  0FC9  01A3               	clrf	_eusartRxLastError	;volatile
  1811                           
  1812                           ;eusart.c: 121: if(1 == RCSTAbits.OERR)
  1813  0FCA  0023               	movlb	3	; select bank3
  1814  0FCB  1C9D               	btfss	29,1	;volatile
  1815  0FCC  2FCF               	goto	l2198
  1816                           
  1817                           ;eusart.c: 122: {
  1818                           ;eusart.c: 125: RCSTAbits.CREN = 0;
  1819  0FCD  121D               	bcf	29,4	;volatile
  1820                           
  1821                           ;eusart.c: 126: RCSTAbits.CREN = 1;
  1822  0FCE  161D               	bsf	29,4	;volatile
  1823  0FCF                     l2198:	
  1824                           
  1825                           ;eusart.c: 127: }
  1826                           ;eusart.c: 129: return RCREG;
  1827  0FCF  0819               	movf	25,w	;volatile
  1828  0FD0  0008               	return
  1829  0FD1                     __end_of_EUSART_Read:	
  1830                           
  1831                           	psect	text2
  1832  0F8D                     __ptext2:	
  1833 ;; *************** function _EUSART_is_rx_ready *****************
  1834 ;; Defined at:
  1835 ;;		line 100 in file "eusart.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;		None
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;		None
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      unsigned char 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1853 ;;Total ram usage:        0 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    1
  1856 ;; This function calls:
  1857 ;;		Nothing
  1858 ;; This function is called by:
  1859 ;;		_main
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           
  1864                           ;psect for function _EUSART_is_rx_ready
  1865  0F8D                     _EUSART_is_rx_ready:	
  1866                           
  1867                           ;eusart.c: 101: return (bool)(PIR1bits.RCIF);
  1868                           
  1869                           ;incstack = 0
  1870                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  1871  0F8D  0020               	movlb	0	; select bank0
  1872  0F8E  0E11               	swapf	17,w	;volatile
  1873  0F8F  0C89               	rrf	9,f
  1874  0F90  3901               	andlw	1
  1875  0F91  0008               	return
  1876  0F92                     __end_of_EUSART_is_rx_ready:	
  1877                           
  1878                           	psect	text3
  1879  0103                     __ptext3:	
  1880 ;; *************** function _interpret_command *****************
  1881 ;; Defined at:
  1882 ;;		line 261 in file "main.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;		None
  1887 ;; Return value:  Size  Location     Type
  1888 ;;		None               void
  1889 ;; Registers used:
  1890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1898 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1900 ;;Total ram usage:        1 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    7
  1903 ;; This function calls:
  1904 ;;		_command_unknown
  1905 ;;		_command_cell_on
  1906 ;;		_command_cell_off
  1907 ;;		_command_mode_potentiostatic
  1908 ;;		_command_mode_galvanostatic
  1909 ;;		_command_range1
  1910 ;;		_command_range2
  1911 ;;		_command_range3
  1912 ;;		_command_set_dac
  1913 ;;		_command_calibrate_dac
  1914 ;;		_command_read_adc
  1915 ;;		_command_read_offset
  1916 ;;		_command_save_offset
  1917 ;;		_command_read_shuntcalibration
  1918 ;;		_command_save_shuntcalibration
  1919 ;;		_command_read_dac_cal
  1920 ;;		_command_set_dac_cal
  1921 ;;		_strncmp
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function _interpret_command
  1929  0103                     _interpret_command:	
  1930                           
  1931                           ;main.c: 262: if (received_data_length == 7 && strncmp(uart_command,"CELL ON",7) == 0)
  1932                           
  1933                           ;incstack = 0
  1934                           ; Regs used in _interpret_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1935  0103  087C               	movf	_received_data_length,w
  1936  0104  3A07               	xorlw	7
  1937  0105  1D03               	skipz
  1938  0106  291E               	goto	l2646
  1939  0107  3047               	movlw	low _uart_command
  1940  0108  00F1               	movwf	?_strncmp
  1941  0109  3000               	movlw	high _uart_command
  1942  010A  00F2               	movwf	?_strncmp+1
  1943  010B  30B6               	movlw	(STR_5| (0+32768))& (0+255)
  1944  010C  0020               	movlb	0	; select bank0
  1945  010D  00E7               	movwf	??_interpret_command
  1946  010E  0867               	movf	??_interpret_command,w
  1947  010F  00F3               	movwf	?_strncmp+2
  1948  0110  3007               	movlw	7
  1949  0111  00F4               	movwf	?_strncmp+3
  1950  0112  3000               	movlw	0
  1951  0113  00F5               	movwf	?_strncmp+4
  1952  0114  3183  23EB  3181   	fcall	_strncmp
  1953  0117  0872               	movf	?_strncmp+1,w
  1954  0118  0471               	iorwf	?_strncmp,w
  1955  0119  1D03               	skipz
  1956  011A  291E               	goto	l2646
  1957                           
  1958                           ;main.c: 263: command_cell_on();
  1959  011B  318F  2779         	fcall	_command_cell_on
  1960  011D  0008               	return
  1961  011E                     l2646:	
  1962                           
  1963                           ;main.c: 264: else if (received_data_length == 8 && strncmp(uart_command,"CELL OFF",8) =
      +                          = 0)
  1964  011E  087C               	movf	_received_data_length,w
  1965  011F  3A08               	xorlw	8
  1966  0120  1D03               	skipz
  1967  0121  2939               	goto	l2652
  1968  0122  3047               	movlw	low _uart_command
  1969  0123  00F1               	movwf	?_strncmp
  1970  0124  3000               	movlw	high _uart_command
  1971  0125  00F2               	movwf	?_strncmp+1
  1972  0126  307D               	movlw	(STR_6| (0+32768))& (0+255)
  1973  0127  0020               	movlb	0	; select bank0
  1974  0128  00E7               	movwf	??_interpret_command
  1975  0129  0867               	movf	??_interpret_command,w
  1976  012A  00F3               	movwf	?_strncmp+2
  1977  012B  3008               	movlw	8
  1978  012C  00F4               	movwf	?_strncmp+3
  1979  012D  3000               	movlw	0
  1980  012E  00F5               	movwf	?_strncmp+4
  1981  012F  3183  23EB  3181   	fcall	_strncmp
  1982  0132  0872               	movf	?_strncmp+1,w
  1983  0133  0471               	iorwf	?_strncmp,w
  1984  0134  1D03               	skipz
  1985  0135  2939               	goto	l2652
  1986                           
  1987                           ;main.c: 265: command_cell_off();
  1988  0136  318F  277E         	fcall	_command_cell_off
  1989  0138  0008               	return
  1990  0139                     l2652:	
  1991                           
  1992                           ;main.c: 266: else if (received_data_length == 14 && strncmp(uart_command,"POTENTIOSTATI
      +                          C",14) == 0)
  1993  0139  087C               	movf	_received_data_length,w
  1994  013A  3A0E               	xorlw	14
  1995  013B  1D03               	skipz
  1996  013C  2954               	goto	l2658
  1997  013D  3047               	movlw	low _uart_command
  1998  013E  00F1               	movwf	?_strncmp
  1999  013F  3000               	movlw	high _uart_command
  2000  0140  00F2               	movwf	?_strncmp+1
  2001  0141  3019               	movlw	(STR_7| (0+32768))& (0+255)
  2002  0142  0020               	movlb	0	; select bank0
  2003  0143  00E7               	movwf	??_interpret_command
  2004  0144  0867               	movf	??_interpret_command,w
  2005  0145  00F3               	movwf	?_strncmp+2
  2006  0146  300E               	movlw	14
  2007  0147  00F4               	movwf	?_strncmp+3
  2008  0148  3000               	movlw	0
  2009  0149  00F5               	movwf	?_strncmp+4
  2010  014A  3183  23EB  3181   	fcall	_strncmp
  2011  014D  0872               	movf	?_strncmp+1,w
  2012  014E  0471               	iorwf	?_strncmp,w
  2013  014F  1D03               	skipz
  2014  0150  2954               	goto	l2658
  2015                           
  2016                           ;main.c: 267: command_mode_potentiostatic();
  2017  0151  318F  2783         	fcall	_command_mode_potentiostatic
  2018  0153  0008               	return
  2019  0154                     l2658:	
  2020                           
  2021                           ;main.c: 268: else if (received_data_length == 13 && strncmp(uart_command,"GALVANOSTATIC
      +                          ",13) == 0)
  2022  0154  087C               	movf	_received_data_length,w
  2023  0155  3A0D               	xorlw	13
  2024  0156  1D03               	skipz
  2025  0157  296F               	goto	l2664
  2026  0158  3047               	movlw	low _uart_command
  2027  0159  00F1               	movwf	?_strncmp
  2028  015A  3000               	movlw	high _uart_command
  2029  015B  00F2               	movwf	?_strncmp+1
  2030  015C  3036               	movlw	(STR_8| (0+32768))& (0+255)
  2031  015D  0020               	movlb	0	; select bank0
  2032  015E  00E7               	movwf	??_interpret_command
  2033  015F  0867               	movf	??_interpret_command,w
  2034  0160  00F3               	movwf	?_strncmp+2
  2035  0161  300D               	movlw	13
  2036  0162  00F4               	movwf	?_strncmp+3
  2037  0163  3000               	movlw	0
  2038  0164  00F5               	movwf	?_strncmp+4
  2039  0165  3183  23EB  3181   	fcall	_strncmp
  2040  0168  0872               	movf	?_strncmp+1,w
  2041  0169  0471               	iorwf	?_strncmp,w
  2042  016A  1D03               	skipz
  2043  016B  296F               	goto	l2664
  2044                           
  2045                           ;main.c: 269: command_mode_galvanostatic();
  2046  016C  318F  2788         	fcall	_command_mode_galvanostatic
  2047  016E  0008               	return
  2048  016F                     l2664:	
  2049                           
  2050                           ;main.c: 270: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 1",7) ==
      +                           0)
  2051  016F  087C               	movf	_received_data_length,w
  2052  0170  3A07               	xorlw	7
  2053  0171  1D03               	skipz
  2054  0172  298A               	goto	l2670
  2055  0173  3047               	movlw	low _uart_command
  2056  0174  00F1               	movwf	?_strncmp
  2057  0175  3000               	movlw	high _uart_command
  2058  0176  00F2               	movwf	?_strncmp+1
  2059  0177  3096               	movlw	(STR_9| (0+32768))& (0+255)
  2060  0178  0020               	movlb	0	; select bank0
  2061  0179  00E7               	movwf	??_interpret_command
  2062  017A  0867               	movf	??_interpret_command,w
  2063  017B  00F3               	movwf	?_strncmp+2
  2064  017C  3007               	movlw	7
  2065  017D  00F4               	movwf	?_strncmp+3
  2066  017E  3000               	movlw	0
  2067  017F  00F5               	movwf	?_strncmp+4
  2068  0180  3183  23EB  3181   	fcall	_strncmp
  2069  0183  0872               	movf	?_strncmp+1,w
  2070  0184  0471               	iorwf	?_strncmp,w
  2071  0185  1D03               	skipz
  2072  0186  298A               	goto	l2670
  2073                           
  2074                           ;main.c: 271: command_range1();
  2075  0187  318F  27DE         	fcall	_command_range1
  2076  0189  0008               	return
  2077  018A                     l2670:	
  2078                           
  2079                           ;main.c: 272: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 2",7) ==
      +                           0)
  2080  018A  087C               	movf	_received_data_length,w
  2081  018B  3A07               	xorlw	7
  2082  018C  1D03               	skipz
  2083  018D  29A5               	goto	l2676
  2084  018E  3047               	movlw	low _uart_command
  2085  018F  00F1               	movwf	?_strncmp
  2086  0190  3000               	movlw	high _uart_command
  2087  0191  00F2               	movwf	?_strncmp+1
  2088  0192  309E               	movlw	(STR_10| (0+32768))& (0+255)
  2089  0193  0020               	movlb	0	; select bank0
  2090  0194  00E7               	movwf	??_interpret_command
  2091  0195  0867               	movf	??_interpret_command,w
  2092  0196  00F3               	movwf	?_strncmp+2
  2093  0197  3007               	movlw	7
  2094  0198  00F4               	movwf	?_strncmp+3
  2095  0199  3000               	movlw	0
  2096  019A  00F5               	movwf	?_strncmp+4
  2097  019B  3183  23EB  3181   	fcall	_strncmp
  2098  019E  0872               	movf	?_strncmp+1,w
  2099  019F  0471               	iorwf	?_strncmp,w
  2100  01A0  1D03               	skipz
  2101  01A1  29A5               	goto	l2676
  2102                           
  2103                           ;main.c: 273: command_range2();
  2104  01A2  318F  27EF         	fcall	_command_range2
  2105  01A4  0008               	return
  2106  01A5                     l2676:	
  2107                           
  2108                           ;main.c: 274: else if (received_data_length == 7 && strncmp(uart_command,"RANGE 3",7) ==
      +                           0)
  2109  01A5  087C               	movf	_received_data_length,w
  2110  01A6  3A07               	xorlw	7
  2111  01A7  1D03               	skipz
  2112  01A8  29C0               	goto	l2682
  2113  01A9  3047               	movlw	low _uart_command
  2114  01AA  00F1               	movwf	?_strncmp
  2115  01AB  3000               	movlw	high _uart_command
  2116  01AC  00F2               	movwf	?_strncmp+1
  2117  01AD  30A6               	movlw	(STR_11| (0+32768))& (0+255)
  2118  01AE  0020               	movlb	0	; select bank0
  2119  01AF  00E7               	movwf	??_interpret_command
  2120  01B0  0867               	movf	??_interpret_command,w
  2121  01B1  00F3               	movwf	?_strncmp+2
  2122  01B2  3007               	movlw	7
  2123  01B3  00F4               	movwf	?_strncmp+3
  2124  01B4  3000               	movlw	0
  2125  01B5  00F5               	movwf	?_strncmp+4
  2126  01B6  3183  23EB  3181   	fcall	_strncmp
  2127  01B9  0872               	movf	?_strncmp+1,w
  2128  01BA  0471               	iorwf	?_strncmp,w
  2129  01BB  1D03               	skipz
  2130  01BC  29C0               	goto	l2682
  2131                           
  2132                           ;main.c: 275: command_range3();
  2133  01BD  3180  20E3         	fcall	_command_range3
  2134  01BF  0008               	return
  2135  01C0                     l2682:	
  2136                           
  2137                           ;main.c: 276: else if (received_data_length == 10 && strncmp(received_data,"DACSET ",7) 
      +                          == 0)
  2138  01C0  087C               	movf	_received_data_length,w
  2139  01C1  3A0A               	xorlw	10
  2140  01C2  1D03               	skipz
  2141  01C3  29DE               	goto	l2688
  2142  01C4  0020               	movlb	0	; select bank0
  2143  01C5  0824               	movf	_received_data,w
  2144  01C6  00F1               	movwf	?_strncmp
  2145  01C7  3080               	movlw	(high __stringtab)| (0+128)
  2146  01C8  00F2               	movwf	?_strncmp+1
  2147  01C9  308E               	movlw	(STR_12| (0+32768))& (0+255)
  2148  01CA  00E7               	movwf	??_interpret_command
  2149  01CB  0867               	movf	??_interpret_command,w
  2150  01CC  00F3               	movwf	?_strncmp+2
  2151  01CD  3007               	movlw	7
  2152  01CE  00F4               	movwf	?_strncmp+3
  2153  01CF  3000               	movlw	0
  2154  01D0  00F5               	movwf	?_strncmp+4
  2155  01D1  3183  23EB  3181   	fcall	_strncmp
  2156  01D4  0872               	movf	?_strncmp+1,w
  2157  01D5  0471               	iorwf	?_strncmp,w
  2158  01D6  1D03               	skipz
  2159  01D7  29DE               	goto	l2688
  2160                           
  2161                           ;main.c: 277: command_set_dac(received_data+7);
  2162  01D8  0020               	movlb	0	; select bank0
  2163  01D9  0824               	movf	_received_data,w
  2164  01DA  3E07               	addlw	7
  2165  01DB  3186  26C5         	fcall	_command_set_dac
  2166  01DD  0008               	return
  2167  01DE                     l2688:	
  2168                           
  2169                           ;main.c: 278: else if (received_data_length == 6 && strncmp(received_data,"DACCAL",6) ==
      +                           0)
  2170  01DE  087C               	movf	_received_data_length,w
  2171  01DF  3A06               	xorlw	6
  2172  01E0  1D03               	skipz
  2173  01E1  29F9               	goto	l2694
  2174  01E2  0020               	movlb	0	; select bank0
  2175  01E3  0824               	movf	_received_data,w
  2176  01E4  00F1               	movwf	?_strncmp
  2177  01E5  3080               	movlw	(high __stringtab)| (0+128)
  2178  01E6  00F2               	movwf	?_strncmp+1
  2179  01E7  30BE               	movlw	(STR_13| (0+32768))& (0+255)
  2180  01E8  00E7               	movwf	??_interpret_command
  2181  01E9  0867               	movf	??_interpret_command,w
  2182  01EA  00F3               	movwf	?_strncmp+2
  2183  01EB  3006               	movlw	6
  2184  01EC  00F4               	movwf	?_strncmp+3
  2185  01ED  3000               	movlw	0
  2186  01EE  00F5               	movwf	?_strncmp+4
  2187  01EF  3183  23EB  3181   	fcall	_strncmp
  2188  01F2  0872               	movf	?_strncmp+1,w
  2189  01F3  0471               	iorwf	?_strncmp,w
  2190  01F4  1D03               	skipz
  2191  01F5  29F9               	goto	l2694
  2192                           
  2193                           ;main.c: 279: command_calibrate_dac();
  2194  01F6  3184  242F         	fcall	_command_calibrate_dac
  2195  01F8  0008               	return
  2196  01F9                     l2694:	
  2197                           
  2198                           ;main.c: 280: else if (received_data_length == 7 && strncmp(uart_command,"ADCREAD",7) ==
      +                           0)
  2199  01F9  087C               	movf	_received_data_length,w
  2200  01FA  3A07               	xorlw	7
  2201  01FB  1D03               	skipz
  2202  01FC  2A14               	goto	l2700
  2203  01FD  3047               	movlw	low _uart_command
  2204  01FE  00F1               	movwf	?_strncmp
  2205  01FF  3000               	movlw	high _uart_command
  2206  0200  00F2               	movwf	?_strncmp+1
  2207  0201  30AE               	movlw	(STR_14| (0+32768))& (0+255)
  2208  0202  0020               	movlb	0	; select bank0
  2209  0203  00E7               	movwf	??_interpret_command
  2210  0204  0867               	movf	??_interpret_command,w
  2211  0205  00F3               	movwf	?_strncmp+2
  2212  0206  3007               	movlw	7
  2213  0207  00F4               	movwf	?_strncmp+3
  2214  0208  3000               	movlw	0
  2215  0209  00F5               	movwf	?_strncmp+4
  2216  020A  3183  23EB  3181   	fcall	_strncmp
  2217  020D  0872               	movf	?_strncmp+1,w
  2218  020E  0471               	iorwf	?_strncmp,w
  2219  020F  1D03               	skipz
  2220  0210  2A14               	goto	l2700
  2221                           
  2222                           ;main.c: 281: command_read_adc();
  2223  0211  3186  2600         	fcall	_command_read_adc
  2224  0213  0008               	return
  2225  0214                     l2700:	
  2226                           
  2227                           ;main.c: 282: else if (received_data_length == 10 && strncmp(received_data,"OFFSETREAD",
      +                          10) == 0)
  2228  0214  087C               	movf	_received_data_length,w
  2229  0215  3A0A               	xorlw	10
  2230  0216  1D03               	skipz
  2231  0217  2A2F               	goto	l2706
  2232  0218  0020               	movlb	0	; select bank0
  2233  0219  0824               	movf	_received_data,w
  2234  021A  00F1               	movwf	?_strncmp
  2235  021B  3080               	movlw	(high __stringtab)| (0+128)
  2236  021C  00F2               	movwf	?_strncmp+1
  2237  021D  3068               	movlw	(STR_15| (0+32768))& (0+255)
  2238  021E  00E7               	movwf	??_interpret_command
  2239  021F  0867               	movf	??_interpret_command,w
  2240  0220  00F3               	movwf	?_strncmp+2
  2241  0221  300A               	movlw	10
  2242  0222  00F4               	movwf	?_strncmp+3
  2243  0223  3000               	movlw	0
  2244  0224  00F5               	movwf	?_strncmp+4
  2245  0225  3183  23EB  3181   	fcall	_strncmp
  2246  0228  0872               	movf	?_strncmp+1,w
  2247  0229  0471               	iorwf	?_strncmp,w
  2248  022A  1D03               	skipz
  2249  022B  2A2F               	goto	l2706
  2250                           
  2251                           ;main.c: 283: command_read_offset();
  2252  022C  3186  26A6         	fcall	_command_read_offset
  2253  022E  0008               	return
  2254  022F                     l2706:	
  2255                           
  2256                           ;main.c: 284: else if (received_data_length == 17 && strncmp(received_data,"OFFSETSAVE "
      +                          ,11) == 0)
  2257  022F  087C               	movf	_received_data_length,w
  2258  0230  3A11               	xorlw	17
  2259  0231  1D03               	skipz
  2260  0232  2A4D               	goto	l2712
  2261  0233  0020               	movlb	0	; select bank0
  2262  0234  0824               	movf	_received_data,w
  2263  0235  00F1               	movwf	?_strncmp
  2264  0236  3080               	movlw	(high __stringtab)| (0+128)
  2265  0237  00F2               	movwf	?_strncmp+1
  2266  0238  3051               	movlw	(STR_16| (0+32768))& (0+255)
  2267  0239  00E7               	movwf	??_interpret_command
  2268  023A  0867               	movf	??_interpret_command,w
  2269  023B  00F3               	movwf	?_strncmp+2
  2270  023C  300B               	movlw	11
  2271  023D  00F4               	movwf	?_strncmp+3
  2272  023E  3000               	movlw	0
  2273  023F  00F5               	movwf	?_strncmp+4
  2274  0240  3183  23EB  3181   	fcall	_strncmp
  2275  0243  0872               	movf	?_strncmp+1,w
  2276  0244  0471               	iorwf	?_strncmp,w
  2277  0245  1D03               	skipz
  2278  0246  2A4D               	goto	l2712
  2279                           
  2280                           ;main.c: 285: command_save_offset(received_data+11);
  2281  0247  0020               	movlb	0	; select bank0
  2282  0248  0824               	movf	_received_data,w
  2283  0249  3E0B               	addlw	11
  2284  024A  3180  20D2         	fcall	_command_save_offset
  2285  024C  0008               	return
  2286  024D                     l2712:	
  2287                           
  2288                           ;main.c: 286: else if (received_data_length == 9 && strncmp(received_data,"DACCALGET",9)
      +                           == 0)
  2289  024D  087C               	movf	_received_data_length,w
  2290  024E  3A09               	xorlw	9
  2291  024F  1D03               	skipz
  2292  0250  2A68               	goto	l2718
  2293  0251  0020               	movlb	0	; select bank0
  2294  0252  0824               	movf	_received_data,w
  2295  0253  00F1               	movwf	?_strncmp
  2296  0254  3080               	movlw	(high __stringtab)| (0+128)
  2297  0255  00F2               	movwf	?_strncmp+1
  2298  0256  3073               	movlw	(STR_17| (0+32768))& (0+255)
  2299  0257  00E7               	movwf	??_interpret_command
  2300  0258  0867               	movf	??_interpret_command,w
  2301  0259  00F3               	movwf	?_strncmp+2
  2302  025A  3009               	movlw	9
  2303  025B  00F4               	movwf	?_strncmp+3
  2304  025C  3000               	movlw	0
  2305  025D  00F5               	movwf	?_strncmp+4
  2306  025E  3183  23EB  3181   	fcall	_strncmp
  2307  0261  0872               	movf	?_strncmp+1,w
  2308  0262  0471               	iorwf	?_strncmp,w
  2309  0263  1D03               	skipz
  2310  0264  2A68               	goto	l2718
  2311                           
  2312                           ;main.c: 287: command_read_dac_cal();
  2313  0265  3186  2644         	fcall	_command_read_dac_cal
  2314  0267  0008               	return
  2315  0268                     l2718:	
  2316                           
  2317                           ;main.c: 288: else if (received_data_length == 16 && strncmp(received_data,"DACCALSET ",
      +                          10) == 0)
  2318  0268  087C               	movf	_received_data_length,w
  2319  0269  3A10               	xorlw	16
  2320  026A  1D03               	skipz
  2321  026B  2A86               	goto	l2724
  2322  026C  0020               	movlb	0	; select bank0
  2323  026D  0824               	movf	_received_data,w
  2324  026E  00F1               	movwf	?_strncmp
  2325  026F  3080               	movlw	(high __stringtab)| (0+128)
  2326  0270  00F2               	movwf	?_strncmp+1
  2327  0271  305D               	movlw	(STR_18| (0+32768))& (0+255)
  2328  0272  00E7               	movwf	??_interpret_command
  2329  0273  0867               	movf	??_interpret_command,w
  2330  0274  00F3               	movwf	?_strncmp+2
  2331  0275  300A               	movlw	10
  2332  0276  00F4               	movwf	?_strncmp+3
  2333  0277  3000               	movlw	0
  2334  0278  00F5               	movwf	?_strncmp+4
  2335  0279  3183  23EB  3181   	fcall	_strncmp
  2336  027C  0872               	movf	?_strncmp+1,w
  2337  027D  0471               	iorwf	?_strncmp,w
  2338  027E  1D03               	skipz
  2339  027F  2A86               	goto	l2724
  2340                           
  2341                           ;main.c: 289: command_set_dac_cal(received_data+10);
  2342  0280  0020               	movlb	0	; select bank0
  2343  0281  0824               	movf	_received_data,w
  2344  0282  3E0A               	addlw	10
  2345  0283  3183  23A2         	fcall	_command_set_dac_cal
  2346  0285  0008               	return
  2347  0286                     l2724:	
  2348                           
  2349                           ;main.c: 290: else if (received_data_length == 12 && strncmp(received_data,"SHUNTCALREAD
      +                          ",12) == 0)
  2350  0286  087C               	movf	_received_data_length,w
  2351  0287  3A0C               	xorlw	12
  2352  0288  1D03               	skipz
  2353  0289  2AA1               	goto	l2730
  2354  028A  0020               	movlb	0	; select bank0
  2355  028B  0824               	movf	_received_data,w
  2356  028C  00F1               	movwf	?_strncmp
  2357  028D  3080               	movlw	(high __stringtab)| (0+128)
  2358  028E  00F2               	movwf	?_strncmp+1
  2359  028F  3044               	movlw	(STR_19| (0+32768))& (0+255)
  2360  0290  00E7               	movwf	??_interpret_command
  2361  0291  0867               	movf	??_interpret_command,w
  2362  0292  00F3               	movwf	?_strncmp+2
  2363  0293  300C               	movlw	12
  2364  0294  00F4               	movwf	?_strncmp+3
  2365  0295  3000               	movlw	0
  2366  0296  00F5               	movwf	?_strncmp+4
  2367  0297  3183  23EB  3181   	fcall	_strncmp
  2368  029A  0872               	movf	?_strncmp+1,w
  2369  029B  0471               	iorwf	?_strncmp,w
  2370  029C  1D03               	skipz
  2371  029D  2AA1               	goto	l2730
  2372                           
  2373                           ;main.c: 291: command_read_shuntcalibration();
  2374  029E  3186  2665         	fcall	_command_read_shuntcalibration
  2375  02A0  0008               	return
  2376  02A1                     l2730:	
  2377                           
  2378                           ;main.c: 292: else if (received_data_length == 19 && strncmp(received_data,"SHUNTCALSAVE
      +                           ",13) == 0)
  2379  02A1  087C               	movf	_received_data_length,w
  2380  02A2  3A13               	xorlw	19
  2381  02A3  1D03               	skipz
  2382  02A4  2ABF               	goto	l2736
  2383  02A5  0020               	movlb	0	; select bank0
  2384  02A6  0824               	movf	_received_data,w
  2385  02A7  00F1               	movwf	?_strncmp
  2386  02A8  3080               	movlw	(high __stringtab)| (0+128)
  2387  02A9  00F2               	movwf	?_strncmp+1
  2388  02AA  3028               	movlw	(STR_20| (0+32768))& (0+255)
  2389  02AB  00E7               	movwf	??_interpret_command
  2390  02AC  0867               	movf	??_interpret_command,w
  2391  02AD  00F3               	movwf	?_strncmp+2
  2392  02AE  300D               	movlw	13
  2393  02AF  00F4               	movwf	?_strncmp+3
  2394  02B0  3000               	movlw	0
  2395  02B1  00F5               	movwf	?_strncmp+4
  2396  02B2  3183  23EB  3181   	fcall	_strncmp
  2397  02B5  0872               	movf	?_strncmp+1,w
  2398  02B6  0471               	iorwf	?_strncmp,w
  2399  02B7  1D03               	skipz
  2400  02B8  2ABF               	goto	l2736
  2401                           
  2402                           ;main.c: 293: command_save_shuntcalibration(received_data+13);
  2403  02B9  0020               	movlb	0	; select bank0
  2404  02BA  0824               	movf	_received_data,w
  2405  02BB  3E0D               	addlw	13
  2406  02BC  3187  27E7         	fcall	_command_save_shuntcalibration
  2407  02BE  0008               	return
  2408  02BF                     l2736:	
  2409                           
  2410                           ;main.c: 295: else
  2411                           ;main.c: 296: command_unknown();
  2412  02BF  3187  27A8         	fcall	_command_unknown
  2413  02C1  0008               	return
  2414  02C2                     __end_of_interpret_command:	
  2415                           
  2416                           	psect	text4
  2417  03EB                     __ptext4:	
  2418 ;; *************** function _strncmp *****************
  2419 ;; Defined at:
  2420 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strncmp.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  s1              2    1[COMMON] PTR const unsigned char 
  2423 ;;		 -> uart_command(20), ROM(8192), 
  2424 ;;  s2              1    3[COMMON] PTR const unsigned char 
  2425 ;;		 -> STR_20(14), STR_19(13), STR_18(11), STR_17(10), 
  2426 ;;		 -> STR_16(12), STR_15(11), STR_14(8), STR_13(7), 
  2427 ;;		 -> STR_12(8), STR_11(8), STR_10(8), STR_9(8), 
  2428 ;;		 -> STR_8(14), STR_7(15), STR_6(9), STR_5(8), 
  2429 ;;  len             2    4[COMMON] unsigned int 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  2    1[COMMON] int 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2441 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2443 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2444 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2445 ;;Total ram usage:        7 bytes
  2446 ;; Hardware stack levels used:    2
  2447 ;; Hardware stack levels required when called:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_interpret_command
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _strncmp
  2457  03EB                     _strncmp:	
  2458  03EB                     l2156:	
  2459                           ;incstack = 0
  2460                           ; Regs used in _strncmp: [wreg-fsr0h+status,2+status,0+pclath]
  2461                           
  2462  03EB  3001               	movlw	1
  2463  03EC  02F4               	subwf	strncmp@len,f
  2464  03ED  3000               	movlw	0
  2465  03EE  3BF5               	subwfb	strncmp@len+1,f
  2466  03EF  30FF               	movlw	255
  2467  03F0  0675               	xorwf	strncmp@len+1,w
  2468  03F1  1D03               	skipz
  2469  03F2  2BF5               	goto	u1265
  2470  03F3  30FF               	movlw	255
  2471  03F4  0674               	xorwf	strncmp@len,w
  2472  03F5                     u1265:	
  2473  03F5  1903               	btfsc	3,2
  2474  03F6  2C2C               	goto	l2158
  2475  03F7  0871               	movf	strncmp@s1,w
  2476  03F8  0084               	movwf	4
  2477  03F9  0872               	movf	strncmp@s1+1,w
  2478  03FA  0085               	movwf	5
  2479  03FB  0800               	movf	0,w	;code access
  2480  03FC  3A00               	xorlw	0
  2481  03FD  1903               	skipnz
  2482  03FE  2C0C               	goto	l2148
  2483  03FF  0873               	movf	strncmp@s2,w
  2484  0400  3180               	movlp	high __stringtab
  2485  0401  000A               	callw
  2486  0402  3183               	pagesel	$	;select current page
  2487  0403  00F6               	movwf	??_strncmp
  2488  0404  0871               	movf	strncmp@s1,w
  2489  0405  0084               	movwf	4
  2490  0406  0872               	movf	strncmp@s1+1,w
  2491  0407  0085               	movwf	5
  2492  0408  0800               	movf	0,w	;code access
  2493  0409  0676               	xorwf	??_strncmp,w
  2494  040A  1903               	skipnz
  2495  040B  2C23               	goto	l2152
  2496  040C                     l2148:	
  2497  040C  0873               	movf	strncmp@s2,w
  2498  040D  3180               	movlp	high __stringtab
  2499  040E  000A               	callw
  2500  040F  3183               	pagesel	$	;select current page
  2501  0410  00F6               	movwf	??_strncmp
  2502  0411  01F7               	clrf	??_strncmp+1
  2503  0412  09F6               	comf	??_strncmp,f
  2504  0413  09F7               	comf	??_strncmp+1,f
  2505  0414  0AF6               	incf	??_strncmp,f
  2506  0415  1903               	skipnz
  2507  0416  0AF7               	incf	??_strncmp+1,f
  2508  0417  0871               	movf	strncmp@s1,w
  2509  0418  0084               	movwf	4
  2510  0419  0872               	movf	strncmp@s1+1,w
  2511  041A  0085               	movwf	5
  2512  041B  0800               	movf	0,w	;code access
  2513  041C  0776               	addwf	??_strncmp,w
  2514  041D  00F1               	movwf	?_strncmp
  2515  041E  0877               	movf	??_strncmp+1,w
  2516  041F  1803               	skipnc
  2517  0420  0A77               	incf	??_strncmp+1,w
  2518  0421  00F2               	movwf	?_strncmp+1
  2519  0422  0008               	return
  2520  0423                     l2152:	
  2521  0423  3001               	movlw	1
  2522  0424  07F1               	addwf	strncmp@s1,f
  2523  0425  3000               	movlw	0
  2524  0426  3DF2               	addwfc	strncmp@s1+1,f
  2525  0427  3001               	movlw	1
  2526  0428  00F6               	movwf	??_strncmp
  2527  0429  0876               	movf	??_strncmp,w
  2528  042A  07F3               	addwf	strncmp@s2,f
  2529  042B  2BEB               	goto	l2156
  2530  042C                     l2158:	
  2531  042C  01F1               	clrf	?_strncmp
  2532  042D  01F2               	clrf	?_strncmp+1
  2533  042E  0008               	return
  2534  042F                     __end_of_strncmp:	
  2535                           
  2536                           	psect	text5
  2537  03A2                     __ptext5:	
  2538 ;; *************** function _command_set_dac_cal *****************
  2539 ;; Defined at:
  2540 ;;		line 254 in file "main.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  dac_cal_data    1    wreg     PTR const unsigned char 
  2543 ;;		 -> ROM(8192), 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  dac_cal_data    1    6[BANK0 ] PTR const unsigned char 
  2546 ;;		 -> ROM(8192), 
  2547 ;; Return value:  Size  Location     Type
  2548 ;;		None               void
  2549 ;; Registers used:
  2550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2558 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2560 ;;Total ram usage:        4 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    5
  2563 ;; This function calls:
  2564 ;;		_HEFLASH_writeBlock
  2565 ;;		_DAC1220_Write3Bytes
  2566 ;;		_send_OK
  2567 ;; This function is called by:
  2568 ;;		_interpret_command
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _command_set_dac_cal
  2574  03A2                     _command_set_dac_cal:	
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _command_set_dac_cal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2578                           ;command_set_dac_cal@dac_cal_data stored from wreg
  2579  03A2  0020               	movlb	0	; select bank0
  2580  03A3  00E1               	movwf	command_set_dac_cal@dac_cal_data
  2581                           
  2582                           ;main.c: 255: HEFLASH_writeBlock(2, dac_cal_data, 6);
  2583  03A4  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2584  03A5  00F7               	movwf	?_HEFLASH_writeBlock
  2585  03A6  3080               	movlw	(high __stringtab)| (0+128)
  2586  03A7  00F8               	movwf	?_HEFLASH_writeBlock+1
  2587  03A8  3006               	movlw	6
  2588  03A9  00DE               	movwf	??_command_set_dac_cal
  2589  03AA  085E               	movf	??_command_set_dac_cal,w
  2590  03AB  00F9               	movwf	?_HEFLASH_writeBlock+2
  2591  03AC  3002               	movlw	2
  2592  03AD  3183  2342  3183   	fcall	_HEFLASH_writeBlock
  2593                           
  2594                           ;main.c: 256: DAC1220_Write3Bytes(8, dac_cal_data[0], dac_cal_data[1], dac_cal_data[2]);
  2595  03B0  0020               	movlb	0	; select bank0
  2596  03B1  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2597  03B2  3180               	movlp	high __stringtab
  2598  03B3  000A               	callw
  2599  03B4  3183               	pagesel	$	;select current page
  2600  03B5  00DE               	movwf	??_command_set_dac_cal
  2601  03B6  085E               	movf	??_command_set_dac_cal,w
  2602  03B7  00F5               	movwf	?_DAC1220_Write3Bytes
  2603  03B8  0A61               	incf	command_set_dac_cal@dac_cal_data,w
  2604  03B9  3180               	movlp	high __stringtab
  2605  03BA  000A               	callw
  2606  03BB  3183               	pagesel	$	;select current page
  2607  03BC  00DF               	movwf	??_command_set_dac_cal+1
  2608  03BD  085F               	movf	??_command_set_dac_cal+1,w
  2609  03BE  00F6               	movwf	?_DAC1220_Write3Bytes+1
  2610  03BF  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2611  03C0  3E02               	addlw	2
  2612  03C1  3180               	movlp	high __stringtab
  2613  03C2  000A               	callw
  2614  03C3  3183               	pagesel	$	;select current page
  2615  03C4  00E0               	movwf	??_command_set_dac_cal+2
  2616  03C5  0860               	movf	??_command_set_dac_cal+2,w
  2617  03C6  00F7               	movwf	?_DAC1220_Write3Bytes+2
  2618  03C7  3008               	movlw	8
  2619  03C8  3186  2686  3183   	fcall	_DAC1220_Write3Bytes
  2620                           
  2621                           ;main.c: 257: DAC1220_Write3Bytes(12, dac_cal_data[3], dac_cal_data[4], dac_cal_data[5]);
  2622  03CB  0020               	movlb	0	; select bank0
  2623  03CC  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2624  03CD  3E03               	addlw	3
  2625  03CE  3180               	movlp	high __stringtab
  2626  03CF  000A               	callw
  2627  03D0  3183               	pagesel	$	;select current page
  2628  03D1  00DE               	movwf	??_command_set_dac_cal
  2629  03D2  085E               	movf	??_command_set_dac_cal,w
  2630  03D3  00F5               	movwf	?_DAC1220_Write3Bytes
  2631  03D4  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2632  03D5  3E04               	addlw	4
  2633  03D6  3180               	movlp	high __stringtab
  2634  03D7  000A               	callw
  2635  03D8  3183               	pagesel	$	;select current page
  2636  03D9  00DF               	movwf	??_command_set_dac_cal+1
  2637  03DA  085F               	movf	??_command_set_dac_cal+1,w
  2638  03DB  00F6               	movwf	?_DAC1220_Write3Bytes+1
  2639  03DC  0861               	movf	command_set_dac_cal@dac_cal_data,w
  2640  03DD  3E05               	addlw	5
  2641  03DE  3180               	movlp	high __stringtab
  2642  03DF  000A               	callw
  2643  03E0  3183               	pagesel	$	;select current page
  2644  03E1  00E0               	movwf	??_command_set_dac_cal+2
  2645  03E2  0860               	movf	??_command_set_dac_cal+2,w
  2646  03E3  00F7               	movwf	?_DAC1220_Write3Bytes+2
  2647  03E4  300C               	movlw	12
  2648  03E5  3186  2686  3183   	fcall	_DAC1220_Write3Bytes
  2649                           
  2650                           ;main.c: 258: send_OK();
  2651  03E8  3187  2792         	fcall	_send_OK
  2652  03EA  0008               	return
  2653  03EB                     __end_of_command_set_dac_cal:	
  2654                           
  2655                           	psect	text6
  2656  0644                     __ptext6:	
  2657 ;; *************** function _command_read_dac_cal *****************
  2658 ;; Defined at:
  2659 ;;		line 247 in file "main.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;		None
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2675 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2677 ;;Total ram usage:        3 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		_HEFLASH_readBlock
  2682 ;;		_memcpy
  2683 ;; This function is called by:
  2684 ;;		_interpret_command
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _command_read_dac_cal
  2690  0644                     _command_read_dac_cal:	
  2691                           
  2692                           ;main.c: 248: HEFLASH_readBlock(heflashbuffer, 2, 32);
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _command_read_dac_cal: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2696  0644  3002               	movlw	2
  2697  0645  0020               	movlb	0	; select bank0
  2698  0646  00DB               	movwf	??_command_read_dac_cal
  2699  0647  085B               	movf	??_command_read_dac_cal,w
  2700  0648  00F3               	movwf	?_HEFLASH_readBlock
  2701  0649  3020               	movlw	32
  2702  064A  00DC               	movwf	??_command_read_dac_cal+1
  2703  064B  085C               	movf	??_command_read_dac_cal+1,w
  2704  064C  00F4               	movwf	?_HEFLASH_readBlock+1
  2705  064D  3027               	movlw	_heflashbuffer& (0+255)
  2706  064E  3185  251C  3186   	fcall	_HEFLASH_readBlock
  2707                           
  2708                           ;main.c: 249: transmit_data_length=6;
  2709  0651  3006               	movlw	6
  2710  0652  0020               	movlb	0	; select bank0
  2711  0653  00DB               	movwf	??_command_read_dac_cal
  2712  0654  085B               	movf	??_command_read_dac_cal,w
  2713  0655  00A6               	movwf	_transmit_data_length
  2714                           
  2715                           ;main.c: 250: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  2716  0656  3027               	movlw	_heflashbuffer& (0+255)
  2717  0657  00DB               	movwf	??_command_read_dac_cal
  2718  0658  085B               	movf	??_command_read_dac_cal,w
  2719  0659  00F1               	movwf	?_memcpy
  2720  065A  0826               	movf	_transmit_data_length,w
  2721  065B  00DC               	movwf	??_command_read_dac_cal+1
  2722  065C  01DD               	clrf	??_command_read_dac_cal+2
  2723  065D  085C               	movf	??_command_read_dac_cal+1,w
  2724  065E  00F2               	movwf	?_memcpy+1
  2725  065F  085D               	movf	??_command_read_dac_cal+2,w
  2726  0660  00F3               	movwf	?_memcpy+2
  2727  0661  0825               	movf	_transmit_data,w
  2728  0662  3185  25B3         	fcall	_memcpy
  2729  0664  0008               	return
  2730  0665                     __end_of_command_read_dac_cal:	
  2731                           
  2732                           	psect	text7
  2733  07E7                     __ptext7:	
  2734 ;; *************** function _command_save_shuntcalibration *****************
  2735 ;; Defined at:
  2736 ;;		line 241 in file "main.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  shuntcalibra    1    wreg     PTR const unsigned char 
  2739 ;;		 -> ROM(8192), 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  shuntcalibra    1    4[BANK0 ] PTR const unsigned char 
  2742 ;;		 -> ROM(8192), 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2755 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2756 ;;Total ram usage:        2 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    4
  2759 ;; This function calls:
  2760 ;;		_HEFLASH_writeBlock
  2761 ;;		_send_OK
  2762 ;; This function is called by:
  2763 ;;		_interpret_command
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _command_save_shuntcalibration
  2769  07E7                     _command_save_shuntcalibration:	
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _command_save_shuntcalibration: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  2773                           ;command_save_shuntcalibration@shuntcalibration_data stored from wreg
  2774  07E7  0020               	movlb	0	; select bank0
  2775  07E8  00DF               	movwf	command_save_shuntcalibration@shuntcalibration_data
  2776                           
  2777                           ;main.c: 242: HEFLASH_writeBlock(3, shuntcalibration_data, 6);
  2778  07E9  085F               	movf	command_save_shuntcalibration@shuntcalibration_data,w
  2779  07EA  00F7               	movwf	?_HEFLASH_writeBlock
  2780  07EB  3080               	movlw	(high __stringtab)| (0+128)
  2781  07EC  00F8               	movwf	?_HEFLASH_writeBlock+1
  2782  07ED  3006               	movlw	6
  2783  07EE  00DE               	movwf	??_command_save_shuntcalibration
  2784  07EF  085E               	movf	??_command_save_shuntcalibration,w
  2785  07F0  00F9               	movwf	?_HEFLASH_writeBlock+2
  2786  07F1  3003               	movlw	3
  2787  07F2  3183  2342  3187   	fcall	_HEFLASH_writeBlock
  2788                           
  2789                           ;main.c: 243: send_OK();
  2790  07F5  3187  2792         	fcall	_send_OK
  2791  07F7  0008               	return
  2792  07F8                     __end_of_command_save_shuntcalibration:	
  2793                           
  2794                           	psect	text8
  2795  0665                     __ptext8:	
  2796 ;; *************** function _command_read_shuntcalibration *****************
  2797 ;; Defined at:
  2798 ;;		line 234 in file "main.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;		None               void
  2805 ;; Registers used:
  2806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2814 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2815 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2816 ;;Total ram usage:        3 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		_HEFLASH_readBlock
  2821 ;;		_memcpy
  2822 ;; This function is called by:
  2823 ;;		_interpret_command
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           
  2828                           ;psect for function _command_read_shuntcalibration
  2829  0665                     _command_read_shuntcalibration:	
  2830                           
  2831                           ;main.c: 235: HEFLASH_readBlock(heflashbuffer, 3, 32);
  2832                           
  2833                           ;incstack = 0
  2834                           ; Regs used in _command_read_shuntcalibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  2835  0665  3003               	movlw	3
  2836  0666  0020               	movlb	0	; select bank0
  2837  0667  00DB               	movwf	??_command_read_shuntcalibration
  2838  0668  085B               	movf	??_command_read_shuntcalibration,w
  2839  0669  00F3               	movwf	?_HEFLASH_readBlock
  2840  066A  3020               	movlw	32
  2841  066B  00DC               	movwf	??_command_read_shuntcalibration+1
  2842  066C  085C               	movf	??_command_read_shuntcalibration+1,w
  2843  066D  00F4               	movwf	?_HEFLASH_readBlock+1
  2844  066E  3027               	movlw	_heflashbuffer& (0+255)
  2845  066F  3185  251C  3186   	fcall	_HEFLASH_readBlock
  2846                           
  2847                           ;main.c: 236: transmit_data_length=6;
  2848  0672  3006               	movlw	6
  2849  0673  0020               	movlb	0	; select bank0
  2850  0674  00DB               	movwf	??_command_read_shuntcalibration
  2851  0675  085B               	movf	??_command_read_shuntcalibration,w
  2852  0676  00A6               	movwf	_transmit_data_length
  2853                           
  2854                           ;main.c: 237: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  2855  0677  3027               	movlw	_heflashbuffer& (0+255)
  2856  0678  00DB               	movwf	??_command_read_shuntcalibration
  2857  0679  085B               	movf	??_command_read_shuntcalibration,w
  2858  067A  00F1               	movwf	?_memcpy
  2859  067B  0826               	movf	_transmit_data_length,w
  2860  067C  00DC               	movwf	??_command_read_shuntcalibration+1
  2861  067D  01DD               	clrf	??_command_read_shuntcalibration+2
  2862  067E  085C               	movf	??_command_read_shuntcalibration+1,w
  2863  067F  00F2               	movwf	?_memcpy+1
  2864  0680  085D               	movf	??_command_read_shuntcalibration+2,w
  2865  0681  00F3               	movwf	?_memcpy+2
  2866  0682  0825               	movf	_transmit_data,w
  2867  0683  3185  25B3         	fcall	_memcpy
  2868  0685  0008               	return
  2869  0686                     __end_of_command_read_shuntcalibration:	
  2870                           
  2871                           	psect	text9
  2872  00D2                     __ptext9:	
  2873 ;; *************** function _command_save_offset *****************
  2874 ;; Defined at:
  2875 ;;		line 228 in file "main.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  offset_data     1    wreg     PTR const unsigned char 
  2878 ;;		 -> ROM(8192), 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  offset_data     1    4[BANK0 ] PTR const unsigned char 
  2881 ;;		 -> ROM(8192), 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;		None               void
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2895 ;;Total ram usage:        2 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    4
  2898 ;; This function calls:
  2899 ;;		_HEFLASH_writeBlock
  2900 ;;		_send_OK
  2901 ;; This function is called by:
  2902 ;;		_interpret_command
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           
  2907                           ;psect for function _command_save_offset
  2908  00D2                     _command_save_offset:	
  2909                           
  2910                           ;incstack = 0
  2911                           ; Regs used in _command_save_offset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2912                           ;command_save_offset@offset_data stored from wreg
  2913  00D2  0020               	movlb	0	; select bank0
  2914  00D3  00DF               	movwf	command_save_offset@offset_data
  2915                           
  2916                           ;main.c: 229: HEFLASH_writeBlock(1, offset_data, 6);
  2917  00D4  085F               	movf	command_save_offset@offset_data,w
  2918  00D5  00F7               	movwf	?_HEFLASH_writeBlock
  2919  00D6  3080               	movlw	(high __stringtab)| (0+128)
  2920  00D7  00F8               	movwf	?_HEFLASH_writeBlock+1
  2921  00D8  3006               	movlw	6
  2922  00D9  00DE               	movwf	??_command_save_offset
  2923  00DA  085E               	movf	??_command_save_offset,w
  2924  00DB  00F9               	movwf	?_HEFLASH_writeBlock+2
  2925  00DC  3001               	movlw	1
  2926  00DD  3183  2342  3180   	fcall	_HEFLASH_writeBlock
  2927                           
  2928                           ;main.c: 230: send_OK();
  2929  00E0  3187  2792         	fcall	_send_OK
  2930  00E2  0008               	return
  2931  00E3                     __end_of_command_save_offset:	
  2932                           
  2933                           	psect	text10
  2934  06A6                     __ptext10:	
  2935 ;; *************** function _command_read_offset *****************
  2936 ;; Defined at:
  2937 ;;		line 221 in file "main.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;		None               void
  2944 ;; Registers used:
  2945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2953 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2954 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2955 ;;Total ram usage:        3 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; Hardware stack levels required when called:    3
  2958 ;; This function calls:
  2959 ;;		_HEFLASH_readBlock
  2960 ;;		_memcpy
  2961 ;; This function is called by:
  2962 ;;		_interpret_command
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _command_read_offset
  2968  06A6                     _command_read_offset:	
  2969                           
  2970                           ;main.c: 222: HEFLASH_readBlock(heflashbuffer, 1, 32);
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _command_read_offset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2974  06A6  01F3               	clrf	?_HEFLASH_readBlock
  2975  06A7  0AF3               	incf	?_HEFLASH_readBlock,f
  2976  06A8  3020               	movlw	32
  2977  06A9  0020               	movlb	0	; select bank0
  2978  06AA  00DB               	movwf	??_command_read_offset
  2979  06AB  085B               	movf	??_command_read_offset,w
  2980  06AC  00F4               	movwf	?_HEFLASH_readBlock+1
  2981  06AD  3027               	movlw	_heflashbuffer& (0+255)
  2982  06AE  3185  251C  3186   	fcall	_HEFLASH_readBlock
  2983                           
  2984                           ;main.c: 223: transmit_data_length=6;
  2985  06B1  3006               	movlw	6
  2986  06B2  0020               	movlb	0	; select bank0
  2987  06B3  00DB               	movwf	??_command_read_offset
  2988  06B4  085B               	movf	??_command_read_offset,w
  2989  06B5  00A6               	movwf	_transmit_data_length
  2990                           
  2991                           ;main.c: 224: memcpy(transmit_data, heflashbuffer, transmit_data_length);
  2992  06B6  3027               	movlw	_heflashbuffer& (0+255)
  2993  06B7  00DB               	movwf	??_command_read_offset
  2994  06B8  085B               	movf	??_command_read_offset,w
  2995  06B9  00F1               	movwf	?_memcpy
  2996  06BA  0826               	movf	_transmit_data_length,w
  2997  06BB  00DC               	movwf	??_command_read_offset+1
  2998  06BC  01DD               	clrf	??_command_read_offset+2
  2999  06BD  085C               	movf	??_command_read_offset+1,w
  3000  06BE  00F2               	movwf	?_memcpy+1
  3001  06BF  085D               	movf	??_command_read_offset+2,w
  3002  06C0  00F3               	movwf	?_memcpy+2
  3003  06C1  0825               	movf	_transmit_data,w
  3004  06C2  3185  25B3         	fcall	_memcpy
  3005  06C4  0008               	return
  3006  06C5                     __end_of_command_read_offset:	
  3007                           
  3008                           	psect	text11
  3009  05B3                     __ptext11:	
  3010 ;; *************** function _memcpy *****************
  3011 ;; Defined at:
  3012 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  d1              1    wreg     PTR void 
  3015 ;;		 -> NULL(0), 
  3016 ;;  s1              1    1[COMMON] PTR const void 
  3017 ;;		 -> heflashbuffer(32), 
  3018 ;;  n               2    2[COMMON] unsigned int 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  d1              1    5[COMMON] PTR void 
  3021 ;;		 -> NULL(0), 
  3022 ;;  s               1    7[COMMON] PTR const unsigned char 
  3023 ;;		 -> heflashbuffer(32), 
  3024 ;;  d               1    6[COMMON] PTR unsigned char 
  3025 ;;		 -> NULL(0), 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      PTR void 
  3028 ;; Registers used:
  3029 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3035 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3036 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3038 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;Total ram usage:        7 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    1
  3042 ;; This function calls:
  3043 ;;		Nothing
  3044 ;; This function is called by:
  3045 ;;		_command_read_offset
  3046 ;;		_command_read_shuntcalibration
  3047 ;;		_command_read_dac_cal
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           
  3052                           ;psect for function _memcpy
  3053  05B3                     _memcpy:	
  3054                           
  3055                           ;incstack = 0
  3056                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  3057                           ;memcpy@d1 stored from wreg
  3058  05B3  00F5               	movwf	memcpy@d1
  3059  05B4  0871               	movf	memcpy@s1,w
  3060  05B5  00F4               	movwf	??_memcpy
  3061  05B6  0874               	movf	??_memcpy,w
  3062  05B7  00F7               	movwf	memcpy@s
  3063  05B8  0875               	movf	memcpy@d1,w
  3064  05B9  00F4               	movwf	??_memcpy
  3065  05BA  0874               	movf	??_memcpy,w
  3066  05BB  00F6               	movwf	memcpy@d
  3067  05BC                     l2014:	
  3068  05BC  3001               	movlw	1
  3069  05BD  02F2               	subwf	memcpy@n,f
  3070  05BE  3000               	movlw	0
  3071  05BF  3BF3               	subwfb	memcpy@n+1,f
  3072  05C0  30FF               	movlw	255
  3073  05C1  0673               	xorwf	memcpy@n+1,w
  3074  05C2  1D03               	skipz
  3075  05C3  2DC6               	goto	u915
  3076  05C4  30FF               	movlw	255
  3077  05C5  0672               	xorwf	memcpy@n,w
  3078  05C6                     u915:	
  3079  05C6  1903               	btfsc	3,2
  3080  05C7  0008               	return
  3081  05C8  0877               	movf	memcpy@s,w
  3082  05C9  0086               	movwf	6
  3083  05CA  0187               	clrf	7
  3084  05CB  0801               	movf	1,w
  3085  05CC  00F4               	movwf	??_memcpy
  3086  05CD  0876               	movf	memcpy@d,w
  3087  05CE  0086               	movwf	6
  3088  05CF  0187               	clrf	7
  3089  05D0  0874               	movf	??_memcpy,w
  3090  05D1  0081               	movwf	1
  3091  05D2  3001               	movlw	1
  3092  05D3  00F4               	movwf	??_memcpy
  3093  05D4  0874               	movf	??_memcpy,w
  3094  05D5  07F7               	addwf	memcpy@s,f
  3095  05D6  3001               	movlw	1
  3096  05D7  00F4               	movwf	??_memcpy
  3097  05D8  0874               	movf	??_memcpy,w
  3098  05D9  07F6               	addwf	memcpy@d,f
  3099  05DA  2DBC               	goto	l2014
  3100  05DB                     __end_of_memcpy:	
  3101                           ;	Return value of _memcpy is never used
  3102                           
  3103                           
  3104                           	psect	text12
  3105  0600                     __ptext12:	
  3106 ;; *************** function _command_read_adc *****************
  3107 ;; Defined at:
  3108 ;;		line 199 in file "main.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  i               1   10[BANK0 ] unsigned char 
  3113 ;;  adc_data        6    4[BANK0 ] unsigned char [6]
  3114 ;; Return value:  Size  Location     Type
  3115 ;;		None               void
  3116 ;; Registers used:
  3117 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3127 ;;Total ram usage:        8 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    5
  3130 ;; This function calls:
  3131 ;;		_MCP3550_Read
  3132 ;;		_send_WAIT
  3133 ;;		_EUSART_Write
  3134 ;; This function is called by:
  3135 ;;		_interpret_command
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           
  3140                           ;psect for function _command_read_adc
  3141  0600                     _command_read_adc:	
  3142                           
  3143                           ;main.c: 200: uint8_t adc_data[6];
  3144                           ;main.c: 201: if(MCP3550_Read(adc_data))
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _command_read_adc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3148  0600  305F               	movlw	command_read_adc@adc_data& (0+255)
  3149  0601  3184  24AC  3186   	fcall	_MCP3550_Read
  3150  0604  3A00               	xorlw	0
  3151  0605  1903               	skipnz
  3152  0606  2E1F               	goto	l2600
  3153                           
  3154                           ;main.c: 202: {
  3155                           ;main.c: 203: transmit_data_length=3;
  3156  0607  3003               	movlw	3
  3157  0608  0020               	movlb	0	; select bank0
  3158  0609  00DE               	movwf	??_command_read_adc
  3159  060A  085E               	movf	??_command_read_adc,w
  3160  060B  00A6               	movwf	_transmit_data_length
  3161                           
  3162                           ;main.c: 208: for(uint8_t i=0;i<transmit_data_length;i++)
  3163  060C  01E5               	clrf	command_read_adc@i
  3164  060D                     l2598:	
  3165  060D  0826               	movf	_transmit_data_length,w
  3166  060E  0265               	subwf	command_read_adc@i,w
  3167  060F  1803               	btfsc	3,0
  3168  0610  0008               	return
  3169                           
  3170                           ;main.c: 209: {
  3171                           ;main.c: 210: EUSART_Write(adc_data[i]);
  3172  0611  0865               	movf	command_read_adc@i,w
  3173  0612  3E5F               	addlw	command_read_adc@adc_data& (0+255)
  3174  0613  0086               	movwf	6
  3175  0614  0187               	clrf	7
  3176  0615  0801               	movf	1,w
  3177  0616  3187  27F8  3186   	fcall	_EUSART_Write
  3178  0619  3001               	movlw	1
  3179  061A  0020               	movlb	0	; select bank0
  3180  061B  00DE               	movwf	??_command_read_adc
  3181  061C  085E               	movf	??_command_read_adc,w
  3182  061D  07E5               	addwf	command_read_adc@i,f
  3183  061E  2E0D               	goto	l2598
  3184  061F                     l2600:	
  3185                           ;main.c: 211: }
  3186                           ;main.c: 213: }
  3187                           
  3188                           
  3189                           ;main.c: 214: else
  3190                           ;main.c: 215: {
  3191                           ;main.c: 216: send_WAIT();
  3192  061F  3187  277C         	fcall	_send_WAIT
  3193  0621  0008               	return
  3194  0622                     __end_of_command_read_adc:	
  3195                           
  3196                           	psect	text13
  3197  077C                     __ptext13:	
  3198 ;; *************** function _send_WAIT *****************
  3199 ;; Defined at:
  3200 ;;		line 124 in file "main.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  3205 ;;		 -> STR_4(6), 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;		None               void
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0, pclath, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3218 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    3
  3222 ;; This function calls:
  3223 ;;		_strlen
  3224 ;;		_USART_Send
  3225 ;; This function is called by:
  3226 ;;		_command_read_adc
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function _send_WAIT
  3232  077C                     _send_WAIT:	
  3233                           
  3234                           ;main.c: 125: const uint8_t* reply = "WAIT\n";
  3235                           
  3236                           ;incstack = 0
  3237                           ; Regs used in _send_WAIT: [wreg+status,2+status,0+pclath+cstack]
  3238  077C  30C5               	movlw	(STR_4| (0+32768))& (0+255)
  3239  077D  00FB               	movwf	??_send_WAIT
  3240  077E  087B               	movf	??_send_WAIT,w
  3241  077F  0020               	movlb	0	; select bank0
  3242  0780  00DD               	movwf	send_WAIT@reply
  3243                           
  3244                           ;main.c: 126: transmit_data_length = strlen(reply);
  3245  0781  085D               	movf	send_WAIT@reply,w
  3246  0782  3185  25DB  3187   	fcall	_strlen
  3247  0785  0871               	movf	?_strlen,w
  3248  0786  00FB               	movwf	??_send_WAIT
  3249  0787  087B               	movf	??_send_WAIT,w
  3250  0788  0020               	movlb	0	; select bank0
  3251  0789  00A6               	movwf	_transmit_data_length
  3252                           
  3253                           ;main.c: 127: USART_Send(reply,transmit_data_length);
  3254  078A  0826               	movf	_transmit_data_length,w
  3255  078B  00FB               	movwf	??_send_WAIT
  3256  078C  087B               	movf	??_send_WAIT,w
  3257  078D  00F9               	movwf	?_USART_Send
  3258  078E  085D               	movf	send_WAIT@reply,w
  3259  078F  3187  2733         	fcall	_USART_Send
  3260  0791  0008               	return
  3261  0792                     __end_of_send_WAIT:	
  3262                           
  3263                           	psect	text14
  3264  04AC                     __ptext14:	
  3265 ;; *************** function _MCP3550_Read *****************
  3266 ;; Defined at:
  3267 ;;		line 22 in file "spi/spi_software.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  adc_data        1    wreg     PTR unsigned char 
  3270 ;;		 -> command_read_adc@adc_data(6), 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  adc_data        1    8[COMMON] PTR unsigned char 
  3273 ;;		 -> command_read_adc@adc_data(6), 
  3274 ;;  data_ready      1    7[COMMON] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      unsigned char 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3287 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3288 ;;Total ram usage:        3 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    4
  3291 ;; This function calls:
  3292 ;;		_SPIDelay
  3293 ;;		_Read2BytesSPI
  3294 ;; This function is called by:
  3295 ;;		_command_read_adc
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _MCP3550_Read
  3301  04AC                     _MCP3550_Read:	
  3302                           
  3303                           ;incstack = 0
  3304                           ; Regs used in _MCP3550_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3305                           ;MCP3550_Read@adc_data stored from wreg
  3306  04AC  00F8               	movwf	MCP3550_Read@adc_data
  3307                           
  3308                           ;spi_software.c: 23: uint8_t data_ready = 0;
  3309  04AD  01F7               	clrf	MCP3550_Read@data_ready
  3310                           
  3311                           ;spi_software.c: 25: LATCbits.LATC3 = 0;
  3312  04AE  0022               	movlb	2	; select bank2
  3313  04AF  118E               	bcf	14,3	;volatile
  3314                           
  3315                           ;spi_software.c: 26: SPIDelay();
  3316  04B0  318F  2792  3184   	fcall	_SPIDelay
  3317                           
  3318                           ;spi_software.c: 27: if(!PORTBbits.RB4)
  3319  04B3  0020               	movlb	0	; select bank0
  3320  04B4  1A0D               	btfsc	13,4	;volatile
  3321  04B5  2CDE               	goto	l2276
  3322                           
  3323                           ;spi_software.c: 28: {
  3324                           ;spi_software.c: 29: Read2BytesSPI(adc_data,adc_data+3);
  3325  04B6  0878               	movf	MCP3550_Read@adc_data,w
  3326  04B7  3E03               	addlw	3
  3327  04B8  00F6               	movwf	??_MCP3550_Read
  3328  04B9  0876               	movf	??_MCP3550_Read,w
  3329  04BA  00F2               	movwf	?_Read2BytesSPI
  3330  04BB  0878               	movf	MCP3550_Read@adc_data,w
  3331  04BC  3184  2472  3184   	fcall	_Read2BytesSPI
  3332                           
  3333                           ;spi_software.c: 30: Read2BytesSPI(adc_data+1,adc_data+4);
  3334  04BF  0878               	movf	MCP3550_Read@adc_data,w
  3335  04C0  3E04               	addlw	4
  3336  04C1  00F6               	movwf	??_MCP3550_Read
  3337  04C2  0876               	movf	??_MCP3550_Read,w
  3338  04C3  00F2               	movwf	?_Read2BytesSPI
  3339  04C4  0A78               	incf	MCP3550_Read@adc_data,w
  3340  04C5  3184  2472  3184   	fcall	_Read2BytesSPI
  3341                           
  3342                           ;spi_software.c: 31: Read2BytesSPI(adc_data+2,adc_data+5);
  3343  04C8  0878               	movf	MCP3550_Read@adc_data,w
  3344  04C9  3E05               	addlw	5
  3345  04CA  00F6               	movwf	??_MCP3550_Read
  3346  04CB  0876               	movf	??_MCP3550_Read,w
  3347  04CC  00F2               	movwf	?_Read2BytesSPI
  3348  04CD  0878               	movf	MCP3550_Read@adc_data,w
  3349  04CE  3E02               	addlw	2
  3350  04CF  3184  2472  3184   	fcall	_Read2BytesSPI
  3351                           
  3352                           ;spi_software.c: 32: data_ready = 1;
  3353  04D2  01F7               	clrf	MCP3550_Read@data_ready
  3354  04D3  0AF7               	incf	MCP3550_Read@data_ready,f
  3355                           
  3356                           ;spi_software.c: 34: LATCbits.LATC3 = 1;
  3357  04D4  0022               	movlb	2	; select bank2
  3358  04D5  158E               	bsf	14,3	;volatile
  3359                           
  3360                           ;spi_software.c: 35: SPIDelay();
  3361  04D6  318F  2792  3184   	fcall	_SPIDelay
  3362                           
  3363                           ;spi_software.c: 36: LATCbits.LATC3 = 0;
  3364  04D9  0022               	movlb	2	; select bank2
  3365  04DA  118E               	bcf	14,3	;volatile
  3366                           
  3367                           ;spi_software.c: 37: SPIDelay();
  3368  04DB  318F  2792  3184   	fcall	_SPIDelay
  3369  04DE                     l2276:	
  3370                           
  3371                           ;spi_software.c: 38: }
  3372                           ;spi_software.c: 39: LATCbits.LATC3 = 1;
  3373  04DE  0022               	movlb	2	; select bank2
  3374  04DF  158E               	bsf	14,3	;volatile
  3375                           
  3376                           ;spi_software.c: 40: SPIDelay();
  3377  04E0  318F  2792         	fcall	_SPIDelay
  3378                           
  3379                           ;spi_software.c: 41: return data_ready;
  3380  04E2  0877               	movf	MCP3550_Read@data_ready,w
  3381  04E3  0008               	return
  3382  04E4                     __end_of_MCP3550_Read:	
  3383                           
  3384                           	psect	text15
  3385  0472                     __ptext15:	
  3386 ;; *************** function _Read2BytesSPI *****************
  3387 ;; Defined at:
  3388 ;;		line 132 in file "spi/spi_software.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  data1_byte      1    wreg     PTR unsigned char 
  3391 ;;		 -> command_read_adc@adc_data(6), 
  3392 ;;  data2_byte      1    2[COMMON] PTR unsigned char 
  3393 ;;		 -> command_read_adc@adc_data(6), 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  data1_byte      1    5[COMMON] PTR unsigned char 
  3396 ;;		 -> command_read_adc@adc_data(6), 
  3397 ;;  bit_counter     1    4[COMMON] unsigned char 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;		None               void
  3400 ;; Registers used:
  3401 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3407 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;Total ram usage:        4 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    3
  3414 ;; This function calls:
  3415 ;;		_ClockPulse
  3416 ;; This function is called by:
  3417 ;;		_MCP3550_Read
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function _Read2BytesSPI
  3423  0472                     _Read2BytesSPI:	
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in _Read2BytesSPI: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3427                           ;Read2BytesSPI@data1_byte stored from wreg
  3428  0472  00F5               	movwf	Read2BytesSPI@data1_byte
  3429                           
  3430                           ;spi_software.c: 133: *data1_byte = 0;
  3431  0473  0875               	movf	Read2BytesSPI@data1_byte,w
  3432  0474  0086               	movwf	6
  3433  0475  0187               	clrf	7
  3434  0476  0181               	clrf	1
  3435                           
  3436                           ;spi_software.c: 134: *data2_byte = 0;
  3437  0477  0872               	movf	Read2BytesSPI@data2_byte,w
  3438  0478  0086               	movwf	6
  3439  0479  0187               	clrf	7
  3440  047A  0181               	clrf	1
  3441                           
  3442                           ;spi_software.c: 135: uint8_t bit_counter = 8;
  3443  047B  3008               	movlw	8
  3444  047C  00F3               	movwf	??_Read2BytesSPI
  3445  047D  0873               	movf	??_Read2BytesSPI,w
  3446  047E  00F4               	movwf	Read2BytesSPI@bit_counter
  3447  047F                     l2290:	
  3448                           ;spi_software.c: 136: do
  3449                           
  3450                           
  3451                           ;spi_software.c: 137: {
  3452                           ;spi_software.c: 138: ClockPulse();
  3453  047F  318F  27BC  3184   	fcall	_ClockPulse
  3454                           
  3455                           ;spi_software.c: 139: *data1_byte <<= 1;
  3456  0482  0875               	movf	Read2BytesSPI@data1_byte,w
  3457  0483  0086               	movwf	6
  3458  0484  0187               	clrf	7
  3459  0485  1003               	clrc
  3460  0486  0D81               	rlf	1,f
  3461                           
  3462                           ;spi_software.c: 140: *data2_byte <<= 1;
  3463  0487  0872               	movf	Read2BytesSPI@data2_byte,w
  3464  0488  0086               	movwf	6
  3465  0489  0187               	clrf	7
  3466  048A  1003               	clrc
  3467  048B  0D81               	rlf	1,f
  3468                           
  3469                           ;spi_software.c: 141: *data1_byte &= 0xFE;
  3470  048C  30FE               	movlw	254
  3471  048D  00F3               	movwf	??_Read2BytesSPI
  3472  048E  0875               	movf	Read2BytesSPI@data1_byte,w
  3473  048F  0086               	movwf	6
  3474  0490  0187               	clrf	7
  3475  0491  0873               	movf	??_Read2BytesSPI,w
  3476  0492  0581               	andwf	1,f
  3477                           
  3478                           ;spi_software.c: 142: *data2_byte &= 0xFE;
  3479  0493  30FE               	movlw	254
  3480  0494  00F3               	movwf	??_Read2BytesSPI
  3481  0495  0872               	movf	Read2BytesSPI@data2_byte,w
  3482  0496  0086               	movwf	6
  3483  0497  0187               	clrf	7
  3484  0498  0873               	movf	??_Read2BytesSPI,w
  3485  0499  0581               	andwf	1,f
  3486                           
  3487                           ;spi_software.c: 143: if(PORTBbits.RB4)
  3488  049A  0020               	movlb	0	; select bank0
  3489  049B  1E0D               	btfss	13,4	;volatile
  3490  049C  2CA1               	goto	l2304
  3491                           
  3492                           ;spi_software.c: 144: *data1_byte |= 0x01;
  3493  049D  0875               	movf	Read2BytesSPI@data1_byte,w
  3494  049E  0086               	movwf	6
  3495  049F  0187               	clrf	7
  3496  04A0  1401               	bsf	1,0
  3497  04A1                     l2304:	
  3498                           
  3499                           ;spi_software.c: 145: if(PORTCbits.RC7)
  3500  04A1  1F8E               	btfss	14,7	;volatile
  3501  04A2  2CA7               	goto	l2308
  3502                           
  3503                           ;spi_software.c: 146: *data2_byte |= 0x01;
  3504  04A3  0872               	movf	Read2BytesSPI@data2_byte,w
  3505  04A4  0086               	movwf	6
  3506  04A5  0187               	clrf	7
  3507  04A6  1401               	bsf	1,0
  3508  04A7                     l2308:	
  3509                           
  3510                           ;spi_software.c: 147: } while (--bit_counter);
  3511  04A7  3001               	movlw	1
  3512  04A8  02F4               	subwf	Read2BytesSPI@bit_counter,f
  3513  04A9  1903               	btfsc	3,2
  3514  04AA  0008               	return
  3515  04AB  2C7F               	goto	l2290
  3516  04AC                     __end_of_Read2BytesSPI:	
  3517                           
  3518                           	psect	text16
  3519  042F                     __ptext16:	
  3520 ;; *************** function _command_calibrate_dac *****************
  3521 ;; Defined at:
  3522 ;;		line 188 in file "main.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  data            6    6[BANK0 ] unsigned char [6]
  3527 ;; Return value:  Size  Location     Type
  3528 ;;		None               void
  3529 ;; Registers used:
  3530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3537 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;Total ram usage:        9 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    6
  3543 ;; This function calls:
  3544 ;;		_HEFLASH_writeBlock
  3545 ;;		_DAC1220_Read3Bytes
  3546 ;;		_DAC1220_SelfCal
  3547 ;;		_send_OK
  3548 ;; This function is called by:
  3549 ;;		_interpret_command
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _command_calibrate_dac
  3555  042F                     _command_calibrate_dac:	
  3556                           
  3557                           ;main.c: 189: DAC1220_SelfCal();
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _command_calibrate_dac: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3561  042F  3180  20F4  3184   	fcall	_DAC1220_SelfCal
  3562                           
  3563                           ;main.c: 190: _delay((unsigned long)((500)*(48000000/4000.0)));
  3564  0432  301F               	movlw	31
  3565  0433  0020               	movlb	0	; select bank0
  3566  0434  00E0               	movwf	??_command_calibrate_dac+2
  3567  0435  3071               	movlw	113
  3568  0436  00DF               	movwf	??_command_calibrate_dac+1
  3569  0437  303B               	movlw	59
  3570  0438  00DE               	movwf	??_command_calibrate_dac
  3571  0439                     u1837:	
  3572  0439  0BDE               	decfsz	??_command_calibrate_dac,f
  3573  043A  2C39               	goto	u1837
  3574  043B  0BDF               	decfsz	??_command_calibrate_dac+1,f
  3575  043C  2C39               	goto	u1837
  3576  043D  0BE0               	decfsz	??_command_calibrate_dac+2,f
  3577  043E  2C39               	goto	u1837
  3578  043F  0000               	nop
  3579                           
  3580                           ;main.c: 191: uint8_t data[6];
  3581                           ;main.c: 192: DAC1220_Read3Bytes(8, data, data+1, data+2);
  3582  0440  3061               	movlw	command_calibrate_dac@data& (0+255)
  3583  0441  0020               	movlb	0	; select bank0
  3584  0442  00DE               	movwf	??_command_calibrate_dac
  3585  0443  085E               	movf	??_command_calibrate_dac,w
  3586  0444  00F5               	movwf	?_DAC1220_Read3Bytes
  3587  0445  3062               	movlw	(command_calibrate_dac@data+1)& (0+255)
  3588  0446  00DF               	movwf	??_command_calibrate_dac+1
  3589  0447  085F               	movf	??_command_calibrate_dac+1,w
  3590  0448  00F6               	movwf	?_DAC1220_Read3Bytes+1
  3591  0449  3063               	movlw	(command_calibrate_dac@data+2)& (0+255)
  3592  044A  00E0               	movwf	??_command_calibrate_dac+2
  3593  044B  0860               	movf	??_command_calibrate_dac+2,w
  3594  044C  00F7               	movwf	?_DAC1220_Read3Bytes+2
  3595  044D  3008               	movlw	8
  3596  044E  3185  2551  3184   	fcall	_DAC1220_Read3Bytes
  3597                           
  3598                           ;main.c: 193: DAC1220_Read3Bytes(12, data+3, data+4, data+5);
  3599  0451  3064               	movlw	(command_calibrate_dac@data+3)& (0+255)
  3600  0452  0020               	movlb	0	; select bank0
  3601  0453  00DE               	movwf	??_command_calibrate_dac
  3602  0454  085E               	movf	??_command_calibrate_dac,w
  3603  0455  00F5               	movwf	?_DAC1220_Read3Bytes
  3604  0456  3065               	movlw	(command_calibrate_dac@data+4)& (0+255)
  3605  0457  00DF               	movwf	??_command_calibrate_dac+1
  3606  0458  085F               	movf	??_command_calibrate_dac+1,w
  3607  0459  00F6               	movwf	?_DAC1220_Read3Bytes+1
  3608  045A  3066               	movlw	(command_calibrate_dac@data+5)& (0+255)
  3609  045B  00E0               	movwf	??_command_calibrate_dac+2
  3610  045C  0860               	movf	??_command_calibrate_dac+2,w
  3611  045D  00F7               	movwf	?_DAC1220_Read3Bytes+2
  3612  045E  300C               	movlw	12
  3613  045F  3185  2551  3184   	fcall	_DAC1220_Read3Bytes
  3614                           
  3615                           ;main.c: 194: HEFLASH_writeBlock(2, data, 6);
  3616  0462  3061               	movlw	low command_calibrate_dac@data
  3617  0463  00F7               	movwf	?_HEFLASH_writeBlock
  3618  0464  3000               	movlw	high command_calibrate_dac@data
  3619  0465  00F8               	movwf	?_HEFLASH_writeBlock+1
  3620  0466  3006               	movlw	6
  3621  0467  0020               	movlb	0	; select bank0
  3622  0468  00DE               	movwf	??_command_calibrate_dac
  3623  0469  085E               	movf	??_command_calibrate_dac,w
  3624  046A  00F9               	movwf	?_HEFLASH_writeBlock+2
  3625  046B  3002               	movlw	2
  3626  046C  3183  2342  3184   	fcall	_HEFLASH_writeBlock
  3627                           
  3628                           ;main.c: 195: send_OK();
  3629  046F  3187  2792         	fcall	_send_OK
  3630  0471  0008               	return
  3631  0472                     __end_of_command_calibrate_dac:	
  3632                           
  3633                           	psect	text17
  3634  00F4                     __ptext17:	
  3635 ;; *************** function _DAC1220_SelfCal *****************
  3636 ;; Defined at:
  3637 ;;		line 127 in file "spi/spi_software.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;		None               void
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    5
  3658 ;; This function calls:
  3659 ;;		_DAC1220_Write2Bytes
  3660 ;; This function is called by:
  3661 ;;		_command_calibrate_dac
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _DAC1220_SelfCal
  3667  00F4                     _DAC1220_SelfCal:	
  3668                           
  3669                           ;spi_software.c: 128: DAC1220_Write2Bytes(4, 32, 161);
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _DAC1220_SelfCal: [wreg+status,2+status,0+pclath+cstack]
  3673  00F4  3020               	movlw	32
  3674  00F5  00F8               	movwf	??_DAC1220_SelfCal
  3675  00F6  0878               	movf	??_DAC1220_SelfCal,w
  3676  00F7  00F5               	movwf	?_DAC1220_Write2Bytes
  3677  00F8  30A1               	movlw	161
  3678  00F9  00F9               	movwf	??_DAC1220_SelfCal+1
  3679  00FA  0879               	movf	??_DAC1220_SelfCal+1,w
  3680  00FB  00F6               	movwf	?_DAC1220_Write2Bytes+1
  3681  00FC  3004               	movlw	4
  3682  00FD  3186  26E4         	fcall	_DAC1220_Write2Bytes
  3683  00FF  0008               	return
  3684  0100                     __end_of_DAC1220_SelfCal:	
  3685                           
  3686                           	psect	text18
  3687  0551                     __ptext18:	
  3688 ;; *************** function _DAC1220_Read3Bytes *****************
  3689 ;; Defined at:
  3690 ;;		line 106 in file "spi/spi_software.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  address         1    wreg     const unsigned char 
  3693 ;;  byte1           1    5[COMMON] PTR unsigned char 
  3694 ;;		 -> command_calibrate_dac@data(6), 
  3695 ;;  byte2           1    6[COMMON] PTR unsigned char 
  3696 ;;		 -> command_calibrate_dac@data(6), 
  3697 ;;  byte3           1    7[COMMON] PTR unsigned char 
  3698 ;;		 -> command_calibrate_dac@data(6), 
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  address         1    9[COMMON] const unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3710 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3713 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3714 ;;Total ram usage:        5 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    4
  3717 ;; This function calls:
  3718 ;;		_SPIDelay
  3719 ;;		_WriteByteSPI
  3720 ;;		_ReadByteSPI
  3721 ;; This function is called by:
  3722 ;;		_command_calibrate_dac
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           
  3727                           ;psect for function _DAC1220_Read3Bytes
  3728  0551                     _DAC1220_Read3Bytes:	
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in _DAC1220_Read3Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3732                           ;DAC1220_Read3Bytes@address stored from wreg
  3733  0551  00F9               	movwf	DAC1220_Read3Bytes@address
  3734                           
  3735                           ;spi_software.c: 107: LATBbits.LATB6 = 0;
  3736  0552  0022               	movlb	2	; select bank2
  3737  0553  130D               	bcf	13,6	;volatile
  3738                           
  3739                           ;spi_software.c: 108: SPIDelay();
  3740  0554  318F  2792  3185   	fcall	_SPIDelay
  3741                           
  3742                           ;spi_software.c: 109: TRISBbits.TRISB4 = 0;
  3743  0557  0021               	movlb	1	; select bank1
  3744  0558  120D               	bcf	13,4	;volatile
  3745                           
  3746                           ;spi_software.c: 110: WriteByteSPI(192+address);
  3747  0559  0879               	movf	DAC1220_Read3Bytes@address,w
  3748  055A  3EC0               	addlw	192
  3749  055B  3187  2700  3185   	fcall	_WriteByteSPI
  3750                           
  3751                           ;spi_software.c: 111: TRISBbits.TRISB4 = 1;
  3752  055E  0021               	movlb	1	; select bank1
  3753  055F  160D               	bsf	13,4	;volatile
  3754                           
  3755                           ;spi_software.c: 112: SPIDelay();
  3756  0560  318F  2792  3185   	fcall	_SPIDelay
  3757                           
  3758                           ;spi_software.c: 113: *byte1 = ReadByteSPI();
  3759  0563  3187  2765  3185   	fcall	_ReadByteSPI
  3760  0566  00F8               	movwf	??_DAC1220_Read3Bytes
  3761  0567  0875               	movf	DAC1220_Read3Bytes@byte1,w
  3762  0568  0086               	movwf	6
  3763  0569  0187               	clrf	7
  3764  056A  0878               	movf	??_DAC1220_Read3Bytes,w
  3765  056B  0081               	movwf	1
  3766                           
  3767                           ;spi_software.c: 114: *byte2 = ReadByteSPI();
  3768  056C  3187  2765  3185   	fcall	_ReadByteSPI
  3769  056F  00F8               	movwf	??_DAC1220_Read3Bytes
  3770  0570  0876               	movf	DAC1220_Read3Bytes@byte2,w
  3771  0571  0086               	movwf	6
  3772  0572  0187               	clrf	7
  3773  0573  0878               	movf	??_DAC1220_Read3Bytes,w
  3774  0574  0081               	movwf	1
  3775                           
  3776                           ;spi_software.c: 115: *byte3 = ReadByteSPI();
  3777  0575  3187  2765  3185   	fcall	_ReadByteSPI
  3778  0578  00F8               	movwf	??_DAC1220_Read3Bytes
  3779  0579  0877               	movf	DAC1220_Read3Bytes@byte3,w
  3780  057A  0086               	movwf	6
  3781  057B  0187               	clrf	7
  3782  057C  0878               	movf	??_DAC1220_Read3Bytes,w
  3783  057D  0081               	movwf	1
  3784                           
  3785                           ;spi_software.c: 116: LATBbits.LATB6 = 1;
  3786  057E  0022               	movlb	2	; select bank2
  3787  057F  170D               	bsf	13,6	;volatile
  3788                           
  3789                           ;spi_software.c: 117: SPIDelay();
  3790  0580  318F  2792         	fcall	_SPIDelay
  3791  0582  0008               	return
  3792  0583                     __end_of_DAC1220_Read3Bytes:	
  3793                           
  3794                           	psect	text19
  3795  0765                     __ptext19:	
  3796 ;; *************** function _ReadByteSPI *****************
  3797 ;; Defined at:
  3798 ;;		line 151 in file "spi/spi_software.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  data_byte       1    4[COMMON] unsigned char 
  3803 ;;  bit_counter     1    3[COMMON] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      unsigned char 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0, pclath, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3816 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3817 ;;Total ram usage:        3 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    3
  3820 ;; This function calls:
  3821 ;;		_ClockPulse
  3822 ;; This function is called by:
  3823 ;;		_DAC1220_Read3Bytes
  3824 ;;		_DAC1220_Read2Bytes
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           
  3829                           ;psect for function _ReadByteSPI
  3830  0765                     _ReadByteSPI:	
  3831                           
  3832                           ;spi_software.c: 152: uint8_t data_byte = 0;
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in _ReadByteSPI: [wreg+status,2+status,0+pclath+cstack]
  3836  0765  01F4               	clrf	ReadByteSPI@data_byte
  3837                           
  3838                           ;spi_software.c: 153: uint8_t bit_counter = 8;
  3839  0766  3008               	movlw	8
  3840  0767  00F2               	movwf	??_ReadByteSPI
  3841  0768  0872               	movf	??_ReadByteSPI,w
  3842  0769  00F3               	movwf	ReadByteSPI@bit_counter
  3843  076A                     l2384:	
  3844                           ;spi_software.c: 154: do
  3845                           
  3846                           
  3847                           ;spi_software.c: 155: {
  3848                           ;spi_software.c: 156: ClockPulse();
  3849  076A  318F  27BC  3187   	fcall	_ClockPulse
  3850                           
  3851                           ;spi_software.c: 157: data_byte <<= 1;
  3852  076D  1003               	clrc
  3853  076E  0DF4               	rlf	ReadByteSPI@data_byte,f
  3854                           
  3855                           ;spi_software.c: 158: data_byte &= 0xFE;
  3856  076F  30FE               	movlw	254
  3857  0770  00F2               	movwf	??_ReadByteSPI
  3858  0771  0872               	movf	??_ReadByteSPI,w
  3859  0772  05F4               	andwf	ReadByteSPI@data_byte,f
  3860                           
  3861                           ;spi_software.c: 159: if(PORTBbits.RB4)
  3862  0773  0020               	movlb	0	; select bank0
  3863  0774  1A0D               	btfsc	13,4	;volatile
  3864                           
  3865                           ;spi_software.c: 160: data_byte |= 0x01;
  3866  0775  1474               	bsf	ReadByteSPI@data_byte,0
  3867                           
  3868                           ;spi_software.c: 161: } while (--bit_counter);
  3869  0776  3001               	movlw	1
  3870  0777  02F3               	subwf	ReadByteSPI@bit_counter,f
  3871  0778  1D03               	btfss	3,2
  3872  0779  2F6A               	goto	l2384
  3873                           
  3874                           ;spi_software.c: 162: return data_byte;
  3875  077A  0874               	movf	ReadByteSPI@data_byte,w
  3876  077B  0008               	return
  3877  077C                     __end_of_ReadByteSPI:	
  3878                           
  3879                           	psect	text20
  3880  0342                     __ptext20:	
  3881 ;; *************** function _HEFLASH_writeBlock *****************
  3882 ;; Defined at:
  3883 ;;		line 18 in file "heflash/HEFlash.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  radd            1    wreg     unsigned char 
  3886 ;;  data            2    7[COMMON] PTR const unsigned char 
  3887 ;;		 -> command_calibrate_dac@data(6), ROM(8192), 
  3888 ;;  count           1    9[COMMON] unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  radd            1    0[BANK0 ] unsigned char 
  3891 ;;  add             2    1[BANK0 ] unsigned int 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      unsigned char 
  3894 ;; Registers used:
  3895 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3901 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;Total ram usage:        8 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    3
  3908 ;; This function calls:
  3909 ;;		_FLASH_write
  3910 ;;		_FLASH_erase
  3911 ;; This function is called by:
  3912 ;;		_command_calibrate_dac
  3913 ;;		_command_save_offset
  3914 ;;		_command_save_shuntcalibration
  3915 ;;		_command_set_dac_cal
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function _HEFLASH_writeBlock
  3921  0342                     _HEFLASH_writeBlock:	
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in _HEFLASH_writeBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3925                           ;HEFLASH_writeBlock@radd stored from wreg
  3926  0342  0020               	movlb	0	; select bank0
  3927  0343  00DB               	movwf	HEFLASH_writeBlock@radd
  3928                           
  3929                           ;HEFlash.c: 20: unsigned add = radd * 32 + 0x1F80;
  3930  0344  085B               	movf	HEFLASH_writeBlock@radd,w
  3931  0345  00FA               	movwf	??_HEFLASH_writeBlock
  3932  0346  01FB               	clrf	??_HEFLASH_writeBlock+1
  3933  0347  3005               	movlw	5
  3934  0348                     u705:	
  3935  0348  35FA               	lslf	??_HEFLASH_writeBlock,f
  3936  0349  0DFB               	rlf	??_HEFLASH_writeBlock+1,f
  3937  034A  0B89               	decfsz	9,f
  3938  034B  2B48               	goto	u705
  3939  034C  087A               	movf	??_HEFLASH_writeBlock,w
  3940  034D  3E80               	addlw	128
  3941  034E  00DC               	movwf	HEFLASH_writeBlock@add
  3942  034F  301F               	movlw	31
  3943  0350  3D7B               	addwfc	??_HEFLASH_writeBlock+1,w
  3944  0351  00DD               	movwf	HEFLASH_writeBlock@add+1
  3945                           
  3946                           ;HEFlash.c: 23: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  3947  0352  3021               	movlw	33
  3948  0353  0279               	subwf	HEFLASH_writeBlock@count,w
  3949  0354  1803               	skipnc
  3950  0355  0008               	return
  3951  0356  3004               	movlw	4
  3952  0357  025B               	subwf	HEFLASH_writeBlock@radd,w
  3953  0358  1803               	btfsc	3,0
  3954  0359  0008               	return
  3955                           
  3956                           ;HEFlash.c: 27: FLASH_erase( add);
  3957                           
  3958                           ;HEFlash.c: 24: return -1;
  3959                           ;	Return value of _HEFLASH_writeBlock is never used
  3960  035A  085D               	movf	HEFLASH_writeBlock@add+1,w
  3961  035B  01F2               	clrf	?_FLASH_erase+1
  3962  035C  07F2               	addwf	?_FLASH_erase+1,f
  3963  035D  085C               	movf	HEFLASH_writeBlock@add,w
  3964  035E  01F1               	clrf	?_FLASH_erase
  3965  035F  07F1               	addwf	?_FLASH_erase,f
  3966  0360  3187  271A  3183   	fcall	_FLASH_erase
  3967  0363                     l1608:	
  3968                           ;HEFlash.c: 30: while( count > 1)
  3969                           
  3970  0363  3002               	movlw	2
  3971  0364  0279               	subwf	HEFLASH_writeBlock@count,w
  3972  0365  1C03               	btfss	3,0
  3973  0366  2B8A               	goto	l1610
  3974                           
  3975                           ;HEFlash.c: 31: {
  3976                           ;HEFlash.c: 33: FLASH_write( add++, (unsigned) *data++, 1);
  3977  0367  0020               	movlb	0	; select bank0
  3978  0368  085D               	movf	HEFLASH_writeBlock@add+1,w
  3979  0369  01F2               	clrf	?_FLASH_write+1
  3980  036A  07F2               	addwf	?_FLASH_write+1,f
  3981  036B  085C               	movf	HEFLASH_writeBlock@add,w
  3982  036C  01F1               	clrf	?_FLASH_write
  3983  036D  07F1               	addwf	?_FLASH_write,f
  3984  036E  0877               	movf	HEFLASH_writeBlock@data,w
  3985  036F  0084               	movwf	4
  3986  0370  0878               	movf	HEFLASH_writeBlock@data+1,w
  3987  0371  0085               	movwf	5
  3988  0372  0800               	movf	0,w	;code access
  3989  0373  00FA               	movwf	??_HEFLASH_writeBlock
  3990  0374  01FB               	clrf	??_HEFLASH_writeBlock+1
  3991  0375  087A               	movf	??_HEFLASH_writeBlock,w
  3992  0376  00F3               	movwf	?_FLASH_write+2
  3993  0377  087B               	movf	??_HEFLASH_writeBlock+1,w
  3994  0378  00F4               	movwf	?_FLASH_write+3
  3995  0379  01F5               	clrf	?_FLASH_write+4
  3996  037A  0AF5               	incf	?_FLASH_write+4,f
  3997  037B  3186  2622  3183   	fcall	_FLASH_write
  3998  037E  3001               	movlw	1
  3999  037F  07F7               	addwf	HEFLASH_writeBlock@data,f
  4000  0380  3000               	movlw	0
  4001  0381  3DF8               	addwfc	HEFLASH_writeBlock@data+1,f
  4002  0382  3001               	movlw	1
  4003  0383  0020               	movlb	0	; select bank0
  4004  0384  07DC               	addwf	HEFLASH_writeBlock@add,f
  4005  0385  3000               	movlw	0
  4006  0386  3DDD               	addwfc	HEFLASH_writeBlock@add+1,f
  4007                           
  4008                           ;HEFlash.c: 34: count--;
  4009  0387  3001               	movlw	1
  4010  0388  02F9               	subwf	HEFLASH_writeBlock@count,f
  4011  0389  2B63               	goto	l1608
  4012  038A                     l1610:	
  4013                           
  4014                           ;HEFlash.c: 35: }
  4015                           ;HEFlash.c: 39: FLASH_write( add, (unsigned) *data, 0);
  4016  038A  0020               	movlb	0	; select bank0
  4017  038B  085D               	movf	HEFLASH_writeBlock@add+1,w
  4018  038C  01F2               	clrf	?_FLASH_write+1
  4019  038D  07F2               	addwf	?_FLASH_write+1,f
  4020  038E  085C               	movf	HEFLASH_writeBlock@add,w
  4021  038F  01F1               	clrf	?_FLASH_write
  4022  0390  07F1               	addwf	?_FLASH_write,f
  4023  0391  0877               	movf	HEFLASH_writeBlock@data,w
  4024  0392  0084               	movwf	4
  4025  0393  0878               	movf	HEFLASH_writeBlock@data+1,w
  4026  0394  0085               	movwf	5
  4027  0395  0800               	movf	0,w	;code access
  4028  0396  00FA               	movwf	??_HEFLASH_writeBlock
  4029  0397  01FB               	clrf	??_HEFLASH_writeBlock+1
  4030  0398  087A               	movf	??_HEFLASH_writeBlock,w
  4031  0399  00F3               	movwf	?_FLASH_write+2
  4032  039A  087B               	movf	??_HEFLASH_writeBlock+1,w
  4033  039B  00F4               	movwf	?_FLASH_write+3
  4034  039C  01F5               	clrf	?_FLASH_write+4
  4035  039D  3186  2622         	fcall	_FLASH_write
  4036                           
  4037                           ;HEFlash.c: 44: return PMCON1bits.WRERR;
  4038                           ;	Return value of _HEFLASH_writeBlock is never used
  4039  039F  0023               	movlb	3	; select bank3
  4040  03A0  0815               	movf	21,w	;volatile
  4041  03A1  0008               	return
  4042  03A2                     __end_of_HEFLASH_writeBlock:	
  4043                           
  4044                           	psect	text21
  4045  071A                     __ptext21:	
  4046 ;; *************** function _FLASH_erase *****************
  4047 ;; Defined at:
  4048 ;;		line 100 in file "heflash/Flash.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  address         2    1[COMMON] unsigned int 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  temp            1    3[COMMON] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0, pclath, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;Total ram usage:        3 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    2
  4069 ;; This function calls:
  4070 ;;		__unlock
  4071 ;; This function is called by:
  4072 ;;		_HEFLASH_writeBlock
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _FLASH_erase
  4078  071A                     _FLASH_erase:	
  4079                           
  4080                           ;Flash.c: 102: char temp = INTCONbits.GIE;
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _FLASH_erase: [wreg+status,2+status,0+pclath+cstack]
  4084  071A  3000               	movlw	0
  4085  071B  1B8B               	btfsc	11,7	;volatile
  4086  071C  3001               	movlw	1
  4087  071D  00F3               	movwf	FLASH_erase@temp
  4088                           
  4089                           ;Flash.c: 103: INTCONbits.GIE = 0;
  4090  071E  138B               	bcf	11,7	;volatile
  4091                           
  4092                           ;Flash.c: 107: PMADR = address;
  4093  071F  0872               	movf	FLASH_erase@address+1,w
  4094  0720  0023               	movlb	3	; select bank3
  4095  0721  0192               	clrf	18	;volatile
  4096  0722  0792               	addwf	18,f	;volatile
  4097  0723  0871               	movf	FLASH_erase@address,w
  4098  0724  0191               	clrf	17	;volatile
  4099  0725  0791               	addwf	17,f	;volatile
  4100                           
  4101                           ;Flash.c: 108: PMCON1bits.CFGS = 0;
  4102  0726  1315               	bcf	21,6	;volatile
  4103                           
  4104                           ;Flash.c: 109: PMCON1bits.FREE = 1;
  4105  0727  1615               	bsf	21,4	;volatile
  4106                           
  4107                           ;Flash.c: 110: PMCON1bits.WREN = 1;
  4108  0728  1515               	bsf	21,2	;volatile
  4109                           
  4110                           ;Flash.c: 113: _unlock();
  4111  0729  318F  27B3  3187   	fcall	__unlock
  4112                           
  4113                           ;Flash.c: 116: PMCON1bits.WREN = 0;
  4114  072C  0023               	movlb	3	; select bank3
  4115  072D  1115               	bcf	21,2	;volatile
  4116                           
  4117                           ;Flash.c: 117: if ( temp)
  4118  072E  0873               	movf	FLASH_erase@temp,w
  4119  072F  1903               	btfsc	3,2
  4120  0730  0008               	return
  4121                           
  4122                           ;Flash.c: 118: INTCONbits.GIE = 1;
  4123  0731  178B               	bsf	11,7	;volatile
  4124  0732  0008               	return
  4125  0733                     __end_of_FLASH_erase:	
  4126                           
  4127                           	psect	text22
  4128  0622                     __ptext22:	
  4129 ;; *************** function _FLASH_write *****************
  4130 ;; Defined at:
  4131 ;;		line 76 in file "heflash/Flash.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  address         2    1[COMMON] unsigned int 
  4134 ;;  data            2    3[COMMON] unsigned int 
  4135 ;;  latch           1    5[COMMON] unsigned char 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  temp            1    6[COMMON] unsigned char 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;		None               void
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, status,0, pclath, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4147 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;Total ram usage:        6 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    2
  4154 ;; This function calls:
  4155 ;;		__unlock
  4156 ;; This function is called by:
  4157 ;;		_HEFLASH_writeBlock
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           
  4162                           ;psect for function _FLASH_write
  4163  0622                     _FLASH_write:	
  4164                           
  4165                           ;Flash.c: 78: char temp = INTCONbits.GIE;
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _FLASH_write: [wreg+status,2+status,0+pclath+cstack]
  4169  0622  3000               	movlw	0
  4170  0623  1B8B               	btfsc	11,7	;volatile
  4171  0624  3001               	movlw	1
  4172  0625  00F6               	movwf	FLASH_write@temp
  4173                           
  4174                           ;Flash.c: 79: INTCONbits.GIE = 0;
  4175  0626  138B               	bcf	11,7	;volatile
  4176                           
  4177                           ;Flash.c: 82: PMADR = address;
  4178  0627  0872               	movf	FLASH_write@address+1,w
  4179  0628  0023               	movlb	3	; select bank3
  4180  0629  0192               	clrf	18	;volatile
  4181  062A  0792               	addwf	18,f	;volatile
  4182  062B  0871               	movf	FLASH_write@address,w
  4183  062C  0191               	clrf	17	;volatile
  4184  062D  0791               	addwf	17,f	;volatile
  4185                           
  4186                           ;Flash.c: 83: PMDAT = data;
  4187  062E  0874               	movf	FLASH_write@data+1,w
  4188  062F  0194               	clrf	20	;volatile
  4189  0630  0794               	addwf	20,f	;volatile
  4190  0631  0873               	movf	FLASH_write@data,w
  4191  0632  0193               	clrf	19	;volatile
  4192  0633  0793               	addwf	19,f	;volatile
  4193                           
  4194                           ;Flash.c: 84: PMCON1bits.LWLO = latch;
  4195  0634  0875               	movf	FLASH_write@latch,w
  4196  0635  1D03               	skipz
  4197  0636  1695               	bsf	21,5	;volatile
  4198  0637  1903               	skipnz
  4199  0638  1295               	bcf	21,5	;volatile
  4200                           
  4201                           ;Flash.c: 85: PMCON1bits.CFGS = 0;
  4202  0639  1315               	bcf	21,6	;volatile
  4203                           
  4204                           ;Flash.c: 86: PMCON1bits.FREE = 0;
  4205  063A  1215               	bcf	21,4	;volatile
  4206                           
  4207                           ;Flash.c: 87: PMCON1bits.WREN = 1;
  4208  063B  1515               	bsf	21,2	;volatile
  4209                           
  4210                           ;Flash.c: 90: _unlock();
  4211  063C  318F  27B3  3186   	fcall	__unlock
  4212                           
  4213                           ;Flash.c: 93: if ( temp)
  4214  063F  0876               	movf	FLASH_write@temp,w
  4215  0640  1903               	btfsc	3,2
  4216  0641  0008               	return
  4217                           
  4218                           ;Flash.c: 94: INTCONbits.GIE = 1;
  4219  0642  178B               	bsf	11,7	;volatile
  4220  0643  0008               	return
  4221  0644                     __end_of_FLASH_write:	
  4222                           
  4223                           	psect	text23
  4224  0FB3                     __ptext23:	
  4225 ;; *************** function __unlock *****************
  4226 ;; Defined at:
  4227 ;;		line 59 in file "heflash/Flash.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;		None               void
  4234 ;; Registers used:
  4235 ;;		None
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;Total ram usage:        0 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    1
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		_FLASH_write
  4252 ;;		_FLASH_erase
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function __unlock
  4258  0FB3                     __unlock:	
  4259                           
  4260                           ;incstack = 0
  4261                           ; Regs used in __unlock: []
  4262  0FB3  0023               	banksel	406	;# 
  4263  0FB4  3055               	movlw	85	;# 
  4264  0FB5  0096               	movwf	22	;# 
  4265  0FB6  30AA               	movlw	170	;# 
  4266  0FB7  0096               	movwf	22	;# 
  4267  0FB8  1495               	bsf	21,1	; set WR bit ;# 
  4268  0FB9  0000               	nop	;# 
  4269  0FBA  0000               	nop	;# 
  4270  0FBB  0008               	return
  4271  0FBC                     __end_of__unlock:	
  4272                           
  4273                           	psect	text24
  4274  06C5                     __ptext24:	
  4275 ;; *************** function _command_set_dac *****************
  4276 ;; Defined at:
  4277 ;;		line 182 in file "main.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  dac_data        1    wreg     PTR const unsigned char 
  4280 ;;		 -> ROM(8192), 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  dac_data        1    6[BANK0 ] PTR const unsigned char 
  4283 ;;		 -> ROM(8192), 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0, pclath, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;Total ram usage:        4 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    5
  4300 ;; This function calls:
  4301 ;;		_DAC1220_Write3Bytes
  4302 ;;		_send_OK
  4303 ;; This function is called by:
  4304 ;;		_interpret_command
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _command_set_dac
  4310  06C5                     _command_set_dac:	
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in _command_set_dac: [wreg+status,2+status,0+pclath+cstack]
  4314                           ;command_set_dac@dac_data stored from wreg
  4315  06C5  0020               	movlb	0	; select bank0
  4316  06C6  00E1               	movwf	command_set_dac@dac_data
  4317                           
  4318                           ;main.c: 183: DAC1220_Write3Bytes(0, dac_data[0], dac_data[1], dac_data[2]);
  4319  06C7  0861               	movf	command_set_dac@dac_data,w
  4320  06C8  3180               	movlp	high __stringtab
  4321  06C9  000A               	callw
  4322  06CA  3186               	pagesel	$	;select current page
  4323  06CB  00DE               	movwf	??_command_set_dac
  4324  06CC  085E               	movf	??_command_set_dac,w
  4325  06CD  00F5               	movwf	?_DAC1220_Write3Bytes
  4326  06CE  0A61               	incf	command_set_dac@dac_data,w
  4327  06CF  3180               	movlp	high __stringtab
  4328  06D0  000A               	callw
  4329  06D1  3186               	pagesel	$	;select current page
  4330  06D2  00DF               	movwf	??_command_set_dac+1
  4331  06D3  085F               	movf	??_command_set_dac+1,w
  4332  06D4  00F6               	movwf	?_DAC1220_Write3Bytes+1
  4333  06D5  0861               	movf	command_set_dac@dac_data,w
  4334  06D6  3E02               	addlw	2
  4335  06D7  3180               	movlp	high __stringtab
  4336  06D8  000A               	callw
  4337  06D9  3186               	pagesel	$	;select current page
  4338  06DA  00E0               	movwf	??_command_set_dac+2
  4339  06DB  0860               	movf	??_command_set_dac+2,w
  4340  06DC  00F7               	movwf	?_DAC1220_Write3Bytes+2
  4341  06DD  3000               	movlw	0
  4342  06DE  3186  2686  3186   	fcall	_DAC1220_Write3Bytes
  4343                           
  4344                           ;main.c: 184: send_OK();
  4345  06E1  3187  2792         	fcall	_send_OK
  4346  06E3  0008               	return
  4347  06E4                     __end_of_command_set_dac:	
  4348                           
  4349                           	psect	text25
  4350  00E3                     __ptext25:	
  4351 ;; *************** function _command_range3 *****************
  4352 ;; Defined at:
  4353 ;;		line 173 in file "main.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0, pclath, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        2 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    4
  4374 ;; This function calls:
  4375 ;;		_send_OK
  4376 ;; This function is called by:
  4377 ;;		_interpret_command
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _command_range3
  4383  00E3                     _command_range3:	
  4384                           
  4385                           ;main.c: 174: LATCbits.LATC6 = 1;
  4386                           
  4387                           ;incstack = 0
  4388                           ; Regs used in _command_range3: [wreg+status,2+status,0+pclath+cstack]
  4389  00E3  0022               	movlb	2	; select bank2
  4390  00E4  170E               	bsf	14,6	;volatile
  4391                           
  4392                           ;main.c: 175: _delay((unsigned long)((10)*(48000000/4000.0)));
  4393  00E5  309C               	movlw	156
  4394  00E6  0020               	movlb	0	; select bank0
  4395  00E7  00DF               	movwf	??_command_range3+1
  4396  00E8  30D7               	movlw	215
  4397  00E9  00DE               	movwf	??_command_range3
  4398  00EA                     u1847:	
  4399  00EA  0BDE               	decfsz	??_command_range3,f
  4400  00EB  28EA               	goto	u1847
  4401  00EC  0BDF               	decfsz	??_command_range3+1,f
  4402  00ED  28EA               	goto	u1847
  4403                           
  4404                           ;main.c: 176: LATCbits.LATC4 = 0;
  4405  00EE  0022               	movlb	2	; select bank2
  4406  00EF  120E               	bcf	14,4	;volatile
  4407                           
  4408                           ;main.c: 177: LATCbits.LATC5 = 0;
  4409  00F0  128E               	bcf	14,5	;volatile
  4410                           
  4411                           ;main.c: 178: send_OK();
  4412  00F1  3187  2792         	fcall	_send_OK
  4413  00F3  0008               	return
  4414  00F4                     __end_of_command_range3:	
  4415                           
  4416                           	psect	text26
  4417  0FEF                     __ptext26:	
  4418 ;; *************** function _command_range2 *****************
  4419 ;; Defined at:
  4420 ;;		line 164 in file "main.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;		None               void
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0, pclath, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;Total ram usage:        2 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    4
  4441 ;; This function calls:
  4442 ;;		_send_OK
  4443 ;; This function is called by:
  4444 ;;		_interpret_command
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           
  4449                           ;psect for function _command_range2
  4450  0FEF                     _command_range2:	
  4451                           
  4452                           ;main.c: 165: LATCbits.LATC5 = 1;
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _command_range2: [wreg+status,2+status,0+pclath+cstack]
  4456  0FEF  0022               	movlb	2	; select bank2
  4457  0FF0  168E               	bsf	14,5	;volatile
  4458                           
  4459                           ;main.c: 166: _delay((unsigned long)((10)*(48000000/4000.0)));
  4460  0FF1  309C               	movlw	156
  4461  0FF2  0020               	movlb	0	; select bank0
  4462  0FF3  00DF               	movwf	??_command_range2+1
  4463  0FF4  30D7               	movlw	215
  4464  0FF5  00DE               	movwf	??_command_range2
  4465  0FF6                     u1857:	
  4466  0FF6  0BDE               	decfsz	??_command_range2,f
  4467  0FF7  2FF6               	goto	u1857
  4468  0FF8  0BDF               	decfsz	??_command_range2+1,f
  4469  0FF9  2FF6               	goto	u1857
  4470                           
  4471                           ;main.c: 167: LATCbits.LATC4 = 0;
  4472  0FFA  0022               	movlb	2	; select bank2
  4473  0FFB  120E               	bcf	14,4	;volatile
  4474                           
  4475                           ;main.c: 168: LATCbits.LATC6 = 0;
  4476  0FFC  130E               	bcf	14,6	;volatile
  4477                           
  4478                           ;main.c: 169: send_OK();
  4479  0FFD  3187  2792         	fcall	_send_OK
  4480  0FFF  0008               	return
  4481  1000                     __end_of_command_range2:	
  4482                           
  4483                           	psect	text27
  4484  0FDE                     __ptext27:	
  4485 ;; *************** function _command_range1 *****************
  4486 ;; Defined at:
  4487 ;;		line 155 in file "main.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;		None               void
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0, pclath, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;Total ram usage:        2 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:    4
  4508 ;; This function calls:
  4509 ;;		_send_OK
  4510 ;; This function is called by:
  4511 ;;		_interpret_command
  4512 ;; This function uses a non-reentrant model
  4513 ;;
  4514                           
  4515                           
  4516                           ;psect for function _command_range1
  4517  0FDE                     _command_range1:	
  4518                           
  4519                           ;main.c: 156: LATCbits.LATC4 = 1;
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in _command_range1: [wreg+status,2+status,0+pclath+cstack]
  4523  0FDE  0022               	movlb	2	; select bank2
  4524  0FDF  160E               	bsf	14,4	;volatile
  4525                           
  4526                           ;main.c: 157: _delay((unsigned long)((10)*(48000000/4000.0)));
  4527  0FE0  309C               	movlw	156
  4528  0FE1  0020               	movlb	0	; select bank0
  4529  0FE2  00DF               	movwf	??_command_range1+1
  4530  0FE3  30D7               	movlw	215
  4531  0FE4  00DE               	movwf	??_command_range1
  4532  0FE5                     u1867:	
  4533  0FE5  0BDE               	decfsz	??_command_range1,f
  4534  0FE6  2FE5               	goto	u1867
  4535  0FE7  0BDF               	decfsz	??_command_range1+1,f
  4536  0FE8  2FE5               	goto	u1867
  4537                           
  4538                           ;main.c: 158: LATCbits.LATC5 = 0;
  4539  0FE9  0022               	movlb	2	; select bank2
  4540  0FEA  128E               	bcf	14,5	;volatile
  4541                           
  4542                           ;main.c: 159: LATCbits.LATC6 = 0;
  4543  0FEB  130E               	bcf	14,6	;volatile
  4544                           
  4545                           ;main.c: 160: send_OK();
  4546  0FEC  3187  2792         	fcall	_send_OK
  4547  0FEE  0008               	return
  4548  0FEF                     __end_of_command_range1:	
  4549                           
  4550                           	psect	text28
  4551  0F88                     __ptext28:	
  4552 ;; *************** function _command_mode_galvanostatic *****************
  4553 ;; Defined at:
  4554 ;;		line 149 in file "main.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;		None               void
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0, pclath, cstack
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:    4
  4575 ;; This function calls:
  4576 ;;		_send_OK
  4577 ;; This function is called by:
  4578 ;;		_interpret_command
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _command_mode_galvanostatic
  4584  0F88                     _command_mode_galvanostatic:	
  4585                           
  4586                           ;main.c: 150: LATAbits.LATA5 = 1;
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _command_mode_galvanostatic: [wreg+status,2+status,0+pclath+cstack]
  4590  0F88  0022               	movlb	2	; select bank2
  4591  0F89  168C               	bsf	12,5	;volatile
  4592                           
  4593                           ;main.c: 151: send_OK();
  4594  0F8A  3187  2792         	fcall	_send_OK
  4595  0F8C  0008               	return
  4596  0F8D                     __end_of_command_mode_galvanostatic:	
  4597                           
  4598                           	psect	text29
  4599  0F83                     __ptext29:	
  4600 ;; *************** function _command_mode_potentiostatic *****************
  4601 ;; Defined at:
  4602 ;;		line 143 in file "main.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;		None               void
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0, pclath, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    4
  4623 ;; This function calls:
  4624 ;;		_send_OK
  4625 ;; This function is called by:
  4626 ;;		_interpret_command
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _command_mode_potentiostatic
  4632  0F83                     _command_mode_potentiostatic:	
  4633                           
  4634                           ;main.c: 144: LATAbits.LATA5 = 0;
  4635                           
  4636                           ;incstack = 0
  4637                           ; Regs used in _command_mode_potentiostatic: [wreg+status,2+status,0+pclath+cstack]
  4638  0F83  0022               	movlb	2	; select bank2
  4639  0F84  128C               	bcf	12,5	;volatile
  4640                           
  4641                           ;main.c: 145: send_OK();
  4642  0F85  3187  2792         	fcall	_send_OK
  4643  0F87  0008               	return
  4644  0F88                     __end_of_command_mode_potentiostatic:	
  4645                           
  4646                           	psect	text30
  4647  0F7E                     __ptext30:	
  4648 ;; *************** function _command_cell_off *****************
  4649 ;; Defined at:
  4650 ;;		line 137 in file "main.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;		None               void
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, pclath, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;Total ram usage:        0 bytes
  4669 ;; Hardware stack levels used:    1
  4670 ;; Hardware stack levels required when called:    4
  4671 ;; This function calls:
  4672 ;;		_send_OK
  4673 ;; This function is called by:
  4674 ;;		_interpret_command
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _command_cell_off
  4680  0F7E                     _command_cell_off:	
  4681                           
  4682                           ;main.c: 138: LATAbits.LATA4 = 0;
  4683                           
  4684                           ;incstack = 0
  4685                           ; Regs used in _command_cell_off: [wreg+status,2+status,0+pclath+cstack]
  4686  0F7E  0022               	movlb	2	; select bank2
  4687  0F7F  120C               	bcf	12,4	;volatile
  4688                           
  4689                           ;main.c: 139: send_OK();
  4690  0F80  3187  2792         	fcall	_send_OK
  4691  0F82  0008               	return
  4692  0F83                     __end_of_command_cell_off:	
  4693                           
  4694                           	psect	text31
  4695  0F79                     __ptext31:	
  4696 ;; *************** function _command_cell_on *****************
  4697 ;; Defined at:
  4698 ;;		line 131 in file "main.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;		None               void
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:        0 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		_send_OK
  4721 ;; This function is called by:
  4722 ;;		_interpret_command
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           
  4727                           ;psect for function _command_cell_on
  4728  0F79                     _command_cell_on:	
  4729                           
  4730                           ;main.c: 132: LATAbits.LATA4 = 1;
  4731                           
  4732                           ;incstack = 0
  4733                           ; Regs used in _command_cell_on: [wreg+status,2+status,0+pclath+cstack]
  4734  0F79  0022               	movlb	2	; select bank2
  4735  0F7A  160C               	bsf	12,4	;volatile
  4736                           
  4737                           ;main.c: 133: send_OK();
  4738  0F7B  3187  2792         	fcall	_send_OK
  4739  0F7D  0008               	return
  4740  0F7E                     __end_of_command_cell_on:	
  4741                           
  4742                           	psect	text32
  4743  0792                     __ptext32:	
  4744 ;; *************** function _send_OK *****************
  4745 ;; Defined at:
  4746 ;;		line 117 in file "main.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  4751 ;;		 -> STR_3(4), 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;		None               void
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0, pclath, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4764 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4765 ;;Total ram usage:        2 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    3
  4768 ;; This function calls:
  4769 ;;		_strlen
  4770 ;;		_USART_Send
  4771 ;; This function is called by:
  4772 ;;		_command_cell_on
  4773 ;;		_command_cell_off
  4774 ;;		_command_mode_potentiostatic
  4775 ;;		_command_mode_galvanostatic
  4776 ;;		_command_range1
  4777 ;;		_command_range2
  4778 ;;		_command_range3
  4779 ;;		_command_set_dac
  4780 ;;		_command_calibrate_dac
  4781 ;;		_command_save_offset
  4782 ;;		_command_save_shuntcalibration
  4783 ;;		_command_set_dac_cal
  4784 ;; This function uses a non-reentrant model
  4785 ;;
  4786                           
  4787                           
  4788                           ;psect for function _send_OK
  4789  0792                     _send_OK:	
  4790                           
  4791                           ;main.c: 118: const uint8_t* reply = "OK\n";
  4792                           
  4793                           ;incstack = 0
  4794                           ; Regs used in _send_OK: [wreg+status,2+status,0+pclath+cstack]
  4795  0792  30CB               	movlw	(STR_3| (0+32768))& (0+255)
  4796  0793  00FB               	movwf	??_send_OK
  4797  0794  087B               	movf	??_send_OK,w
  4798  0795  0020               	movlb	0	; select bank0
  4799  0796  00DD               	movwf	send_OK@reply
  4800                           
  4801                           ;main.c: 119: transmit_data_length = strlen(reply);
  4802  0797  085D               	movf	send_OK@reply,w
  4803  0798  3185  25DB  3187   	fcall	_strlen
  4804  079B  0871               	movf	?_strlen,w
  4805  079C  00FB               	movwf	??_send_OK
  4806  079D  087B               	movf	??_send_OK,w
  4807  079E  0020               	movlb	0	; select bank0
  4808  079F  00A6               	movwf	_transmit_data_length
  4809                           
  4810                           ;main.c: 120: USART_Send(reply,transmit_data_length);
  4811  07A0  0826               	movf	_transmit_data_length,w
  4812  07A1  00FB               	movwf	??_send_OK
  4813  07A2  087B               	movf	??_send_OK,w
  4814  07A3  00F9               	movwf	?_USART_Send
  4815  07A4  085D               	movf	send_OK@reply,w
  4816  07A5  3187  2733         	fcall	_USART_Send
  4817  07A7  0008               	return
  4818  07A8                     __end_of_send_OK:	
  4819                           
  4820                           	psect	text33
  4821  07A8                     __ptext33:	
  4822 ;; *************** function _command_unknown *****************
  4823 ;; Defined at:
  4824 ;;		line 109 in file "main.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;		None
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  reply           1    2[BANK0 ] PTR const unsigned char 
  4829 ;;		 -> STR_2(3), 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;Total ram usage:        2 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    3
  4846 ;; This function calls:
  4847 ;;		_strlen
  4848 ;;		_USART_Send
  4849 ;; This function is called by:
  4850 ;;		_interpret_command
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _command_unknown
  4856  07A8                     _command_unknown:	
  4857                           
  4858                           ;main.c: 110: const uint8_t *reply = "?\n";
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _command_unknown: [wreg+status,2+status,0+pclath+cstack]
  4862  07A8  30CF               	movlw	(STR_2| (0+32768))& (0+255)
  4863  07A9  00FB               	movwf	??_command_unknown
  4864  07AA  087B               	movf	??_command_unknown,w
  4865  07AB  0020               	movlb	0	; select bank0
  4866  07AC  00DD               	movwf	command_unknown@reply
  4867                           
  4868                           ;main.c: 112: transmit_data_length = strlen(reply);
  4869  07AD  085D               	movf	command_unknown@reply,w
  4870  07AE  3185  25DB  3187   	fcall	_strlen
  4871  07B1  0871               	movf	?_strlen,w
  4872  07B2  00FB               	movwf	??_command_unknown
  4873  07B3  087B               	movf	??_command_unknown,w
  4874  07B4  0020               	movlb	0	; select bank0
  4875  07B5  00A6               	movwf	_transmit_data_length
  4876                           
  4877                           ;main.c: 113: USART_Send(reply,transmit_data_length);
  4878  07B6  0826               	movf	_transmit_data_length,w
  4879  07B7  00FB               	movwf	??_command_unknown
  4880  07B8  087B               	movf	??_command_unknown,w
  4881  07B9  00F9               	movwf	?_USART_Send
  4882  07BA  085D               	movf	command_unknown@reply,w
  4883  07BB  3187  2733         	fcall	_USART_Send
  4884  07BD  0008               	return
  4885  07BE                     __end_of_command_unknown:	
  4886                           
  4887                           	psect	text34
  4888  02C2                     __ptext34:	
  4889 ;; *************** function _InitializeIO *****************
  4890 ;; Defined at:
  4891 ;;		line 77 in file "main.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  startReply      1   11[COMMON] PTR const unsigned char 
  4896 ;;		 -> STR_1(8), 
  4897 ;; Return value:  Size  Location     Type
  4898 ;;		None               void
  4899 ;; Registers used:
  4900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;Total ram usage:        4 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    6
  4913 ;; This function calls:
  4914 ;;		_HEFLASH_readBlock
  4915 ;;		_InitializeSPI
  4916 ;;		_DAC1220_Reset
  4917 ;;		_DAC1220_Write3Bytes
  4918 ;;		_DAC1220_Init
  4919 ;;		_EUSART_Initialize
  4920 ;;		_strlen
  4921 ;;		_USART_Send
  4922 ;; This function is called by:
  4923 ;;		_main
  4924 ;; This function uses a non-reentrant model
  4925 ;;
  4926                           
  4927                           
  4928                           ;psect for function _InitializeIO
  4929  02C2                     _InitializeIO:	
  4930                           
  4931                           ;main.c: 78: OSCCONbits.IRCF = 0b1111;
  4932                           
  4933                           ;incstack = 0
  4934                           ; Regs used in _InitializeIO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4935  02C2  303C               	movlw	60
  4936  02C3  0021               	movlb	1	; select bank1
  4937  02C4  0499               	iorwf	25,f	;volatile
  4938                           
  4939                           ;main.c: 79: ANSELA = 0x00;
  4940  02C5  0023               	movlb	3	; select bank3
  4941  02C6  018C               	clrf	12	;volatile
  4942                           
  4943                           ;main.c: 80: ANSELB = 0x00;
  4944  02C7  018D               	clrf	13	;volatile
  4945                           
  4946                           ;main.c: 81: ANSELC = 0x00;
  4947  02C8  018E               	clrf	14	;volatile
  4948                           
  4949                           ;main.c: 82: APFCON = 0x00;
  4950  02C9  0022               	movlb	2	; select bank2
  4951  02CA  019D               	clrf	29	;volatile
  4952                           
  4953                           ;main.c: 83: TRISAbits.TRISA5 = 0;
  4954  02CB  0021               	movlb	1	; select bank1
  4955  02CC  128C               	bcf	12,5	;volatile
  4956                           
  4957                           ;main.c: 84: LATAbits.LATA5 = 0;
  4958  02CD  0022               	movlb	2	; select bank2
  4959  02CE  128C               	bcf	12,5	;volatile
  4960                           
  4961                           ;main.c: 85: TRISAbits.TRISA4 = 0;
  4962  02CF  0021               	movlb	1	; select bank1
  4963  02D0  120C               	bcf	12,4	;volatile
  4964                           
  4965                           ;main.c: 86: LATAbits.LATA4 = 0;
  4966  02D1  0022               	movlb	2	; select bank2
  4967  02D2  120C               	bcf	12,4	;volatile
  4968                           
  4969                           ;main.c: 87: TRISCbits.TRISC4 = 0;
  4970  02D3  0021               	movlb	1	; select bank1
  4971  02D4  120E               	bcf	14,4	;volatile
  4972                           
  4973                           ;main.c: 88: TRISCbits.TRISC5 = 0;
  4974  02D5  128E               	bcf	14,5	;volatile
  4975                           
  4976                           ;main.c: 89: TRISCbits.TRISC6 = 0;
  4977  02D6  130E               	bcf	14,6	;volatile
  4978                           
  4979                           ;main.c: 90: LATCbits.LATC4 = 1;
  4980  02D7  0022               	movlb	2	; select bank2
  4981  02D8  160E               	bsf	14,4	;volatile
  4982                           
  4983                           ;main.c: 91: LATCbits.LATC5 = 0;
  4984  02D9  128E               	bcf	14,5	;volatile
  4985                           
  4986                           ;main.c: 92: LATCbits.LATC6 = 0;
  4987  02DA  130E               	bcf	14,6	;volatile
  4988                           
  4989                           ;main.c: 93: InitializeSPI();
  4990  02DB  318F  27D1  3182   	fcall	_InitializeSPI
  4991                           
  4992                           ;main.c: 94: _delay((unsigned long)((25)*(48000000/4000.0)));
  4993  02DE  3002               	movlw	2
  4994  02DF  0020               	movlb	0	; select bank0
  4995  02E0  00DF               	movwf	??_InitializeIO+2
  4996  02E1  3086               	movlw	134
  4997  02E2  00DE               	movwf	??_InitializeIO+1
  4998  02E3  3099               	movlw	153
  4999  02E4  00DD               	movwf	??_InitializeIO
  5000  02E5                     u1877:	
  5001  02E5  0BDD               	decfsz	??_InitializeIO,f
  5002  02E6  2AE5               	goto	u1877
  5003  02E7  0BDE               	decfsz	??_InitializeIO+1,f
  5004  02E8  2AE5               	goto	u1877
  5005  02E9  0BDF               	decfsz	??_InitializeIO+2,f
  5006  02EA  2AE5               	goto	u1877
  5007                           
  5008                           ;main.c: 95: DAC1220_Reset();
  5009  02EB  3184  24E4  3182   	fcall	_DAC1220_Reset
  5010                           
  5011                           ;main.c: 96: _delay((unsigned long)((25)*(48000000/4000.0)));
  5012  02EE  3002               	movlw	2
  5013  02EF  0020               	movlb	0	; select bank0
  5014  02F0  00DF               	movwf	??_InitializeIO+2
  5015  02F1  3086               	movlw	134
  5016  02F2  00DE               	movwf	??_InitializeIO+1
  5017  02F3  3099               	movlw	153
  5018  02F4  00DD               	movwf	??_InitializeIO
  5019  02F5                     u1887:	
  5020  02F5  0BDD               	decfsz	??_InitializeIO,f
  5021  02F6  2AF5               	goto	u1887
  5022  02F7  0BDE               	decfsz	??_InitializeIO+1,f
  5023  02F8  2AF5               	goto	u1887
  5024  02F9  0BDF               	decfsz	??_InitializeIO+2,f
  5025  02FA  2AF5               	goto	u1887
  5026                           
  5027                           ;main.c: 97: DAC1220_Init();
  5028  02FB  3187  27BE  3182   	fcall	_DAC1220_Init
  5029                           
  5030                           ;main.c: 98: HEFLASH_readBlock(heflashbuffer, 2, 32);
  5031  02FE  3002               	movlw	2
  5032  02FF  0020               	movlb	0	; select bank0
  5033  0300  00DD               	movwf	??_InitializeIO
  5034  0301  085D               	movf	??_InitializeIO,w
  5035  0302  00F3               	movwf	?_HEFLASH_readBlock
  5036  0303  3020               	movlw	32
  5037  0304  00DE               	movwf	??_InitializeIO+1
  5038  0305  085E               	movf	??_InitializeIO+1,w
  5039  0306  00F4               	movwf	?_HEFLASH_readBlock+1
  5040  0307  3027               	movlw	_heflashbuffer& (0+255)
  5041  0308  3185  251C  3182   	fcall	_HEFLASH_readBlock
  5042                           
  5043                           ;main.c: 99: DAC1220_Write3Bytes(8, heflashbuffer[0], heflashbuffer[1], heflashbuffer[2]
      +                          );
  5044  030B  0020               	movlb	0	; select bank0
  5045  030C  0827               	movf	_heflashbuffer,w
  5046  030D  00DD               	movwf	??_InitializeIO
  5047  030E  085D               	movf	??_InitializeIO,w
  5048  030F  00F5               	movwf	?_DAC1220_Write3Bytes
  5049  0310  0828               	movf	_heflashbuffer+1,w
  5050  0311  00DE               	movwf	??_InitializeIO+1
  5051  0312  085E               	movf	??_InitializeIO+1,w
  5052  0313  00F6               	movwf	?_DAC1220_Write3Bytes+1
  5053  0314  0829               	movf	_heflashbuffer+2,w
  5054  0315  00DF               	movwf	??_InitializeIO+2
  5055  0316  085F               	movf	??_InitializeIO+2,w
  5056  0317  00F7               	movwf	?_DAC1220_Write3Bytes+2
  5057  0318  3008               	movlw	8
  5058  0319  3186  2686  3182   	fcall	_DAC1220_Write3Bytes
  5059                           
  5060                           ;main.c: 100: DAC1220_Write3Bytes(12, heflashbuffer[3], heflashbuffer[4], heflashbuffer[
      +                          5]);
  5061  031C  0020               	movlb	0	; select bank0
  5062  031D  082A               	movf	_heflashbuffer+3,w
  5063  031E  00DD               	movwf	??_InitializeIO
  5064  031F  085D               	movf	??_InitializeIO,w
  5065  0320  00F5               	movwf	?_DAC1220_Write3Bytes
  5066  0321  082B               	movf	_heflashbuffer+4,w
  5067  0322  00DE               	movwf	??_InitializeIO+1
  5068  0323  085E               	movf	??_InitializeIO+1,w
  5069  0324  00F6               	movwf	?_DAC1220_Write3Bytes+1
  5070  0325  082C               	movf	_heflashbuffer+5,w
  5071  0326  00DF               	movwf	??_InitializeIO+2
  5072  0327  085F               	movf	??_InitializeIO+2,w
  5073  0328  00F7               	movwf	?_DAC1220_Write3Bytes+2
  5074  0329  300C               	movlw	12
  5075  032A  3186  2686  3182   	fcall	_DAC1220_Write3Bytes
  5076                           
  5077                           ;main.c: 102: EUSART_Initialize();
  5078  032D  3187  274C  3182   	fcall	_EUSART_Initialize
  5079                           
  5080                           ;main.c: 103: const uint8_t *startReply = "Ready!\n";
  5081  0330  3086               	movlw	(STR_1| (0+32768))& (0+255)
  5082  0331  0020               	movlb	0	; select bank0
  5083  0332  00DD               	movwf	??_InitializeIO
  5084  0333  085D               	movf	??_InitializeIO,w
  5085  0334  00FB               	movwf	InitializeIO@startReply
  5086                           
  5087                           ;main.c: 104: USART_Send(startReply,strlen(startReply));
  5088  0335  087B               	movf	InitializeIO@startReply,w
  5089  0336  3185  25DB  3182   	fcall	_strlen
  5090  0339  0871               	movf	?_strlen,w
  5091  033A  0020               	movlb	0	; select bank0
  5092  033B  00DD               	movwf	??_InitializeIO
  5093  033C  085D               	movf	??_InitializeIO,w
  5094  033D  00F9               	movwf	?_USART_Send
  5095  033E  087B               	movf	InitializeIO@startReply,w
  5096  033F  3187  2733         	fcall	_USART_Send
  5097  0341  0008               	return
  5098  0342                     __end_of_InitializeIO:	
  5099                           
  5100                           	psect	text35
  5101  0733                     __ptext35:	
  5102 ;; *************** function _USART_Send *****************
  5103 ;; Defined at:
  5104 ;;		line 143 in file "eusart.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  dataToSend      1    wreg     PTR const unsigned char 
  5107 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5108 ;;  dataLength      1    9[COMMON] unsigned char 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  dataToSend      1    0[BANK0 ] PTR const unsigned char 
  5111 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5112 ;;  i               1    1[BANK0 ] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;		None               void
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0, pclath, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        4 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    2
  5129 ;; This function calls:
  5130 ;;		_EUSART_Write
  5131 ;; This function is called by:
  5132 ;;		_InitializeIO
  5133 ;;		_command_unknown
  5134 ;;		_send_OK
  5135 ;;		_send_WAIT
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _USART_Send
  5141  0733                     _USART_Send:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _USART_Send: [wreg+status,2+status,0+pclath+cstack]
  5145                           ;USART_Send@dataToSend stored from wreg
  5146  0733  0020               	movlb	0	; select bank0
  5147  0734  00DB               	movwf	USART_Send@dataToSend
  5148                           
  5149                           ;eusart.c: 145: if(EUSART_is_tx_ready)
  5150  0735  01DC               	clrf	USART_Send@i
  5151                           
  5152                           ;eusart.c: 146: {
  5153                           ;eusart.c: 148: for(i=0;i<dataLength;i++)
  5154  0736  01DC               	clrf	USART_Send@i
  5155  0737                     l2508:	
  5156  0737  0879               	movf	USART_Send@dataLength,w
  5157  0738  025C               	subwf	USART_Send@i,w
  5158  0739  1803               	btfsc	3,0
  5159  073A  0008               	return
  5160                           
  5161                           ;eusart.c: 149: {
  5162                           ;eusart.c: 150: EUSART_Write(*dataToSend);
  5163  073B  085B               	movf	USART_Send@dataToSend,w
  5164  073C  3180               	movlp	high __stringtab
  5165  073D  000A               	callw
  5166  073E  3187               	pagesel	$	;select current page
  5167  073F  3187  27F8  3187   	fcall	_EUSART_Write
  5168                           
  5169                           ;eusart.c: 151: dataToSend++;
  5170  0742  3001               	movlw	1
  5171  0743  00FA               	movwf	??_USART_Send
  5172  0744  087A               	movf	??_USART_Send,w
  5173  0745  0020               	movlb	0	; select bank0
  5174  0746  07DB               	addwf	USART_Send@dataToSend,f
  5175  0747  3001               	movlw	1
  5176  0748  00FA               	movwf	??_USART_Send
  5177  0749  087A               	movf	??_USART_Send,w
  5178  074A  07DC               	addwf	USART_Send@i,f
  5179  074B  2F37               	goto	l2508
  5180  074C                     __end_of_USART_Send:	
  5181                           
  5182                           	psect	text36
  5183  07F8                     __ptext36:	
  5184 ;; *************** function _EUSART_Write *****************
  5185 ;; Defined at:
  5186 ;;		line 134 in file "eusart.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;  txData          1    wreg     unsigned char 
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;  txData          1    1[COMMON] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;		None               void
  5193 ;; Registers used:
  5194 ;;		wreg
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5204 ;;Total ram usage:        1 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    1
  5207 ;; This function calls:
  5208 ;;		Nothing
  5209 ;; This function is called by:
  5210 ;;		_command_read_adc
  5211 ;;		_USART_Send
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _EUSART_Write
  5217  07F8                     _EUSART_Write:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _EUSART_Write: [wreg]
  5221                           ;EUSART_Write@txData stored from wreg
  5222  07F8  00F1               	movwf	EUSART_Write@txData
  5223  07F9                     l388:	
  5224                           ;eusart.c: 136: {
  5225                           
  5226                           ;eusart.c: 135: while(0 == PIR1bits.TXIF)
  5227                           
  5228  07F9  0020               	movlb	0	; select bank0
  5229  07FA  1E11               	btfss	17,4	;volatile
  5230  07FB  2FF9               	goto	l388
  5231                           
  5232                           ;eusart.c: 137: }
  5233                           ;eusart.c: 139: TXREG = txData;
  5234  07FC  0871               	movf	EUSART_Write@txData,w
  5235  07FD  0023               	movlb	3	; select bank3
  5236  07FE  009A               	movwf	26	;volatile
  5237  07FF  0008               	return
  5238  0800                     __end_of_EUSART_Write:	
  5239                           
  5240                           	psect	text37
  5241  05DB                     __ptext37:	
  5242 ;; *************** function _strlen *****************
  5243 ;; Defined at:
  5244 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  s               1    wreg     PTR const unsigned char 
  5247 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  s               1    7[COMMON] PTR const unsigned char 
  5250 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5251 ;;  cp              1    8[COMMON] PTR const unsigned char 
  5252 ;;		 -> STR_4(6), STR_3(4), STR_2(3), STR_1(8), 
  5253 ;; Return value:  Size  Location     Type
  5254 ;;                  2    1[COMMON] unsigned int 
  5255 ;; Registers used:
  5256 ;;		wreg, status,2, status,0
  5257 ;; Tracked objects:
  5258 ;;		On entry : 0/0
  5259 ;;		On exit  : 0/0
  5260 ;;		Unchanged: 0/0
  5261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5264 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;Total ram usage:        8 bytes
  5267 ;; Hardware stack levels used:    2
  5268 ;; Hardware stack levels required when called:    1
  5269 ;; This function calls:
  5270 ;;		Nothing
  5271 ;; This function is called by:
  5272 ;;		_InitializeIO
  5273 ;;		_command_unknown
  5274 ;;		_send_OK
  5275 ;;		_send_WAIT
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _strlen
  5281  05DB                     _strlen:	
  5282                           
  5283                           ;incstack = 0
  5284                           ; Regs used in _strlen: [wreg+status,2+status,0]
  5285                           ;strlen@s stored from wreg
  5286  05DB  00F7               	movwf	strlen@s
  5287  05DC  0877               	movf	strlen@s,w
  5288  05DD  00F3               	movwf	??_strlen
  5289  05DE  0873               	movf	??_strlen,w
  5290  05DF  00F8               	movwf	strlen@cp
  5291  05E0                     l2494:	
  5292  05E0  0878               	movf	strlen@cp,w
  5293  05E1  3180               	movlp	high __stringtab
  5294  05E2  000A               	callw
  5295  05E3  3185               	pagesel	$	;select current page
  5296  05E4  3800               	iorlw	0
  5297  05E5  1903               	btfsc	3,2
  5298  05E6  2DEC               	goto	l2496
  5299  05E7  3001               	movlw	1
  5300  05E8  00F3               	movwf	??_strlen
  5301  05E9  0873               	movf	??_strlen,w
  5302  05EA  07F8               	addwf	strlen@cp,f
  5303  05EB  2DE0               	goto	l2494
  5304  05EC                     l2496:	
  5305  05EC  0877               	movf	strlen@s,w
  5306  05ED  00F3               	movwf	??_strlen
  5307  05EE  3080               	movlw	(high __stringtab)| (0+128)
  5308  05EF  00F4               	movwf	??_strlen+1
  5309  05F0  09F3               	comf	??_strlen,f
  5310  05F1  09F4               	comf	??_strlen+1,f
  5311  05F2  0AF3               	incf	??_strlen,f
  5312  05F3  1903               	skipnz
  5313  05F4  0AF4               	incf	??_strlen+1,f
  5314  05F5  0878               	movf	strlen@cp,w
  5315  05F6  00F5               	movwf	??_strlen+2
  5316  05F7  3080               	movlw	(high __stringtab)| (0+128)
  5317  05F8  00F6               	movwf	??_strlen+3
  5318  05F9  0873               	movf	??_strlen,w
  5319  05FA  0775               	addwf	??_strlen+2,w
  5320  05FB  00F1               	movwf	?_strlen
  5321  05FC  0874               	movf	??_strlen+1,w
  5322  05FD  3D76               	addwfc	??_strlen+3,w
  5323  05FE  00F2               	movwf	?_strlen+1
  5324  05FF  0008               	return
  5325  0600                     __end_of_strlen:	
  5326                           
  5327                           	psect	text38
  5328  074C                     __ptext38:	
  5329 ;; *************** function _EUSART_Initialize *****************
  5330 ;; Defined at:
  5331 ;;		line 67 in file "eusart.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;		None               void
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0, pclath, cstack
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    2
  5352 ;; This function calls:
  5353 ;;		_EUSART_SetFramingErrorHandler
  5354 ;;		_EUSART_SetOverrunErrorHandler
  5355 ;;		_EUSART_SetErrorHandler
  5356 ;; This function is called by:
  5357 ;;		_InitializeIO
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           
  5362                           ;psect for function _EUSART_Initialize
  5363  074C                     _EUSART_Initialize:	
  5364                           
  5365                           ;eusart.c: 71: BAUDCON = 0x08;
  5366                           
  5367                           ;incstack = 0
  5368                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5369  074C  3008               	movlw	8
  5370  074D  0023               	movlb	3	; select bank3
  5371  074E  009F               	movwf	31	;volatile
  5372                           
  5373                           ;eusart.c: 74: RCSTA = 0x90;
  5374  074F  3090               	movlw	144
  5375  0750  009D               	movwf	29	;volatile
  5376                           
  5377                           ;eusart.c: 77: TXSTA = 0x24;
  5378  0751  3024               	movlw	36
  5379  0752  009E               	movwf	30	;volatile
  5380                           
  5381                           ;eusart.c: 80: SPBRGL = 0x70;
  5382  0753  3070               	movlw	112
  5383  0754  009B               	movwf	27	;volatile
  5384                           
  5385                           ;eusart.c: 83: SPBRGH = 0x02;
  5386  0755  3002               	movlw	2
  5387  0756  009C               	movwf	28	;volatile
  5388                           
  5389                           ;eusart.c: 86: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  5390  0757  30FE               	movlw	(0-fpbase)& (0+255)
  5391  0758  318F  279E  3187   	fcall	_EUSART_SetFramingErrorHandler
  5392                           
  5393                           ;eusart.c: 87: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  5394  075B  30FE               	movlw	(0-fpbase)& (0+255)
  5395  075C  318F  27A5  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5396                           
  5397                           ;eusart.c: 88: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  5398  075F  30FE               	movlw	(0-fpbase)& (0+255)
  5399  0760  318F  27AC         	fcall	_EUSART_SetErrorHandler
  5400                           
  5401                           ;eusart.c: 90: eusartRxLastError.status = 0;
  5402  0762  0020               	movlb	0	; select bank0
  5403  0763  01A3               	clrf	_eusartRxLastError	;volatile
  5404  0764  0008               	return
  5405  0765                     __end_of_EUSART_Initialize:	
  5406                           
  5407                           	psect	text39
  5408  0FAC                     __ptext39:	
  5409 ;; *************** function _EUSART_SetErrorHandler *****************
  5410 ;; Defined at:
  5411 ;;		line 180 in file "eusart.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  interruptHan    1    wreg     PTR FTN()void 
  5414 ;;		 -> EUSART_DefaultErrorHandler(0), 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5417 ;;		 -> EUSART_DefaultErrorHandler(0), 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        2 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    1
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_EUSART_Initialize
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _EUSART_SetErrorHandler
  5443  0FAC                     _EUSART_SetErrorHandler:	
  5444                           
  5445                           ;incstack = 0
  5446                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5447                           ;EUSART_SetErrorHandler@interruptHandler stored from wreg
  5448  0FAC  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  5449                           
  5450                           ;eusart.c: 181: EUSART_ErrorHandler = interruptHandler;
  5451  0FAD  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  5452  0FAE  00F1               	movwf	??_EUSART_SetErrorHandler
  5453  0FAF  0871               	movf	??_EUSART_SetErrorHandler,w
  5454  0FB0  0020               	movlb	0	; select bank0
  5455  0FB1  00A0               	movwf	_EUSART_ErrorHandler
  5456  0FB2  0008               	return
  5457  0FB3                     __end_of_EUSART_SetErrorHandler:	
  5458                           
  5459                           	psect	text40
  5460  0FA5                     __ptext40:	
  5461 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5462 ;; Defined at:
  5463 ;;		line 176 in file "eusart.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  interruptHan    1    wreg     PTR FTN()void 
  5466 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5469 ;;		 -> EUSART_DefaultOverrunErrorHandler(0), 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;		None               void
  5472 ;; Registers used:
  5473 ;;		wreg
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;Total ram usage:        2 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    1
  5486 ;; This function calls:
  5487 ;;		Nothing
  5488 ;; This function is called by:
  5489 ;;		_EUSART_Initialize
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           
  5494                           ;psect for function _EUSART_SetOverrunErrorHandler
  5495  0FA5                     _EUSART_SetOverrunErrorHandler:	
  5496                           
  5497                           ;incstack = 0
  5498                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5499                           ;EUSART_SetOverrunErrorHandler@interruptHandler stored from wreg
  5500  0FA5  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  5501                           
  5502                           ;eusart.c: 177: EUSART_OverrunErrorHandler = interruptHandler;
  5503  0FA6  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  5504  0FA7  00F1               	movwf	??_EUSART_SetOverrunErrorHandler
  5505  0FA8  0871               	movf	??_EUSART_SetOverrunErrorHandler,w
  5506  0FA9  0020               	movlb	0	; select bank0
  5507  0FAA  00A2               	movwf	_EUSART_OverrunErrorHandler
  5508  0FAB  0008               	return
  5509  0FAC                     __end_of_EUSART_SetOverrunErrorHandler:	
  5510                           
  5511                           	psect	text41
  5512  0F9E                     __ptext41:	
  5513 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5514 ;; Defined at:
  5515 ;;		line 172 in file "eusart.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;  interruptHan    1    wreg     PTR FTN()void 
  5518 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  interruptHan    1    2[COMMON] PTR FTN()void 
  5521 ;;		 -> EUSART_DefaultFramingErrorHandler(0), 
  5522 ;; Return value:  Size  Location     Type
  5523 ;;		None               void
  5524 ;; Registers used:
  5525 ;;		wreg
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;Total ram usage:        2 bytes
  5536 ;; Hardware stack levels used:    1
  5537 ;; Hardware stack levels required when called:    1
  5538 ;; This function calls:
  5539 ;;		Nothing
  5540 ;; This function is called by:
  5541 ;;		_EUSART_Initialize
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545                           
  5546                           ;psect for function _EUSART_SetFramingErrorHandler
  5547  0F9E                     _EUSART_SetFramingErrorHandler:	
  5548                           
  5549                           ;incstack = 0
  5550                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5551                           ;EUSART_SetFramingErrorHandler@interruptHandler stored from wreg
  5552  0F9E  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  5553                           
  5554                           ;eusart.c: 173: EUSART_FramingErrorHandler = interruptHandler;
  5555  0F9F  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  5556  0FA0  00F1               	movwf	??_EUSART_SetFramingErrorHandler
  5557  0FA1  0871               	movf	??_EUSART_SetFramingErrorHandler,w
  5558  0FA2  0020               	movlb	0	; select bank0
  5559  0FA3  00A1               	movwf	_EUSART_FramingErrorHandler
  5560  0FA4  0008               	return
  5561  0FA5                     __end_of_EUSART_SetFramingErrorHandler:	
  5562                           
  5563                           	psect	text42
  5564  07BE                     __ptext42:	
  5565 ;; *************** function _DAC1220_Init *****************
  5566 ;; Defined at:
  5567 ;;		line 121 in file "spi/spi_software.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;		None
  5572 ;; Return value:  Size  Location     Type
  5573 ;;		None               void
  5574 ;; Registers used:
  5575 ;;		wreg, status,2, status,0, pclath, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    5
  5588 ;; This function calls:
  5589 ;;		_DAC1220_Write2Bytes
  5590 ;;		_DAC1220_Write3Bytes
  5591 ;; This function is called by:
  5592 ;;		_InitializeIO
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _DAC1220_Init
  5598  07BE                     _DAC1220_Init:	
  5599                           
  5600                           ;spi_software.c: 122: DAC1220_Write2Bytes(4, 32, 160);
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _DAC1220_Init: [wreg+status,2+status,0+pclath+cstack]
  5604  07BE  3020               	movlw	32
  5605  07BF  00F9               	movwf	??_DAC1220_Init
  5606  07C0  0879               	movf	??_DAC1220_Init,w
  5607  07C1  00F5               	movwf	?_DAC1220_Write2Bytes
  5608  07C2  30A0               	movlw	160
  5609  07C3  00FA               	movwf	??_DAC1220_Init+1
  5610  07C4  087A               	movf	??_DAC1220_Init+1,w
  5611  07C5  00F6               	movwf	?_DAC1220_Write2Bytes+1
  5612  07C6  3004               	movlw	4
  5613  07C7  3186  26E4  3187   	fcall	_DAC1220_Write2Bytes
  5614                           
  5615                           ;spi_software.c: 123: DAC1220_Write3Bytes(0, 128, 0, 0);
  5616  07CA  3080               	movlw	128
  5617  07CB  00F9               	movwf	??_DAC1220_Init
  5618  07CC  0879               	movf	??_DAC1220_Init,w
  5619  07CD  00F5               	movwf	?_DAC1220_Write3Bytes
  5620  07CE  01F6               	clrf	?_DAC1220_Write3Bytes+1
  5621  07CF  01F7               	clrf	?_DAC1220_Write3Bytes+2
  5622  07D0  3000               	movlw	0
  5623  07D1  3186  2686         	fcall	_DAC1220_Write3Bytes
  5624  07D3  0008               	return
  5625  07D4                     __end_of_DAC1220_Init:	
  5626                           
  5627                           	psect	text43
  5628  0686                     __ptext43:	
  5629 ;; *************** function _DAC1220_Write3Bytes *****************
  5630 ;; Defined at:
  5631 ;;		line 78 in file "spi/spi_software.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  address         1    wreg     const unsigned char 
  5634 ;;  byte1           1    5[COMMON] const unsigned char 
  5635 ;;  byte2           1    6[COMMON] const unsigned char 
  5636 ;;  byte3           1    7[COMMON] const unsigned char 
  5637 ;; Auto vars:     Size  Location     Type
  5638 ;;  address         1    8[COMMON] const unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;		None               void
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, pclath, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5648 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;Total ram usage:        4 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    4
  5655 ;; This function calls:
  5656 ;;		_SPIDelay
  5657 ;;		_WriteByteSPI
  5658 ;; This function is called by:
  5659 ;;		_DAC1220_Init
  5660 ;;		_InitializeIO
  5661 ;;		_command_set_dac
  5662 ;;		_command_set_dac_cal
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           
  5667                           ;psect for function _DAC1220_Write3Bytes
  5668  0686                     _DAC1220_Write3Bytes:	
  5669                           
  5670                           ;incstack = 0
  5671                           ; Regs used in _DAC1220_Write3Bytes: [wreg+status,2+status,0+pclath+cstack]
  5672                           ;DAC1220_Write3Bytes@address stored from wreg
  5673  0686  00F8               	movwf	DAC1220_Write3Bytes@address
  5674                           
  5675                           ;spi_software.c: 79: LATBbits.LATB6 = 0;
  5676  0687  0022               	movlb	2	; select bank2
  5677  0688  130D               	bcf	13,6	;volatile
  5678                           
  5679                           ;spi_software.c: 80: SPIDelay();
  5680  0689  318F  2792  3186   	fcall	_SPIDelay
  5681                           
  5682                           ;spi_software.c: 81: TRISBbits.TRISB4 = 0;
  5683  068C  0021               	movlb	1	; select bank1
  5684  068D  120D               	bcf	13,4	;volatile
  5685                           
  5686                           ;spi_software.c: 82: WriteByteSPI(64+address);
  5687  068E  0878               	movf	DAC1220_Write3Bytes@address,w
  5688  068F  3E40               	addlw	64
  5689  0690  3187  2700  3186   	fcall	_WriteByteSPI
  5690                           
  5691                           ;spi_software.c: 83: WriteByteSPI(byte1);
  5692  0693  0875               	movf	DAC1220_Write3Bytes@byte1,w
  5693  0694  3187  2700  3186   	fcall	_WriteByteSPI
  5694                           
  5695                           ;spi_software.c: 84: WriteByteSPI(byte2);
  5696  0697  0876               	movf	DAC1220_Write3Bytes@byte2,w
  5697  0698  3187  2700  3186   	fcall	_WriteByteSPI
  5698                           
  5699                           ;spi_software.c: 85: WriteByteSPI(byte3);
  5700  069B  0877               	movf	DAC1220_Write3Bytes@byte3,w
  5701  069C  3187  2700  3186   	fcall	_WriteByteSPI
  5702                           
  5703                           ;spi_software.c: 86: TRISBbits.TRISB4 = 1;
  5704  069F  0021               	movlb	1	; select bank1
  5705  06A0  160D               	bsf	13,4	;volatile
  5706                           
  5707                           ;spi_software.c: 87: LATBbits.LATB6 = 1;
  5708  06A1  0022               	movlb	2	; select bank2
  5709  06A2  170D               	bsf	13,6	;volatile
  5710                           
  5711                           ;spi_software.c: 88: SPIDelay();
  5712  06A3  318F  2792         	fcall	_SPIDelay
  5713  06A5  0008               	return
  5714  06A6                     __end_of_DAC1220_Write3Bytes:	
  5715                           
  5716                           	psect	text44
  5717  06E4                     __ptext44:	
  5718 ;; *************** function _DAC1220_Write2Bytes *****************
  5719 ;; Defined at:
  5720 ;;		line 65 in file "spi/spi_software.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  address         1    wreg     const unsigned char 
  5723 ;;  byte1           1    5[COMMON] const unsigned char 
  5724 ;;  byte2           1    6[COMMON] const unsigned char 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  address         1    7[COMMON] const unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		wreg, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5736 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;Total ram usage:        3 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    4
  5743 ;; This function calls:
  5744 ;;		_SPIDelay
  5745 ;;		_WriteByteSPI
  5746 ;; This function is called by:
  5747 ;;		_DAC1220_Init
  5748 ;;		_DAC1220_SelfCal
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           
  5753                           ;psect for function _DAC1220_Write2Bytes
  5754  06E4                     _DAC1220_Write2Bytes:	
  5755                           
  5756                           ;incstack = 0
  5757                           ; Regs used in _DAC1220_Write2Bytes: [wreg+status,2+status,0+pclath+cstack]
  5758                           ;DAC1220_Write2Bytes@address stored from wreg
  5759  06E4  00F7               	movwf	DAC1220_Write2Bytes@address
  5760                           
  5761                           ;spi_software.c: 66: LATBbits.LATB6 = 0;
  5762  06E5  0022               	movlb	2	; select bank2
  5763  06E6  130D               	bcf	13,6	;volatile
  5764                           
  5765                           ;spi_software.c: 67: SPIDelay();
  5766  06E7  318F  2792  3186   	fcall	_SPIDelay
  5767                           
  5768                           ;spi_software.c: 68: TRISBbits.TRISB4 = 0;
  5769  06EA  0021               	movlb	1	; select bank1
  5770  06EB  120D               	bcf	13,4	;volatile
  5771                           
  5772                           ;spi_software.c: 69: WriteByteSPI(32+address);
  5773  06EC  0877               	movf	DAC1220_Write2Bytes@address,w
  5774  06ED  3E20               	addlw	32
  5775  06EE  3187  2700  3186   	fcall	_WriteByteSPI
  5776                           
  5777                           ;spi_software.c: 70: WriteByteSPI(byte1);
  5778  06F1  0875               	movf	DAC1220_Write2Bytes@byte1,w
  5779  06F2  3187  2700  3186   	fcall	_WriteByteSPI
  5780                           
  5781                           ;spi_software.c: 71: WriteByteSPI(byte2);
  5782  06F5  0876               	movf	DAC1220_Write2Bytes@byte2,w
  5783  06F6  3187  2700  3186   	fcall	_WriteByteSPI
  5784                           
  5785                           ;spi_software.c: 72: TRISBbits.TRISB4 = 1;
  5786  06F9  0021               	movlb	1	; select bank1
  5787  06FA  160D               	bsf	13,4	;volatile
  5788                           
  5789                           ;spi_software.c: 73: LATBbits.LATB6 = 1;
  5790  06FB  0022               	movlb	2	; select bank2
  5791  06FC  170D               	bsf	13,6	;volatile
  5792                           
  5793                           ;spi_software.c: 74: SPIDelay();
  5794  06FD  318F  2792         	fcall	_SPIDelay
  5795  06FF  0008               	return
  5796  0700                     __end_of_DAC1220_Write2Bytes:	
  5797                           
  5798                           	psect	text45
  5799  0700                     __ptext45:	
  5800 ;; *************** function _WriteByteSPI *****************
  5801 ;; Defined at:
  5802 ;;		line 166 in file "spi/spi_software.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  data_byte       1    wreg     unsigned char 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  data_byte       1    3[COMMON] unsigned char 
  5807 ;;  bit_counter     1    4[COMMON] unsigned char 
  5808 ;; Return value:  Size  Location     Type
  5809 ;;		None               void
  5810 ;; Registers used:
  5811 ;;		wreg, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        3 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    3
  5824 ;; This function calls:
  5825 ;;		_ClockPulse
  5826 ;; This function is called by:
  5827 ;;		_DAC1220_Write2Bytes
  5828 ;;		_DAC1220_Write3Bytes
  5829 ;;		_DAC1220_Read3Bytes
  5830 ;;		_DAC1220_Read2Bytes
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _WriteByteSPI
  5836  0700                     _WriteByteSPI:	
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _WriteByteSPI: [wreg+status,2+status,0+pclath+cstack]
  5840                           ;WriteByteSPI@data_byte stored from wreg
  5841  0700  00F3               	movwf	WriteByteSPI@data_byte
  5842                           
  5843                           ;spi_software.c: 167: uint8_t bit_counter = 8;
  5844  0701  3008               	movlw	8
  5845  0702  00F2               	movwf	??_WriteByteSPI
  5846  0703  0872               	movf	??_WriteByteSPI,w
  5847  0704  00F4               	movwf	WriteByteSPI@bit_counter
  5848  0705                     l2348:	
  5849                           ;spi_software.c: 168: do
  5850                           
  5851                           
  5852                           ;spi_software.c: 169: {
  5853                           ;spi_software.c: 170: LATBbits.LATB4 = (data_byte&0x80)?1:0;
  5854  0705  3000               	movlw	0
  5855  0706  1BF3               	btfsc	WriteByteSPI@data_byte,7
  5856  0707  3001               	movlw	1
  5857  0708  00F2               	movwf	??_WriteByteSPI
  5858  0709  0EF2               	swapf	??_WriteByteSPI,f
  5859  070A  0022               	movlb	2	; select bank2
  5860  070B  080D               	movf	13,w	;volatile
  5861  070C  0672               	xorwf	??_WriteByteSPI,w
  5862  070D  39EF               	andlw	-17
  5863  070E  0672               	xorwf	??_WriteByteSPI,w
  5864  070F  008D               	movwf	13	;volatile
  5865                           
  5866                           ;spi_software.c: 171: ClockPulse();
  5867  0710  318F  27BC  3187   	fcall	_ClockPulse
  5868                           
  5869                           ;spi_software.c: 172: data_byte <<= 1;
  5870  0713  1003               	clrc
  5871  0714  0DF3               	rlf	WriteByteSPI@data_byte,f
  5872                           
  5873                           ;spi_software.c: 173: } while (--bit_counter);
  5874  0715  3001               	movlw	1
  5875  0716  02F4               	subwf	WriteByteSPI@bit_counter,f
  5876  0717  1903               	btfsc	3,2
  5877  0718  0008               	return
  5878  0719  2F05               	goto	l2348
  5879  071A                     __end_of_WriteByteSPI:	
  5880                           
  5881                           	psect	text46
  5882  0FBC                     __ptext46:	
  5883 ;; *************** function _ClockPulse *****************
  5884 ;; Defined at:
  5885 ;;		line 177 in file "spi/spi_software.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    2
  5906 ;; This function calls:
  5907 ;;		_SPIDelay
  5908 ;; This function is called by:
  5909 ;;		_Read2BytesSPI
  5910 ;;		_ReadByteSPI
  5911 ;;		_WriteByteSPI
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           
  5916                           ;psect for function _ClockPulse
  5917  0FBC                     _ClockPulse:	
  5918                           
  5919                           ;spi_software.c: 179: LATCbits.LATC2 = 1;
  5920                           
  5921                           ;incstack = 0
  5922                           ; Regs used in _ClockPulse: [wreg+status,2+status,0+pclath+cstack]
  5923  0FBC  0022               	movlb	2	; select bank2
  5924  0FBD  150E               	bsf	14,2	;volatile
  5925                           
  5926                           ;spi_software.c: 180: SPIDelay();
  5927  0FBE  318F  2792  318F   	fcall	_SPIDelay
  5928                           
  5929                           ;spi_software.c: 181: LATCbits.LATC2 = 0;
  5930  0FC1  0022               	movlb	2	; select bank2
  5931  0FC2  110E               	bcf	14,2	;volatile
  5932                           
  5933                           ;spi_software.c: 182: SPIDelay();
  5934  0FC3  318F  2792         	fcall	_SPIDelay
  5935  0FC5  0008               	return
  5936  0FC6                     __end_of_ClockPulse:	
  5937                           
  5938                           	psect	text47
  5939  04E4                     __ptext47:	
  5940 ;; *************** function _DAC1220_Reset *****************
  5941 ;; Defined at:
  5942 ;;		line 45 in file "spi/spi_software.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, status,0, pclath, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;Total ram usage:        2 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    2
  5963 ;; This function calls:
  5964 ;;		_SPIDelay
  5965 ;; This function is called by:
  5966 ;;		_InitializeIO
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           
  5971                           ;psect for function _DAC1220_Reset
  5972  04E4                     _DAC1220_Reset:	
  5973                           
  5974                           ;spi_software.c: 46: LATBbits.LATB6 = 0;
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _DAC1220_Reset: [wreg+status,2+status,0+pclath+cstack]
  5978  04E4  0022               	movlb	2	; select bank2
  5979  04E5  130D               	bcf	13,6	;volatile
  5980                           
  5981                           ;spi_software.c: 47: SPIDelay();
  5982  04E6  318F  2792  3184   	fcall	_SPIDelay
  5983                           
  5984                           ;spi_software.c: 48: LATCbits.LATC2 = 1;
  5985  04E9  0022               	movlb	2	; select bank2
  5986  04EA  150E               	bsf	14,2	;volatile
  5987                           
  5988                           ;spi_software.c: 49: _delay((unsigned long)((264)*(48000000/4000000.0)));
  5989  04EB  3005               	movlw	5
  5990  04EC  00F3               	movwf	??_DAC1220_Reset+1
  5991  04ED  301B               	movlw	27
  5992  04EE  00F2               	movwf	??_DAC1220_Reset
  5993  04EF                     u1897:	
  5994  04EF  0BF2               	decfsz	??_DAC1220_Reset,f
  5995  04F0  2CEF               	goto	u1897
  5996  04F1  0BF3               	decfsz	??_DAC1220_Reset+1,f
  5997  04F2  2CEF               	goto	u1897
  5998  04F3  2CF4               	nop2
  5999                           
  6000                           ;spi_software.c: 50: LATCbits.LATC2 = 0;
  6001  04F4  0022               	movlb	2	; select bank2
  6002  04F5  110E               	bcf	14,2	;volatile
  6003                           
  6004                           ;spi_software.c: 51: SPIDelay();
  6005  04F6  318F  2792  3184   	fcall	_SPIDelay
  6006                           
  6007                           ;spi_software.c: 52: LATCbits.LATC2 = 1;
  6008  04F9  0022               	movlb	2	; select bank2
  6009  04FA  150E               	bsf	14,2	;volatile
  6010                           
  6011                           ;spi_software.c: 53: _delay((unsigned long)((570)*(48000000/4000000.0)));
  6012  04FB  3009               	movlw	9
  6013  04FC  00F3               	movwf	??_DAC1220_Reset+1
  6014  04FD  30E1               	movlw	225
  6015  04FE  00F2               	movwf	??_DAC1220_Reset
  6016  04FF                     u1907:	
  6017  04FF  0BF2               	decfsz	??_DAC1220_Reset,f
  6018  0500  2CFF               	goto	u1907
  6019  0501  0BF3               	decfsz	??_DAC1220_Reset+1,f
  6020  0502  2CFF               	goto	u1907
  6021                           
  6022                           ;spi_software.c: 54: LATCbits.LATC2 = 0;
  6023  0503  0022               	movlb	2	; select bank2
  6024  0504  110E               	bcf	14,2	;volatile
  6025                           
  6026                           ;spi_software.c: 55: SPIDelay();
  6027  0505  318F  2792  3184   	fcall	_SPIDelay
  6028                           
  6029                           ;spi_software.c: 56: LATCbits.LATC2 = 1;
  6030  0508  0022               	movlb	2	; select bank2
  6031  0509  150E               	bsf	14,2	;volatile
  6032                           
  6033                           ;spi_software.c: 57: _delay((unsigned long)((903)*(48000000/4000000.0)));
  6034  050A  300F               	movlw	15
  6035  050B  00F3               	movwf	??_DAC1220_Reset+1
  6036  050C  3011               	movlw	17
  6037  050D  00F2               	movwf	??_DAC1220_Reset
  6038  050E                     u1917:	
  6039  050E  0BF2               	decfsz	??_DAC1220_Reset,f
  6040  050F  2D0E               	goto	u1917
  6041  0510  0BF3               	decfsz	??_DAC1220_Reset+1,f
  6042  0511  2D0E               	goto	u1917
  6043                           
  6044                           ;spi_software.c: 58: LATCbits.LATC2 = 0;
  6045  0512  0022               	movlb	2	; select bank2
  6046  0513  110E               	bcf	14,2	;volatile
  6047                           
  6048                           ;spi_software.c: 59: SPIDelay();
  6049  0514  318F  2792  3184   	fcall	_SPIDelay
  6050                           
  6051                           ;spi_software.c: 60: LATBbits.LATB6 = 1;
  6052  0517  0022               	movlb	2	; select bank2
  6053  0518  170D               	bsf	13,6	;volatile
  6054                           
  6055                           ;spi_software.c: 61: SPIDelay();
  6056  0519  318F  2792         	fcall	_SPIDelay
  6057  051B  0008               	return
  6058  051C                     __end_of_DAC1220_Reset:	
  6059                           
  6060                           	psect	text48
  6061  0F92                     __ptext48:	
  6062 ;; *************** function _SPIDelay *****************
  6063 ;; Defined at:
  6064 ;;		line 186 in file "spi/spi_software.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;		None
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;		None
  6069 ;; Return value:  Size  Location     Type
  6070 ;;		None               void
  6071 ;; Registers used:
  6072 ;;		wreg
  6073 ;; Tracked objects:
  6074 ;;		On entry : 0/0
  6075 ;;		On exit  : 0/0
  6076 ;;		Unchanged: 0/0
  6077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;Total ram usage:        1 bytes
  6083 ;; Hardware stack levels used:    1
  6084 ;; Hardware stack levels required when called:    1
  6085 ;; This function calls:
  6086 ;;		Nothing
  6087 ;; This function is called by:
  6088 ;;		_MCP3550_Read
  6089 ;;		_DAC1220_Reset
  6090 ;;		_DAC1220_Write2Bytes
  6091 ;;		_DAC1220_Write3Bytes
  6092 ;;		_DAC1220_Read3Bytes
  6093 ;;		_ClockPulse
  6094 ;;		_DAC1220_Read2Bytes
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           
  6099                           ;psect for function _SPIDelay
  6100  0F92                     _SPIDelay:	
  6101                           
  6102                           ;spi_software.c: 187: _delay(200);
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _SPIDelay: [wreg]
  6106  0F92  3042               	movlw	66
  6107  0F93  00F1               	movwf	??_SPIDelay
  6108  0F94                     u1927:	
  6109  0F94  0BF1               	decfsz	??_SPIDelay,f
  6110  0F95  2F94               	goto	u1927
  6111  0F96  0000               	nop
  6112  0F97  0008               	return
  6113  0F98                     __end_of_SPIDelay:	
  6114                           
  6115                           	psect	text49
  6116  0FD1                     __ptext49:	
  6117 ;; *************** function _InitializeSPI *****************
  6118 ;; Defined at:
  6119 ;;		line 6 in file "spi/spi_software.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;		None
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;		None               void
  6126 ;; Registers used:
  6127 ;;		None
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        0 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    1
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_InitializeIO
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _InitializeSPI
  6149  0FD1                     _InitializeSPI:	
  6150                           
  6151                           ;spi_software.c: 8: LATBbits.LATB6 = 1;
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _InitializeSPI: []
  6155  0FD1  0022               	movlb	2	; select bank2
  6156  0FD2  170D               	bsf	13,6	;volatile
  6157                           
  6158                           ;spi_software.c: 9: LATCbits.LATC3 = 1;
  6159  0FD3  158E               	bsf	14,3	;volatile
  6160                           
  6161                           ;spi_software.c: 11: TRISBbits.TRISB6 = 0;
  6162  0FD4  0021               	movlb	1	; select bank1
  6163  0FD5  130D               	bcf	13,6	;volatile
  6164                           
  6165                           ;spi_software.c: 12: TRISCbits.TRISC3 = 0;
  6166  0FD6  118E               	bcf	14,3	;volatile
  6167                           
  6168                           ;spi_software.c: 14: TRISCbits.TRISC2 = 0;
  6169  0FD7  110E               	bcf	14,2	;volatile
  6170                           
  6171                           ;spi_software.c: 15: LATCbits.LATC2 = 0;
  6172  0FD8  0022               	movlb	2	; select bank2
  6173  0FD9  110E               	bcf	14,2	;volatile
  6174                           
  6175                           ;spi_software.c: 17: TRISBbits.TRISB4 = 1;
  6176  0FDA  0021               	movlb	1	; select bank1
  6177  0FDB  160D               	bsf	13,4	;volatile
  6178                           
  6179                           ;spi_software.c: 18: TRISCbits.TRISC7 = 1;
  6180  0FDC  178E               	bsf	14,7	;volatile
  6181  0FDD  0008               	return
  6182  0FDE                     __end_of_InitializeSPI:	
  6183                           
  6184                           	psect	text50
  6185  051C                     __ptext50:	
  6186 ;; *************** function _HEFLASH_readBlock *****************
  6187 ;; Defined at:
  6188 ;;		line 50 in file "heflash/HEFlash.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  buffer          1    wreg     PTR unsigned char 
  6191 ;;		 -> heflashbuffer(32), 
  6192 ;;  radd            1    3[COMMON] unsigned char 
  6193 ;;  count           1    4[COMMON] unsigned char 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  buffer          1    7[COMMON] PTR unsigned char 
  6196 ;;		 -> heflashbuffer(32), 
  6197 ;;  add             2    8[COMMON] unsigned int 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      unsigned char 
  6200 ;; Registers used:
  6201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6210 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;Total ram usage:        7 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    2
  6214 ;; This function calls:
  6215 ;;		_FLASH_read
  6216 ;; This function is called by:
  6217 ;;		_InitializeIO
  6218 ;;		_command_read_offset
  6219 ;;		_command_read_shuntcalibration
  6220 ;;		_command_read_dac_cal
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _HEFLASH_readBlock
  6226  051C                     _HEFLASH_readBlock:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _HEFLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6230                           ;HEFLASH_readBlock@buffer stored from wreg
  6231  051C  00F7               	movwf	HEFLASH_readBlock@buffer
  6232                           
  6233                           ;HEFlash.c: 52: unsigned add = radd * 32 + 0x1F80;
  6234  051D  0873               	movf	HEFLASH_readBlock@radd,w
  6235  051E  00F5               	movwf	??_HEFLASH_readBlock
  6236  051F  01F6               	clrf	??_HEFLASH_readBlock+1
  6237  0520  3005               	movlw	5
  6238  0521                     u1325:	
  6239  0521  35F5               	lslf	??_HEFLASH_readBlock,f
  6240  0522  0DF6               	rlf	??_HEFLASH_readBlock+1,f
  6241  0523  0B89               	decfsz	9,f
  6242  0524  2D21               	goto	u1325
  6243  0525  0875               	movf	??_HEFLASH_readBlock,w
  6244  0526  3E80               	addlw	128
  6245  0527  00F8               	movwf	HEFLASH_readBlock@add
  6246  0528  301F               	movlw	31
  6247  0529  3D76               	addwfc	??_HEFLASH_readBlock+1,w
  6248  052A  00F9               	movwf	HEFLASH_readBlock@add+1
  6249                           
  6250                           ;HEFlash.c: 55: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  6251  052B  3021               	movlw	33
  6252  052C  0274               	subwf	HEFLASH_readBlock@count,w
  6253  052D  1803               	skipnc
  6254  052E  0008               	return
  6255  052F  3004               	movlw	4
  6256  0530  0273               	subwf	HEFLASH_readBlock@radd,w
  6257  0531  1803               	btfsc	3,0
  6258  0532  0008               	return
  6259  0533                     l2246:	
  6260  0533  08F4               	movf	HEFLASH_readBlock@count,f
  6261  0534  1903               	btfsc	3,2
  6262  0535  0008               	return
  6263                           
  6264                           ;HEFlash.c: 60: {
  6265                           ;HEFlash.c: 61: *buffer++ = (char) FLASH_read( add++);
  6266                           
  6267                           ;HEFlash.c: 59: while ( count > 0)
  6268                           
  6269                           ;HEFlash.c: 56: return -1;
  6270                           ;	Return value of _HEFLASH_readBlock is never used
  6271  0536  0879               	movf	HEFLASH_readBlock@add+1,w
  6272  0537  01F2               	clrf	?_FLASH_read+1
  6273  0538  07F2               	addwf	?_FLASH_read+1,f
  6274  0539  0878               	movf	HEFLASH_readBlock@add,w
  6275  053A  01F1               	clrf	?_FLASH_read
  6276  053B  07F1               	addwf	?_FLASH_read,f
  6277  053C  3187  27D4  3185   	fcall	_FLASH_read
  6278  053F  0871               	movf	?_FLASH_read,w
  6279  0540  00F5               	movwf	??_HEFLASH_readBlock
  6280  0541  0877               	movf	HEFLASH_readBlock@buffer,w
  6281  0542  0086               	movwf	6
  6282  0543  0187               	clrf	7
  6283  0544  0875               	movf	??_HEFLASH_readBlock,w
  6284  0545  0081               	movwf	1
  6285  0546  3001               	movlw	1
  6286  0547  07F8               	addwf	HEFLASH_readBlock@add,f
  6287  0548  3000               	movlw	0
  6288  0549  3DF9               	addwfc	HEFLASH_readBlock@add+1,f
  6289  054A  3001               	movlw	1
  6290  054B  00F5               	movwf	??_HEFLASH_readBlock
  6291  054C  0875               	movf	??_HEFLASH_readBlock,w
  6292  054D  07F7               	addwf	HEFLASH_readBlock@buffer,f
  6293                           
  6294                           ;HEFlash.c: 62: count--;
  6295  054E  3001               	movlw	1
  6296  054F  02F4               	subwf	HEFLASH_readBlock@count,f
  6297  0550  2D33               	goto	l2246
  6298  0551                     __end_of_HEFLASH_readBlock:	
  6299                           ;HEFlash.c: 63: }
  6300                           ;HEFlash.c: 66: return 0;
  6301                           ;	Return value of _HEFLASH_readBlock is never used
  6302                           
  6303                           
  6304                           	psect	text51
  6305  07D4                     __ptext51:	
  6306 ;; *************** function _FLASH_read *****************
  6307 ;; Defined at:
  6308 ;;		line 32 in file "heflash/Flash.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;  address         2    1[COMMON] unsigned int 
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;                  2    1[COMMON] unsigned int 
  6315 ;; Registers used:
  6316 ;;		wreg, status,2, status,0
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;Total ram usage:        2 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:    1
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_HEFLASH_readBlock
  6333 ;;		_FLASH_readBlock
  6334 ;;		_HEFLASH_readByte
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           
  6339                           ;psect for function _FLASH_read
  6340  07D4                     _FLASH_read:	
  6341                           
  6342                           ;Flash.c: 34: PMADR = address;
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in _FLASH_read: [wreg+status,2+status,0]
  6346  07D4  0872               	movf	FLASH_read@address+1,w
  6347  07D5  0023               	movlb	3	; select bank3
  6348  07D6  0192               	clrf	18	;volatile
  6349  07D7  0792               	addwf	18,f	;volatile
  6350  07D8  0871               	movf	FLASH_read@address,w
  6351  07D9  0191               	clrf	17	;volatile
  6352  07DA  0791               	addwf	17,f	;volatile
  6353                           
  6354                           ;Flash.c: 35: PMCON1bits.CFGS = 0;
  6355  07DB  1315               	bcf	21,6	;volatile
  6356                           
  6357                           ;Flash.c: 36: PMCON1bits.RD = 1;
  6358  07DC  1415               	bsf	21,0	;volatile
  6359                           
  6360                           ;Flash.c: 37: _nop();
  6361  07DD  0000               	nop
  6362                           
  6363                           ;Flash.c: 38: _nop();
  6364  07DE  0000               	nop
  6365                           
  6366                           ;Flash.c: 41: return PMDAT;
  6367  07DF  0023               	movlb	3	; select bank3
  6368  07E0  0814               	movf	20,w	;volatile
  6369  07E1  01F2               	clrf	?_FLASH_read+1
  6370  07E2  07F2               	addwf	?_FLASH_read+1,f
  6371  07E3  0813               	movf	19,w	;volatile
  6372  07E4  01F1               	clrf	?_FLASH_read
  6373  07E5  07F1               	addwf	?_FLASH_read,f
  6374  07E6  0008               	return
  6375  07E7                     __end_of_FLASH_read:	
  6376                           
  6377                           	psect	intentry
  6378  0004                     __pintentry:	
  6379 ;; *************** function _isr *****************
  6380 ;; Defined at:
  6381 ;;		line 348 in file "main.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		None
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        1 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		Interrupt level 1
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408  0004                     _isr:	
  6409                           
  6410                           ;incstack = 0
  6411                           ; Regs used in _isr: []
  6412  0004  3180               	pagesel	$
  6413  0005  0020               	movlb	0	; select bank0
  6414  0006  087F               	movf	127,w
  6415  0007  00F0               	movwf	??_isr
  6416  0008  0870               	movf	??_isr,w
  6417  0009  00FF               	movwf	127
  6418  000A  0009               	retfie
  6419  000B                     __end_of_isr:	
  6420  0003                     
  6421                           	psect	functab
  6422  0100                     __pfunctab:	
  6423  0100                     __fptable:	
  6424  0100                     fptable:	
  6425  0100  3181               	movlp	high fptable
  6426  0101  0782               	addwf	2,f
  6427  0102                     fpbase:	
  6428  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  6429  0103                     __end_of__fptable:	
  6430  007E                     btemp	set	126	;btemp
  6431  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    0
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     16      75
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?_strncmp	int  size(1) Largest target is 0

    ?_memcpy	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_strlen	unsigned int  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    ?_FLASH_read	unsigned int  size(1) Largest target is 0

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_20(CODE[14]), STR_19(CODE[13]), STR_18(CODE[11]), STR_17(CODE[10]), 
		 -> STR_16(CODE[12]), STR_15(CODE[11]), STR_14(CODE[8]), STR_13(CODE[7]), 
		 -> STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[14]), STR_7(CODE[15]), STR_6(CODE[9]), STR_5(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 8192
		 -> uart_command(BANK0[20]), ROM(CODE[8192]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    memcpy@d1	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@s1	PTR const void  size(1) Largest target is 32
		 -> heflashbuffer(BANK0[32]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 32
		 -> heflashbuffer(BANK0[32]), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(1) Largest target is 0
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    USART_Send@dataToSend	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_4(CODE[6]), STR_3(CODE[4]), STR_2(CODE[3]), STR_1(CODE[8]), 

    received_data	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_set_dac_cal@dac_cal_data	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_save_shuntcalibration@shuntcalibration_data	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), 

    command_save_offset@offset_data	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), 

    sp__memcpy	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    transmit_data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    command_set_dac@dac_data	PTR const unsigned char  size(1) Largest target is 8192
		 -> ROM(CODE[8192]), 

    send_WAIT@reply	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_4(CODE[6]), 

    send_OK@reply	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    command_unknown@reply	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    InitializeIO@startReply	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 

    Read2BytesSPI@data2_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    Read2BytesSPI@data1_byte	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    DAC1220_Read3Bytes@byte3	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte2	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    DAC1220_Read3Bytes@byte1	PTR unsigned char  size(1) Largest target is 6
		 -> command_calibrate_dac@data(BANK0[6]), 

    MCP3550_Read@adc_data	PTR unsigned char  size(1) Largest target is 6
		 -> command_read_adc@adc_data(BANK0[6]), 

    HEFLASH_readBlock@buffer	PTR unsigned char  size(1) Largest target is 32
		 -> heflashbuffer(BANK0[32]), 

    HEFLASH_writeBlock@data	PTR const unsigned char  size(2) Largest target is 8192
		 -> command_calibrate_dac@data(BANK0[6]), ROM(CODE[8192]), 


Critical Paths under _main in COMMON

    _main->_InitializeIO
    _interpret_command->_command_unknown
    _command_set_dac_cal->_HEFLASH_writeBlock
    _command_set_dac_cal->_send_OK
    _command_read_dac_cal->_HEFLASH_readBlock
    _command_save_shuntcalibration->_HEFLASH_writeBlock
    _command_save_shuntcalibration->_send_OK
    _command_read_shuntcalibration->_HEFLASH_readBlock
    _command_save_offset->_HEFLASH_writeBlock
    _command_save_offset->_send_OK
    _command_read_offset->_HEFLASH_readBlock
    _command_read_adc->_send_WAIT
    _send_WAIT->_USART_Send
    _MCP3550_Read->_Read2BytesSPI
    _command_calibrate_dac->_HEFLASH_writeBlock
    _command_calibrate_dac->_send_OK
    _DAC1220_SelfCal->_DAC1220_Write2Bytes
    _DAC1220_Read3Bytes->_WriteByteSPI
    _DAC1220_Read3Bytes->_ReadByteSPI
    _HEFLASH_writeBlock->_FLASH_write
    _command_set_dac->_send_OK
    _command_range3->_send_OK
    _command_range2->_send_OK
    _command_range1->_send_OK
    _command_mode_galvanostatic->_send_OK
    _command_mode_potentiostatic->_send_OK
    _command_cell_off->_send_OK
    _command_cell_on->_send_OK
    _send_OK->_USART_Send
    _command_unknown->_USART_Send
    _InitializeIO->_DAC1220_Init
    _InitializeIO->_USART_Send
    _USART_Send->_strlen
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _DAC1220_Init->_DAC1220_Write3Bytes
    _DAC1220_Write3Bytes->_WriteByteSPI
    _DAC1220_Write2Bytes->_WriteByteSPI
    _ClockPulse->_SPIDelay
    _DAC1220_Reset->_SPIDelay
    _HEFLASH_readBlock->_FLASH_read

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_interpret_command
    _interpret_command->_command_calibrate_dac
    _command_set_dac_cal->_HEFLASH_writeBlock
    _command_set_dac_cal->_send_OK
    _command_save_shuntcalibration->_HEFLASH_writeBlock
    _command_save_shuntcalibration->_send_OK
    _command_save_offset->_HEFLASH_writeBlock
    _command_save_offset->_send_OK
    _command_read_adc->_send_WAIT
    _send_WAIT->_USART_Send
    _command_calibrate_dac->_HEFLASH_writeBlock
    _command_calibrate_dac->_send_OK
    _command_set_dac->_send_OK
    _command_range3->_send_OK
    _command_range2->_send_OK
    _command_range1->_send_OK
    _command_mode_galvanostatic->_send_OK
    _command_mode_potentiostatic->_send_OK
    _command_cell_off->_send_OK
    _command_cell_on->_send_OK
    _send_OK->_USART_Send
    _command_unknown->_USART_Send
    _InitializeIO->_USART_Send

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10603
                                             13 BANK0      3     3      0
                       _InitializeIO
                  _interpret_command
                 _EUSART_is_rx_ready
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interpret_command                                    1     1      0    9303
                                             12 BANK0      1     1      0
                    _command_unknown
                    _command_cell_on
                   _command_cell_off
        _command_mode_potentiostatic
         _command_mode_galvanostatic
                     _command_range1
                     _command_range2
                     _command_range3
                    _command_set_dac
              _command_calibrate_dac
                   _command_read_adc
                _command_read_offset
                _command_save_offset
      _command_read_shuntcalibration
      _command_save_shuntcalibration
               _command_read_dac_cal
                _command_set_dac_cal
                            _strncmp
 ---------------------------------------------------------------------------------
 (3) _strncmp                                              7     2      5     134
                                              1 COMMON     7     2      5
 ---------------------------------------------------------------------------------
 (2) _command_set_dac_cal                                  4     4      0    1076
                                              3 BANK0      4     4      0
                 _HEFLASH_writeBlock
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_dac_cal                                 3     3      0     349
                                              0 BANK0      3     3      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _command_save_shuntcalibration                        2     2      0     698
                                              3 BANK0      2     2      0
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_shuntcalibration                        3     3      0     349
                                              0 BANK0      3     3      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _command_save_offset                                  2     2      0     698
                                              3 BANK0      2     2      0
                 _HEFLASH_writeBlock
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_read_offset                                  3     3      0     349
                                              0 BANK0      3     3      0
                  _HEFLASH_readBlock
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     120
                                              1 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _command_read_adc                                     8     8      0    1048
                                              3 BANK0      8     8      0
                       _MCP3550_Read
                          _send_WAIT
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (3) _send_WAIT                                            2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (3) _MCP3550_Read                                         3     3      0     505
                                              6 COMMON     3     3      0
                           _SPIDelay
                      _Read2BytesSPI
 ---------------------------------------------------------------------------------
 (4) _Read2BytesSPI                                        4     3      1     282
                                              2 COMMON     4     3      1
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (2) _command_calibrate_dac                                9     9      0    1338
                                              3 BANK0      9     9      0
                 _HEFLASH_writeBlock
                 _DAC1220_Read3Bytes
                    _DAC1220_SelfCal
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _DAC1220_SelfCal                                      2     2      0     161
                                              8 COMMON     2     2      0
                _DAC1220_Write2Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Read3Bytes                                   5     2      3     269
                                              5 COMMON     5     2      3
                           _SPIDelay
                       _WriteByteSPI
                        _ReadByteSPI
 ---------------------------------------------------------------------------------
 (4) _ReadByteSPI                                          3     3      0      77
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_writeBlock                                   8     5      3     336
                                              7 COMMON     5     2      3
                                              0 BANK0      3     3      0
                        _FLASH_write
                        _FLASH_erase
 ---------------------------------------------------------------------------------
 (4) _FLASH_erase                                          3     1      2      45
                                              1 COMMON     3     1      2
                            __unlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_write                                          6     1      5      89
                                              1 COMMON     6     1      5
                            __unlock
 ---------------------------------------------------------------------------------
 (5) __unlock                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _command_set_dac                                      4     4      0     616
                                              3 BANK0      4     4      0
                _DAC1220_Write3Bytes
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range3                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range2                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_range1                                       2     2      0     331
                                              3 BANK0      2     2      0
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_galvanostatic                           0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_mode_potentiostatic                          0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_off                                     0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (2) _command_cell_on                                      0     0      0     331
                            _send_OK
 ---------------------------------------------------------------------------------
 (3) _send_OK                                              2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (2) _command_unknown                                      2     2      0     331
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (1) _InitializeIO                                         4     4      0    1198
                                             11 COMMON     1     1      0
                                              2 BANK0      3     3      0
                  _HEFLASH_readBlock
                      _InitializeSPI
                      _DAC1220_Reset
                _DAC1220_Write3Bytes
                       _DAC1220_Init
                  _EUSART_Initialize
                             _strlen
                         _USART_Send
 ---------------------------------------------------------------------------------
 (4) _USART_Send                                           4     3      1     136
                                              9 COMMON     2     1      1
                                              0 BANK0      2     2      0
                             _strlen (ARG)
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _strlen                                               8     6      2     130
                                              1 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0      93
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
             _EUSART_SetErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Init                                         2     2      0     353
                                              9 COMMON     2     2      0
                _DAC1220_Write2Bytes
                _DAC1220_Write3Bytes
 ---------------------------------------------------------------------------------
 (3) _DAC1220_Write3Bytes                                  4     1      3     192
                                              5 COMMON     4     1      3
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _DAC1220_Write2Bytes                                  3     1      2     161
                                              5 COMMON     3     1      2
                           _SPIDelay
                       _WriteByteSPI
 ---------------------------------------------------------------------------------
 (4) _WriteByteSPI                                         3     3      0      68
                                              2 COMMON     3     3      0
                         _ClockPulse
 ---------------------------------------------------------------------------------
 (5) _ClockPulse                                           0     0      0       0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (2) _DAC1220_Reset                                        2     2      0       0
                                              2 COMMON     2     2      0
                           _SPIDelay
 ---------------------------------------------------------------------------------
 (6) _SPIDelay                                             1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitializeSPI                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _HEFLASH_readBlock                                    7     5      2     229
                                              3 COMMON     7     5      2
                         _FLASH_read
 ---------------------------------------------------------------------------------
 (4) _FLASH_read                                           2     0      2      31
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeIO
     _HEFLASH_readBlock
       _FLASH_read
     _InitializeSPI
     _DAC1220_Reset
       _SPIDelay
     _DAC1220_Write3Bytes
       _SPIDelay
       _WriteByteSPI
         _ClockPulse
           _SPIDelay
     _DAC1220_Init
       _DAC1220_Write2Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
     _EUSART_Initialize
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetErrorHandler
     _strlen
     _USART_Send
       _strlen (ARG)
       _EUSART_Write (ARG)
   _interpret_command
     _command_unknown
       _strlen
       _USART_Send
         _strlen (ARG)
         _EUSART_Write (ARG)
     _command_cell_on
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_cell_off
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_mode_potentiostatic
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_mode_galvanostatic
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range1
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range2
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_range3
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_set_dac
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_calibrate_dac
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Read3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
         _ReadByteSPI
           _ClockPulse
             _SPIDelay
       _DAC1220_SelfCal
         _DAC1220_Write2Bytes
           _SPIDelay
           _WriteByteSPI
             _ClockPulse
               _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_adc
       _MCP3550_Read
         _SPIDelay
         _Read2BytesSPI
           _ClockPulse
             _SPIDelay
       _send_WAIT
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
       _EUSART_Write
     _command_read_offset
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_save_offset
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_shuntcalibration
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_save_shuntcalibration
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _command_read_dac_cal
       _HEFLASH_readBlock
         _FLASH_read
       _memcpy
     _command_set_dac_cal
       _HEFLASH_writeBlock
         _FLASH_write
           __unlock
         _FLASH_erase
           __unlock
       _DAC1220_Write3Bytes
         _SPIDelay
         _WriteByteSPI
           _ClockPulse
             _SPIDelay
       _send_OK
         _strlen
         _USART_Send
           _strlen (ARG)
           _EUSART_Write (ARG)
     _strncmp
   _EUSART_is_rx_ready
   _EUSART_Read

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      58      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      5F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 19 14:05:42 2020

                                                 pc 0002                                         __CFG_CP$OFF 0000  
                                               l381 0FC6                                                 l388 07F9  
                                               u705 0348                                                 u915 05C6  
                                   ?_command_range1 0070                                     ?_command_range2 0070  
                                   ?_command_range3 0070                                                 _isr 0004  
                    ?_EUSART_SetFramingErrorHandler 0070                                        __CFG_BORV$LO 0000  
                                               wreg 0009                            Read2BytesSPI@bit_counter 0074  
                                      ?_EUSART_Read 0070                                   FLASH_read@address 0071  
                                      __CFG_LVP$OFF 0000                                    ?_command_cell_on 0070  
                             __size_of_WriteByteSPI 001A                                                l2014 05BC  
                                              l2304 04A1                                                l2152 0423  
                                              l1610 038A                                                l2308 04A7  
                                              l2148 040C                                                l2156 03EB  
                                              l2246 0533                                                l2158 042C  
                                              l1608 0363                                                l2600 061F  
                                              l2290 047F                                                l2348 0705  
                                              l2508 0737                                                l2276 04DE  
                                              l2700 0214                                                l2198 0FCF  
                                              l2384 076A                                                l2712 024D  
                                              l2730 02A1                                                l2706 022F  
                                              l2724 0286                                                l2652 0139  
                                              l2494 05E0                                                l2718 0268  
                                              l2670 018A                                                l2646 011E  
                                              l2496 05EC                                                l2736 02BF  
                                              l2664 016F                                                l2682 01C0  
                                              l2658 0154                                                l2676 01A5  
                                              l2756 0593                                                l2748 058B  
                                              l2598 060D                                                l2694 01F9  
                                              l2758 05AB                                                l2688 01DE  
                                              ?_isr 0070                                                STR_1 0086  
                                              STR_2 00CF                                                STR_3 00CB  
                                              STR_4 00C5                                                STR_5 00B6  
                                              STR_6 007D                                                STR_7 0019  
                                              STR_8 0036                                                STR_9 0096  
                                              u1325 0521                                                u1265 03F5  
                                              u1907 04FF                                                u1917 050E  
                                              u1837 0439                                                u1927 0F94  
                                              u1847 00EA                                                u1857 0FF6  
                                              u1867 0FE5                                                u1877 02E5  
                                              u1887 02F5                                                u1897 04EF  
                        __end_of_HEFLASH_writeBlock 03A2                                        __CFG_WRT$OFF 0000  
                                              _main 0583                                                fsr0h 0005  
                                              fsr1h 0007                                                fsr0l 0004  
                                              indf0 0000                                                indf1 0001  
                                              fsr1l 0006                                                btemp 007E  
                         command_calibrate_dac@data 0061                                    ?_command_set_dac 0070  
                                     __CFG_BOREN$ON 0000                                                start 000B  
                                     __CFG_IESO$OFF 0000                                    ?_command_unknown 0070  
                                     ??_ReadByteSPI 0072                              __size_of_InitializeSPI 000D  
                              __end_of_MCP3550_Read 04E4                                 __size_of_FLASH_read 0013  
                                             ??_isr 0070                                   ?_command_cell_off 0070  
                                        _ClockPulse 0FBC                       __size_of_command_read_dac_cal 0021  
                    command_save_offset@offset_data 005F                                       ?_EUSART_Write 0070  
                                             PMCON1 0195                                               PMCON2 0196  
                                ??_command_cell_off 007C                     ??_command_save_shuntcalibration 005E  
                               _DAC1220_Write2Bytes 06E4                                               ?_main 0070  
                               _DAC1220_Write3Bytes 0686                                               STR_10 009E  
                                             STR_11 00A6                                               STR_12 008E  
                                             STR_20 0028                                               STR_13 00BE  
                                             STR_14 00AE                                               STR_15 0068  
                                             STR_16 0051                                               STR_17 0073  
                                     __CFG_WDTE$OFF 0000                                               STR_18 005D  
                                             STR_19 0044                                        _WriteByteSPI 0700  
                                             _PMADR 0191                                               _PMDAT 0193  
                                             _RCREG 0199                                               _RCSTA 019D  
                                     _transmit_data 0025                                               _TXREG 019A  
                                             _TXSTA 019E                                      __CFG_FCMEN$OFF 0000  
                                 ?_command_read_adc 0070                                     __end_of__unlock 0FBC  
                           command_set_dac@dac_data 0061                                    __end_of_SPIDelay 0F98  
                                   ??_Read2BytesSPI 0073                                  ??_command_read_adc 005E  
                                             main@c 0069                                               main@i 006A  
                                             fpbase 0102                                     __end_of_send_OK 07A8  
                                     ?_InitializeIO 0070                              HEFLASH_writeBlock@data 0077  
                            HEFLASH_writeBlock@radd 005B                                ?_DAC1220_Write2Bytes 0075  
                              ?_DAC1220_Write3Bytes 0075                                               status 0003  
                                             wtemp0 007E                                     __end_of_strncmp 042F  
command_save_shuntcalibration@shuntcalibration_data 005F                                         ?_USART_Send 0079  
                                    __CFG_MCLRE$OFF 0000                        ??_command_mode_galvanostatic 007C  
                                   __initialization 000D                                        __end_of_main 05B3  
                                    ??_EUSART_Write 0071                                      __CFG_LPBOR$OFF 0000  
                              __size_of_FLASH_erase 0019                                 __end_of_ReadByteSPI 077C  
                                            ??_main 0068                                __size_of_FLASH_write 0022  
                               __CFG_USBLSCLK$48MHz 0000                                HEFLASH_readBlock@add 0078  
                                     _InitializeSPI 0FD1                fp__EUSART_DefaultFramingErrorHandler 0000  
                 _EUSART_DefaultFramingErrorHandler 0000                          _EUSART_OverrunErrorHandler 0022  
                                            _APFCON 011D                                              _ANSELA 018C  
                                            _ANSELB 018D                                              _ANSELC 018E  
                        __end_of_EUSART_is_rx_ready 0F92                                      ??_InitializeIO 005D  
               __size_of_command_mode_galvanostatic 0005                               ??_DAC1220_Write2Bytes 0077  
                             ??_DAC1220_Write3Bytes 0078                                              _SPBRGH 019C  
                                            _SPBRGL 019B                                    __end_of__fptable 0103  
                                    __CFG_PWRTE$OFF 0000                         __end_of_command_read_offset 06C5  
                         DAC1220_Read3Bytes@address 0079                                      __CFG_STVREN$ON 0000  
                                FLASH_write@address 0071                                         ?_ClockPulse 0070  
                                            _memcpy 05B3                               __end_of_DAC1220_Reset 051C  
                                         ??__unlock 0071                                              _strlen 05DB  
                           WriteByteSPI@bit_counter 0074                                              fptable 0100  
                             _command_calibrate_dac 042F                                              fptotal 0003  
                                         ??_send_OK 007B                                      ?_InitializeSPI 0070  
                               __size_of_USART_Send 0019                             HEFLASH_writeBlock@count 0079  
                                      ??_FLASH_read 0073                                           ??_strncmp 0076  
                              __size_of_EUSART_Read 000B                     ??_command_read_shuntcalibration 005B  
                           __end_of__initialization 0015                               __size_of_MCP3550_Read 0038  
                                    __pcstackCOMMON 0070                                         _ReadByteSPI 0765  
                       __end_of_command_save_offset 00E3                                _received_data_length 007C  
                                  ??_command_range1 005E                                    ??_command_range2 005E  
                                  ??_command_range3 005E                         __end_of_command_set_dac_cal 03EB  
                                         ?_SPIDelay 0070                         __size_of_DAC1220_Read3Bytes 0032  
                                __end_of_FLASH_read 07E7                     ??_EUSART_SetOverrunErrorHandler 0071  
                                      _MCP3550_Read 04AC                                          __pbssBANK0 0020  
                              __end_of_EUSART_Write 0800                                USART_Send@dataLength 0079  
                               __size_of_ClockPulse 000A                                USART_Send@dataToSend 005B  
                __end_of_command_mode_galvanostatic 0F8D                          _command_mode_galvanostatic 0F88  
                   command_set_dac_cal@dac_cal_data 0061                             HEFLASH_readBlock@buffer 0077  
                             HEFLASH_readBlock@radd 0073                                          __pmaintext 0583  
                                _HEFLASH_writeBlock 0342                                  __size_of_send_WAIT 0016  
                                   __CFG_PLLMULT$3x 0000                                          __pintentry 0004  
                                        ??_SPIDelay 0071                                             ?_memcpy 0071  
                                           _BAUDCON 019F                                __end_of_InitializeIO 0342  
                          __size_of_DAC1220_SelfCal 000C                              ?_command_calibrate_dac 0070  
                                           ?_strlen 0071                                 ?_HEFLASH_writeBlock 0077  
                                   ??_InitializeSPI 0071                            ??_EUSART_SetErrorHandler 0071  
                                     ?_DAC1220_Init 0070                           __size_of_command_cell_off 0005  
                      __end_of_command_read_dac_cal 0665                                          __stringtab 0018  
                              ??_HEFLASH_writeBlock 007A                            __size_of_command_cell_on 0005  
                                      ??_USART_Send 007A                           __size_of_command_read_adc 0022  
                          __size_of_command_set_dac 001F                                     __size_of_memcpy 0028  
                          __size_of_command_unknown 0016                                             __ptext1 0FC6  
                                           __ptext2 0F8D                                             __ptext3 0103  
                                           __ptext4 03EB                                             __ptext5 03A2  
                                           __ptext6 0644                                             __ptext7 07E7  
                                           __ptext8 0665                                             __ptext9 00D2  
                                           __unlock 0FB3                                     __size_of_strlen 0025  
                                      __size_of_isr 0007                                             _send_OK 0792  
                                    ??_DAC1220_Init 0079                                  __end_of_USART_Send 074C  
                                     _received_data 0024                                   __end_of_send_WAIT 0792  
                                           clrloop0 0F99                                             _strncmp 03EB  
                              end_of_initialization 0015                               __end_of_Read2BytesSPI 04AC  
             __end_of_EUSART_SetOverrunErrorHandler 0FAC              __size_of_EUSART_SetOverrunErrorHandler 0007  
                     _EUSART_SetOverrunErrorHandler 0FA5                                             memcpy@d 0076  
                                           memcpy@n 0072                                             memcpy@s 0077  
                            ReadByteSPI@bit_counter 0073                                   _EUSART_Initialize 074C  
                      ?_command_mode_potentiostatic 0070                                  ?_EUSART_Initialize 0070  
                                         _RCSTAbits 019D                                  _EUSART_is_rx_ready 0F8D  
                                     ??_FLASH_erase 0073                            command_read_adc@adc_data 005F  
                                      ??_ClockPulse 0072                                       ??_FLASH_write 0076  
                                 _interpret_command 0103                                             strlen@s 0077  
                               ??_EUSART_Initialize 0073                                           _PORTBbits 000D  
                               ?_EUSART_is_rx_ready 0070                                           _PORTCbits 000E  
                                ?_interpret_command 0070                                    __CFG_FOSC$INTOSC 0000  
                                         _TRISAbits 008C                                           _TRISBbits 008D  
                                 ??_DAC1220_SelfCal 0078                                           _TRISCbits 008E  
                             __size_of_EUSART_Write 0008                         __end_of_DAC1220_Write2Bytes 0700  
                       __end_of_DAC1220_Write3Bytes 06A6                                 ??_interpret_command 0067  
                   __size_of_EUSART_SetErrorHandler 0007                           __end_of_EUSART_Initialize 0765  
                              ??_EUSART_is_rx_ready 0071                                  __end_of_ClockPulse 0FC6  
                                         _TXSTAbits 019E                                  __CFG_PLLEN$ENABLED 0000  
                             __size_of_InitializeIO 0080                       ??_command_mode_potentiostatic 007C  
                                      ?_ReadByteSPI 0070                                command_unknown@reply 005D  
                         __end_of_interpret_command 02C2                                   ??_command_cell_on 007C  
                        _EUSART_DefaultErrorHandler 0000                                _command_read_dac_cal 0644  
                      __size_of_command_read_offset 001F                                        _EUSART_Write 07F8  
                                    __end_of_memcpy 05DB                                         USART_Send@i 005C  
                                 __size_of_SPIDelay 0006                               HEFLASH_writeBlock@add 005C  
                               __end_of_FLASH_erase 0733                                   ??_command_set_dac 005E  
                                    __end_of_strlen 0600                                 start_initialization 000D  
                               __end_of_FLASH_write 0644                                   ??_command_unknown 007B  
                                       __end_of_isr 000B                                       ??_EUSART_Read 0071  
                                  _command_cell_off 0F7E                                        _InitializeIO 02C2  
                            __size_of_DAC1220_Reset 0038                         ?_command_mode_galvanostatic 0070  
                                  _command_read_adc 0600                      ?_EUSART_SetOverrunErrorHandler 0070  
                                 _HEFLASH_readBlock 051C                          _EUSART_FramingErrorHandler 0021  
                        __end_of_DAC1220_Read3Bytes 0583                              _EUSART_SetErrorHandler 0FAC  
                              __end_of_DAC1220_Init 07D4                                  ?_HEFLASH_readBlock 0073  
                           ??_command_calibrate_dac 005E                               ?_command_read_dac_cal 0070  
                                    send_WAIT@reply 005D                                            ??_memcpy 0074  
                                          ??_strlen 0073                                       ?_WriteByteSPI 0070  
                      __size_of_command_save_offset 0011                                 ??_HEFLASH_readBlock 0075  
                          DAC1220_Write2Bytes@byte1 0075                            DAC1220_Write2Bytes@byte2 0076  
                                       __pbssCOMMON 007C                __size_of_command_mode_potentiostatic 0005  
                      __size_of_command_set_dac_cal 0049                                       __pcstackBANK0 005B  
                               __end_of__stringdata 00D2                                   __size_of__fptable 0003  
             __end_of_command_save_shuntcalibration 07F8              __size_of_command_save_shuntcalibration 0011  
                     _command_save_shuntcalibration 07E7                          __size_of_EUSART_Initialize 0019  
                                      send_OK@reply 005D                                 __end_of_EUSART_Read 0FD1  
                          DAC1220_Write3Bytes@byte1 0075                            DAC1220_Write3Bytes@byte2 0076  
                          DAC1220_Write3Bytes@byte3 0077                           __end_of_HEFLASH_readBlock 0551  
                            HEFLASH_readBlock@count 0074                          DAC1220_Write2Bytes@address 0077  
                                         __pfunctab 0100                          __size_of_interpret_command 01BF  
                                       _FLASH_erase 071A                                         _FLASH_write 0622  
                                    ??_WriteByteSPI 0072                                           __pstrings 0018  
                                     _DAC1220_Reset 04E4                                            ?__unlock 0070  
                             __end_of_InitializeSPI 0FDE                                            ?_send_OK 0070  
                           __size_of_command_range1 0011                             __size_of_command_range2 0011  
                           __size_of_command_range3 0011                                   command_read_adc@i 0065  
                              MCP3550_Read@adc_data 0078                                            ?_strncmp 0071  
                                         _send_WAIT 077C                                            _LATAbits 010C  
            EUSART_SetErrorHandler@interruptHandler 0072                                            _LATBbits 010D  
                                          _LATCbits 010E                         __size_of_HEFLASH_writeBlock 0060  
                                         clear_ram0 0F98                                   _eusartRxLastError 0023  
                            InitializeIO@startReply 007B                                            _PIR1bits 0011  
                   ??_EUSART_SetFramingErrorHandler 0071                                     FLASH_erase@temp 0073  
                            ??_command_read_dac_cal 005B                fp__EUSART_DefaultOverrunErrorHandler 0000  
                 _EUSART_DefaultOverrunErrorHandler 0000                                     _DAC1220_SelfCal 00F4  
                              __size_of_ReadByteSPI 0017                                            _SPIDelay 0F92  
                                    ?_DAC1220_Reset 0070                                         __stringdata 0019  
                                       _EUSART_Read 0FC6                                          _ACTCONbits 039B  
                               _command_read_offset 06A6                                          ?_send_WAIT 0070  
                                   _command_cell_on 0F79                      ?_command_save_shuntcalibration 0070  
                        __size_of_HEFLASH_readBlock 0035                               __size_of_DAC1220_Init 0016  
                             WriteByteSPI@data_byte 0073                          DAC1220_Write3Bytes@address 0078  
                                   _command_set_dac 06C5                                    FLASH_write@latch 0075  
             __end_of_command_read_shuntcalibration 0686              __size_of_command_read_shuntcalibration 0021  
                     _command_read_shuntcalibration 0665                            __end_of_command_cell_off 0F83  
                               _EUSART_ErrorHandler 0020                                     _command_unknown 07A8  
                              ?_command_read_offset 0070                                  __end_of__stringtab 0019  
                            __size_of_Read2BytesSPI 003A                                    __size_of__unlock 0009  
                                          __fptable 0100                            __end_of_command_read_adc 0622  
                                  __size_of_send_OK 0016                                            __ptext10 06A6  
                                          __ptext11 05B3                                            __ptext20 0342  
                                          __ptext12 0600                                            __ptext21 071A  
                                          __ptext13 077C                                            __ptext30 0F7E  
                                          __ptext22 0622                                            __ptext14 04AC  
                                          __ptext31 0F79                                            __ptext23 0FB3  
                                          __ptext15 0472                                            __ptext40 0FA5  
                                          __ptext32 0792                                            __ptext24 06C5  
                                          __ptext16 042F                                            __ptext41 0F9E  
                                          __ptext33 07A8                                            __ptext25 00E3  
                                          __ptext17 00F4                                            __ptext50 051C  
                                          __ptext42 07BE                                            __ptext34 02C2  
                                          __ptext26 0FEF                                            __ptext18 0551  
                                          __ptext51 07D4                                            __ptext43 0686  
                                          __ptext35 0733                                            __ptext27 0FDE  
                                          __ptext19 0765                                            __ptext44 06E4  
                                          __ptext36 07F8                                            __ptext28 0F88  
                                          __ptext45 0700                                            __ptext37 05DB  
                                          __ptext29 0F83                                            __ptext46 0FBC  
                                          __ptext38 074C                                            __ptext47 04E4  
                                          __ptext39 0FAC                                            __ptext48 0F92  
                                          __ptext49 0FD1                                          _FLASH_read 07D4  
                                     _heflashbuffer 0027                                       ?_MCP3550_Read 0070  
                                      _DAC1220_Init 07BE                                  FLASH_erase@address 0071  
                                  __size_of_strncmp 0044                        __size_of_DAC1220_Write2Bytes 001C  
                       __size_of_EUSART_is_rx_ready 0005                        __size_of_DAC1220_Write3Bytes 0020  
                                     __size_of_main 0030                                __end_of_WriteByteSPI 071A  
                              ReadByteSPI@data_byte 0074                                 _command_save_offset 00D2  
                                        strncmp@len 0074                             __end_of_DAC1220_SelfCal 0100  
                           ?_EUSART_SetErrorHandler 0070                                 _command_set_dac_cal 03A2  
     EUSART_SetOverrunErrorHandler@interruptHandler 0072                                     ??_DAC1220_Reset 0072  
                             ??_command_read_offset 005B               __end_of_EUSART_SetFramingErrorHandler 0FA5  
            __size_of_EUSART_SetFramingErrorHandler 0007                       _EUSART_SetFramingErrorHandler 0F9E  
                    __size_of_command_calibrate_dac 0043                       __end_of_command_calibrate_dac 0472  
                            MCP3550_Read@data_ready 0077                                ?_command_save_offset 0070  
                                        _INTCONbits 000B                                  _DAC1220_Read3Bytes 0551  
                              ?_command_set_dac_cal 0070                                            memcpy@d1 0075  
                                          memcpy@s1 0071                                      _command_range1 0FDE  
                                    _command_range2 0FEF                                      _command_range3 00E3  
                                   FLASH_write@data 0073                                      ??_MCP3550_Read 0076  
                                   FLASH_write@temp 0076                             __end_of_command_cell_on 0F7E  
                           DAC1220_Read3Bytes@byte1 0075                             DAC1220_Read3Bytes@byte2 0076  
                           DAC1220_Read3Bytes@byte3 0077                                            intlevel1 0100  
                               ?_DAC1220_Read3Bytes 0075                                        _uart_command 0047  
                                        _PMCON1bits 0195                                       _Read2BytesSPI 0472  
                                       ??_send_WAIT 007B                             __end_of_command_set_dac 06E4  
                    __end_of_EUSART_SetErrorHandler 0FB3                                   __CFG_CLKOUTEN$OFF 0000  
               __end_of_command_mode_potentiostatic 0F88                         _command_mode_potentiostatic 0F83  
                                         strncmp@s1 0071                                           strncmp@s2 0073  
                           __end_of_command_unknown 07BE                                          _OSCCONbits 0099  
                              __CFG_CPUDIV$NOCLKDIV 0000       EUSART_SetFramingErrorHandler@interruptHandler 0072  
                                      ?_FLASH_erase 0071                                ??_DAC1220_Read3Bytes 0078  
                                      ?_FLASH_write 0071                               ??_command_save_offset 005E  
                    ?_command_read_shuntcalibration 0070                              __end_of_command_range1 0FEF  
                            __end_of_command_range2 1000                              __end_of_command_range3 00F4  
                             ??_command_set_dac_cal 005E                       fp__EUSART_DefaultErrorHandler 0000  
                                          strlen@cp 0078                                _transmit_data_length 0026  
                           Read2BytesSPI@data1_byte 0075                             Read2BytesSPI@data2_byte 0072  
                                       ?_FLASH_read 0071                                  EUSART_Write@txData 0071  
                                    ?_Read2BytesSPI 0072                                    ?_DAC1220_SelfCal 0070  
                                        _USART_Send 0733  
